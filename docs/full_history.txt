======================================================================
Commit: 32bc79485775bc1d27ed1199942427993516b5d8
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-13 09:19:55 +0300
Message:
batman


---- DIFF ----
diff --git a/ttlog-view/Cargo.toml b/ttlog-view/Cargo.toml
new file mode 100644
index 0000000..4055b33
--- /dev/null
+++ b/ttlog-view/Cargo.toml
@@ -0,0 +1,6 @@
+[package]
+name = "ttlog-view"
+version = "0.1.0"
+edition = "2024"
+
+[dependencies]
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
new file mode 100644
index 0000000..80a1832
--- /dev/null
+++ b/ttlog-view/src/main.rs
@@ -0,0 +1,3 @@
+fn main() {
+  println!("Hello, world!");
+}
diff --git a/ttlog/Cargo.lock b/ttlog/Cargo.lock
new file mode 100644
index 0000000..b8ba84b
--- /dev/null
+++ b/ttlog/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 4
+
+[[package]]
+name = "ttlog"
+version = "0.1.0"
diff --git a/ttlog/Cargo.toml b/ttlog/Cargo.toml
new file mode 100644
index 0000000..76dc785
--- /dev/null
+++ b/ttlog/Cargo.toml
@@ -0,0 +1,6 @@
+[package]
+name = "ttlog"
+version = "0.1.0"
+edition = "2024"
+
+[dependencies]
diff --git a/ttlog/src/lib.rs b/ttlog/src/lib.rs
new file mode 100644
index 0000000..78ba4fe
--- /dev/null
+++ b/ttlog/src/lib.rs
@@ -0,0 +1,14 @@
+pub fn add(left: u64, right: u64) -> u64 {
+  left + right
+}
+
+#[cfg(test)]
+mod tests {
+  use super::*;
+
+  #[test]
+  fn it_works() {
+    let result = add(2, 2);
+    assert_eq!(result, 4);
+  }
+}

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]

----- FILE: ttlog-view/src/main.rs -----
fn main() {
  println!("Hello, world!");
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "ttlog"
version = "0.1.0"

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]

----- FILE: ttlog/src/lib.rs -----
pub fn add(left: u64, right: u64) -> u64 {
  left + right
}

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn it_works() {
    let result = add(2, 2);
    assert_eq!(result, 4);
  }
}

======================================================================
Commit: 8505824bbaa0857e82b7cda7360e9a4b0932c5aa
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-13 10:58:03 +0300
Message:
feat(ttlog): add buffer and event modules with tests

- Implement `buffer` module with ring buffer structure
- Implement `event` module with serialization support
- Add unit tests for both `buffer` and `event`
- Update Cargo.toml and Cargo.lock for new modules
- Update lib.rs to export new modules


---- DIFF ----
diff --git a/ttlog/Cargo.lock b/ttlog/Cargo.lock
index b8ba84b..7fe307c 100644
--- a/ttlog/Cargo.lock
+++ b/ttlog/Cargo.lock
@@ -2,6 +2,348 @@
 # It is not intended for manual editing.
 version = 4
 
+[[package]]
+name = "android-tzdata"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"
+
+[[package]]
+name = "android_system_properties"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "autocfg"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
+
+[[package]]
+name = "bumpalo"
+version = "3.19.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"
+
+[[package]]
+name = "cc"
+version = "1.2.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
+dependencies = [
+ "shlex",
+]
+
+[[package]]
+name = "cfg-if"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"
+
+[[package]]
+name = "chrono"
+version = "0.4.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
+dependencies = [
+ "android-tzdata",
+ "iana-time-zone",
+ "js-sys",
+ "num-traits",
+ "wasm-bindgen",
+ "windows-link",
+]
+
+[[package]]
+name = "core-foundation-sys"
+version = "0.8.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
+
+[[package]]
+name = "iana-time-zone"
+version = "0.1.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
+dependencies = [
+ "android_system_properties",
+ "core-foundation-sys",
+ "iana-time-zone-haiku",
+ "js-sys",
+ "log",
+ "wasm-bindgen",
+ "windows-core",
+]
+
+[[package]]
+name = "iana-time-zone-haiku"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
+dependencies = [
+ "cc",
+]
+
+[[package]]
+name = "itoa"
+version = "1.0.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"
+
+[[package]]
+name = "js-sys"
+version = "0.3.77"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
+dependencies = [
+ "once_cell",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "libc"
+version = "0.2.175"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"
+
+[[package]]
+name = "log"
+version = "0.4.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"
+
+[[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
+name = "num-traits"
+version = "0.2.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
+dependencies = [
+ "autocfg",
+]
+
+[[package]]
+name = "once_cell"
+version = "1.21.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"
+
+[[package]]
+name = "proc-macro2"
+version = "1.0.97"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "quote"
+version = "1.0.40"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
+dependencies = [
+ "proc-macro2",
+]
+
+[[package]]
+name = "rustversion"
+version = "1.0.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"
+
+[[package]]
+name = "ryu"
+version = "1.0.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"
+
+[[package]]
+name = "serde"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
+dependencies = [
+ "serde_derive",
+]
+
+[[package]]
+name = "serde_derive"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "serde_json"
+version = "1.0.142"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
+dependencies = [
+ "itoa",
+ "memchr",
+ "ryu",
+ "serde",
+]
+
+[[package]]
+name = "shlex"
+version = "1.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
+
+[[package]]
+name = "syn"
+version = "2.0.104"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
 [[package]]
 name = "ttlog"
 version = "0.1.0"
+dependencies = [
+ "chrono",
+ "serde",
+ "serde_json",
+]
+
+[[package]]
+name = "unicode-ident"
+version = "1.0.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
+
+[[package]]
+name = "wasm-bindgen"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
+dependencies = [
+ "cfg-if",
+ "once_cell",
+ "rustversion",
+ "wasm-bindgen-macro",
+]
+
+[[package]]
+name = "wasm-bindgen-backend"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
+dependencies = [
+ "bumpalo",
+ "log",
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-macro"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
+dependencies = [
+ "quote",
+ "wasm-bindgen-macro-support",
+]
+
+[[package]]
+name = "wasm-bindgen-macro-support"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-backend",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-shared"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "windows-core"
+version = "0.61.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
+dependencies = [
+ "windows-implement",
+ "windows-interface",
+ "windows-link",
+ "windows-result",
+ "windows-strings",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.60.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.59.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-link"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"
+
+[[package]]
+name = "windows-result"
+version = "0.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-strings"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
+dependencies = [
+ "windows-link",
+]
diff --git a/ttlog/Cargo.toml b/ttlog/Cargo.toml
index 76dc785..2d7963f 100644
--- a/ttlog/Cargo.toml
+++ b/ttlog/Cargo.toml
@@ -4,3 +4,7 @@ version = "0.1.0"
 edition = "2024"
 
 [dependencies]
+chrono = "0.4.41"
+serde = { version = "1.0", features = ["derive"] }
+serde_json = "1.0.142"
+
diff --git a/ttlog/src/buffer/__test__/mod.rs b/ttlog/src/buffer/__test__/mod.rs
new file mode 100644
index 0000000..06f12f0
--- /dev/null
+++ b/ttlog/src/buffer/__test__/mod.rs
@@ -0,0 +1,25 @@
+#[cfg(test)]
+mod tests {
+  use crate::{buffer::TTlogBuffer, event::Event};
+
+  #[test]
+  fn test_push_and_iter() {
+    let capacity = 10;
+    let mut buffer = TTlogBuffer::new(capacity);
+
+    for i in 0..(capacity + 3) {
+      buffer.push(Event {
+        ts: 1755082651423,
+        level: i as u8,
+        message: format!("Event number {}", i),
+      });
+    }
+
+    let items: Vec<_> = buffer.iter().collect();
+    println!("{:#?}", items);
+
+    assert_eq!(items.len(), capacity);
+    assert_eq!(items.first().unwrap().level, 3);
+    assert_eq!(items.last().unwrap().level, 12);
+  }
+}
diff --git a/ttlog/src/buffer/mod.rs b/ttlog/src/buffer/mod.rs
new file mode 100644
index 0000000..568a7b4
--- /dev/null
+++ b/ttlog/src/buffer/mod.rs
@@ -0,0 +1,37 @@
+mod __test__;
+
+use serde::Serialize;
+
+#[derive(Debug, Clone, Serialize)]
+pub struct TTlogBuffer<T: Clone> {
+  pub buffer: Vec<Option<T>>,
+  pub capacity: usize,
+  pub head: usize,
+}
+
+impl<T: Clone> TTlogBuffer<T> {
+  pub fn new(capacity: usize) -> Self {
+    Self {
+      buffer: vec![None; capacity],
+      capacity,
+      head: 0,
+    }
+  }
+
+  pub fn push(&mut self, event: T) {
+    if self.head == self.capacity - 1 {
+      self.head = 0;
+    } else if self.head < self.capacity - 1 {
+      self.head += 1;
+    }
+
+    self.buffer[self.head] = Some(event);
+  }
+
+  pub fn iter(&self) -> impl Iterator<Item = &T> {
+    (0..self.capacity).map(move |i| {
+      let idx = (self.head + i + 1) % self.capacity;
+      self.buffer[idx].as_ref().unwrap()
+    })
+  }
+}
diff --git a/ttlog/src/event/__test__/mod.rs b/ttlog/src/event/__test__/mod.rs
new file mode 100644
index 0000000..fe91cd3
--- /dev/null
+++ b/ttlog/src/event/__test__/mod.rs
@@ -0,0 +1,29 @@
+#[cfg(test)]
+mod tests {
+  use crate::event::Event;
+
+  const JSON: &str = r#"{
+        "ts": 1755082651423, 
+        "level": 1,
+        "message": "This is a test for event"
+    }"#;
+
+  #[test]
+  fn test_event_serialization() {
+    let ts = 1755082651423; // fixed for reproducibility
+
+    let event = Event::new(ts, 1, String::from("This is a test for event")).serialize();
+    let expected = r#"{"ts":1755082651423,"level":1,"message":"This is a test for event"}"#;
+
+    assert_eq!(event, expected);
+  }
+
+  #[test]
+  fn test_event_deserialization() {
+    let event: Event = Event::deserialize(JSON.to_string());
+
+    assert_eq!(event.ts, 1755082651423);
+    assert_eq!(event.level, 1);
+    assert_eq!(event.message, "This is a test for event");
+  }
+}
diff --git a/ttlog/src/event/mod.rs b/ttlog/src/event/mod.rs
new file mode 100644
index 0000000..6c42efa
--- /dev/null
+++ b/ttlog/src/event/mod.rs
@@ -0,0 +1,23 @@
+mod __test__;
+use serde::{Deserialize, Serialize};
+
+#[derive(Debug, Clone, Serialize, Deserialize)]
+pub struct Event {
+  pub ts: u64,
+  pub level: u8,
+  pub message: String,
+}
+
+impl Event {
+  pub fn new(ts: u64, level: u8, message: String) -> Self {
+    Self { ts, level, message }
+  }
+
+  pub fn serialize(&self) -> String {
+    serde_json::to_string(self).expect("Failed to serialize")
+  }
+
+  pub fn deserialize(json: String) -> Self {
+    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
+  }
+}
diff --git a/ttlog/src/lib.rs b/ttlog/src/lib.rs
index 78ba4fe..21c250e 100644
--- a/ttlog/src/lib.rs
+++ b/ttlog/src/lib.rs
@@ -1,14 +1,2 @@
-pub fn add(left: u64, right: u64) -> u64 {
-  left + right
-}
-
-#[cfg(test)]
-mod tests {
-  use super::*;
-
-  #[test]
-  fn it_works() {
-    let result = add(2, 2);
-    assert_eq!(result, 4);
-  }
-}
+pub mod buffer;
+pub mod event;

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]

----- FILE: ttlog-view/src/main.rs -----
fn main() {
  println!("Hello, world!");
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "serde",
 "serde_json",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0.142"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::TTlogBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = TTlogBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        ts: 1755082651423,
        level: i as u8,
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();
    println!("{:#?}", items);

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3);
    assert_eq!(items.last().unwrap().level, 12);
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::Serialize;

#[derive(Debug, Clone, Serialize)]
pub struct TTlogBuffer<T: Clone> {
  pub buffer: Vec<Option<T>>,
  pub capacity: usize,
  pub head: usize,
}

impl<T: Clone> TTlogBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      buffer: vec![None; capacity],
      capacity,
      head: 0,
    }
  }

  pub fn push(&mut self, event: T) {
    if self.head == self.capacity - 1 {
      self.head = 0;
    } else if self.head < self.capacity - 1 {
      self.head += 1;
    }

    self.buffer[self.head] = Some(event);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    (0..self.capacity).map(move |i| {
      let idx = (self.head + i + 1) % self.capacity;
      self.buffer[idx].as_ref().unwrap()
    })
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "ts": 1755082651423, 
        "level": 1,
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1, String::from("This is a test for event")).serialize();
    let expected = r#"{"ts":1755082651423,"level":1,"message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.ts, 1755082651423);
    assert_eq!(event.level, 1);
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub ts: u64,
  pub level: u8,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: u8, message: String) -> Self {
    Self { ts, level, message }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;

======================================================================
Commit: 5c85a43208033890e84e7dab88db85a30dd7624a
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-13 12:20:11 +0300
Message:
feat: integrate chrono timestamps and expand trace module

- Replaced SystemTime usage with chrono for timestamp generation
- Added new trace module with initial tests
- Updated buffer and event tests to align with new time handling
- Updated Cargo.toml files for chrono dependency
- Minor refactoring in buffer and event modules


---- DIFF ----
diff --git a/ttlog-view/Cargo.lock b/ttlog-view/Cargo.lock
new file mode 100644
index 0000000..7d46e49
--- /dev/null
+++ b/ttlog-view/Cargo.lock
@@ -0,0 +1,503 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 4
+
+[[package]]
+name = "android-tzdata"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"
+
+[[package]]
+name = "android_system_properties"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "autocfg"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
+
+[[package]]
+name = "bumpalo"
+version = "3.19.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"
+
+[[package]]
+name = "cc"
+version = "1.2.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
+dependencies = [
+ "shlex",
+]
+
+[[package]]
+name = "cfg-if"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"
+
+[[package]]
+name = "chrono"
+version = "0.4.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
+dependencies = [
+ "android-tzdata",
+ "iana-time-zone",
+ "js-sys",
+ "num-traits",
+ "wasm-bindgen",
+ "windows-link",
+]
+
+[[package]]
+name = "core-foundation-sys"
+version = "0.8.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
+
+[[package]]
+name = "iana-time-zone"
+version = "0.1.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
+dependencies = [
+ "android_system_properties",
+ "core-foundation-sys",
+ "iana-time-zone-haiku",
+ "js-sys",
+ "log",
+ "wasm-bindgen",
+ "windows-core",
+]
+
+[[package]]
+name = "iana-time-zone-haiku"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
+dependencies = [
+ "cc",
+]
+
+[[package]]
+name = "itoa"
+version = "1.0.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"
+
+[[package]]
+name = "js-sys"
+version = "0.3.77"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
+dependencies = [
+ "once_cell",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "lazy_static"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"
+
+[[package]]
+name = "libc"
+version = "0.2.175"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"
+
+[[package]]
+name = "log"
+version = "0.4.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"
+
+[[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
+name = "nu-ansi-term"
+version = "0.46.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
+dependencies = [
+ "overload",
+ "winapi",
+]
+
+[[package]]
+name = "num-traits"
+version = "0.2.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
+dependencies = [
+ "autocfg",
+]
+
+[[package]]
+name = "once_cell"
+version = "1.21.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"
+
+[[package]]
+name = "overload"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"
+
+[[package]]
+name = "pin-project-lite"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"
+
+[[package]]
+name = "proc-macro2"
+version = "1.0.97"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "quote"
+version = "1.0.40"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
+dependencies = [
+ "proc-macro2",
+]
+
+[[package]]
+name = "rustversion"
+version = "1.0.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"
+
+[[package]]
+name = "ryu"
+version = "1.0.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"
+
+[[package]]
+name = "serde"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
+dependencies = [
+ "serde_derive",
+]
+
+[[package]]
+name = "serde_derive"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "serde_json"
+version = "1.0.142"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
+dependencies = [
+ "itoa",
+ "memchr",
+ "ryu",
+ "serde",
+]
+
+[[package]]
+name = "sharded-slab"
+version = "0.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
+dependencies = [
+ "lazy_static",
+]
+
+[[package]]
+name = "shlex"
+version = "1.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
+
+[[package]]
+name = "smallvec"
+version = "1.15.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"
+
+[[package]]
+name = "syn"
+version = "2.0.104"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "thread_local"
+version = "1.1.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
+dependencies = [
+ "cfg-if",
+]
+
+[[package]]
+name = "tracing"
+version = "0.1.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
+dependencies = [
+ "pin-project-lite",
+ "tracing-attributes",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-attributes"
+version = "0.1.30"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "tracing-core"
+version = "0.1.34"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
+dependencies = [
+ "once_cell",
+ "valuable",
+]
+
+[[package]]
+name = "tracing-log"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
+dependencies = [
+ "log",
+ "once_cell",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-subscriber"
+version = "0.3.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
+dependencies = [
+ "nu-ansi-term",
+ "sharded-slab",
+ "smallvec",
+ "thread_local",
+ "tracing-core",
+ "tracing-log",
+]
+
+[[package]]
+name = "ttlog"
+version = "0.1.0"
+dependencies = [
+ "chrono",
+ "serde",
+ "serde_json",
+ "tracing",
+ "tracing-subscriber",
+ "use",
+]
+
+[[package]]
+name = "ttlog-view"
+version = "0.1.0"
+dependencies = [
+ "tracing",
+ "ttlog",
+]
+
+[[package]]
+name = "unicode-ident"
+version = "1.0.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
+
+[[package]]
+name = "use"
+version = "0.0.1-pre.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"
+
+[[package]]
+name = "valuable"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"
+
+[[package]]
+name = "wasm-bindgen"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
+dependencies = [
+ "cfg-if",
+ "once_cell",
+ "rustversion",
+ "wasm-bindgen-macro",
+]
+
+[[package]]
+name = "wasm-bindgen-backend"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
+dependencies = [
+ "bumpalo",
+ "log",
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-macro"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
+dependencies = [
+ "quote",
+ "wasm-bindgen-macro-support",
+]
+
+[[package]]
+name = "wasm-bindgen-macro-support"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+ "wasm-bindgen-backend",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-shared"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "winapi"
+version = "0.3.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
+dependencies = [
+ "winapi-i686-pc-windows-gnu",
+ "winapi-x86_64-pc-windows-gnu",
+]
+
+[[package]]
+name = "winapi-i686-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
+
+[[package]]
+name = "winapi-x86_64-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "windows-core"
+version = "0.61.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
+dependencies = [
+ "windows-implement",
+ "windows-interface",
+ "windows-link",
+ "windows-result",
+ "windows-strings",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.60.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.59.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "windows-link"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"
+
+[[package]]
+name = "windows-result"
+version = "0.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-strings"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
+dependencies = [
+ "windows-link",
+]
diff --git a/ttlog-view/Cargo.toml b/ttlog-view/Cargo.toml
index 4055b33..8e91d93 100644
--- a/ttlog-view/Cargo.toml
+++ b/ttlog-view/Cargo.toml
@@ -4,3 +4,5 @@ version = "0.1.0"
 edition = "2024"
 
 [dependencies]
+tracing = "0.1.41"
+ttlog = { path = "../ttlog" }
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index 80a1832..cd7b591 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -1,3 +1,16 @@
+use tracing::{info, warn};
+use ttlog::init;
+
 fn main() {
-  println!("Hello, world!");
+  let buffer = init(10);
+
+  info!("App started");
+  warn!("Low disk space");
+  info!("Shutting down");
+
+  println!("--- Buffer contents ---");
+  let buf = buffer.lock().unwrap();
+  for ev in buf.iter() {
+    println!("{:?}", ev);
+  }
 }
diff --git a/ttlog/Cargo.lock b/ttlog/Cargo.lock
index 7fe307c..a1ba2fd 100644
--- a/ttlog/Cargo.lock
+++ b/ttlog/Cargo.lock
@@ -104,6 +104,12 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "lazy_static"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"
+
 [[package]]
 name = "libc"
 version = "0.2.175"
@@ -122,6 +128,16 @@ version = "2.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
 
+[[package]]
+name = "nu-ansi-term"
+version = "0.46.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
+dependencies = [
+ "overload",
+ "winapi",
+]
+
 [[package]]
 name = "num-traits"
 version = "0.2.19"
@@ -137,6 +153,18 @@ version = "1.21.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"
 
+[[package]]
+name = "overload"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"
+
+[[package]]
+name = "pin-project-lite"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"
+
 [[package]]
 name = "proc-macro2"
 version = "1.0.97"
@@ -199,12 +227,27 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "sharded-slab"
+version = "0.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
+dependencies = [
+ "lazy_static",
+]
+
 [[package]]
 name = "shlex"
 version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
 
+[[package]]
+name = "smallvec"
+version = "1.15.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"
+
 [[package]]
 name = "syn"
 version = "2.0.104"
@@ -216,6 +259,72 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "thread_local"
+version = "1.1.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
+dependencies = [
+ "cfg-if",
+]
+
+[[package]]
+name = "tracing"
+version = "0.1.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
+dependencies = [
+ "pin-project-lite",
+ "tracing-attributes",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-attributes"
+version = "0.1.30"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "tracing-core"
+version = "0.1.34"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
+dependencies = [
+ "once_cell",
+ "valuable",
+]
+
+[[package]]
+name = "tracing-log"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
+dependencies = [
+ "log",
+ "once_cell",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-subscriber"
+version = "0.3.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
+dependencies = [
+ "nu-ansi-term",
+ "sharded-slab",
+ "smallvec",
+ "thread_local",
+ "tracing-core",
+ "tracing-log",
+]
+
 [[package]]
 name = "ttlog"
 version = "0.1.0"
@@ -223,6 +332,9 @@ dependencies = [
  "chrono",
  "serde",
  "serde_json",
+ "tracing",
+ "tracing-subscriber",
+ "use",
 ]
 
 [[package]]
@@ -231,6 +343,18 @@ version = "1.0.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
 
+[[package]]
+name = "use"
+version = "0.0.1-pre.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"
+
+[[package]]
+name = "valuable"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"
+
 [[package]]
 name = "wasm-bindgen"
 version = "0.2.100"
@@ -289,6 +413,28 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "winapi"
+version = "0.3.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
+dependencies = [
+ "winapi-i686-pc-windows-gnu",
+ "winapi-x86_64-pc-windows-gnu",
+]
+
+[[package]]
+name = "winapi-i686-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
+
+[[package]]
+name = "winapi-x86_64-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
 [[package]]
 name = "windows-core"
 version = "0.61.2"
diff --git a/ttlog/Cargo.toml b/ttlog/Cargo.toml
index 2d7963f..1bada28 100644
--- a/ttlog/Cargo.toml
+++ b/ttlog/Cargo.toml
@@ -7,4 +7,7 @@ edition = "2024"
 chrono = "0.4.41"
 serde = { version = "1.0", features = ["derive"] }
 serde_json = "1.0.142"
+tracing = "0.1.41"
+tracing-subscriber = "0.3.19"
+use = "0.0.1-pre.0"
 
diff --git a/ttlog/src/buffer/__test__/mod.rs b/ttlog/src/buffer/__test__/mod.rs
index 06f12f0..0aba95f 100644
--- a/ttlog/src/buffer/__test__/mod.rs
+++ b/ttlog/src/buffer/__test__/mod.rs
@@ -10,7 +10,7 @@ mod tests {
     for i in 0..(capacity + 3) {
       buffer.push(Event {
         ts: 1755082651423,
-        level: i as u8,
+        level: i.to_string(),
         message: format!("Event number {}", i),
       });
     }
@@ -19,7 +19,7 @@ mod tests {
     println!("{:#?}", items);
 
     assert_eq!(items.len(), capacity);
-    assert_eq!(items.first().unwrap().level, 3);
-    assert_eq!(items.last().unwrap().level, 12);
+    assert_eq!(items.first().unwrap().level, 3.to_string());
+    assert_eq!(items.last().unwrap().level, 12.to_string());
   }
 }
diff --git a/ttlog/src/buffer/mod.rs b/ttlog/src/buffer/mod.rs
index 568a7b4..debd350 100644
--- a/ttlog/src/buffer/mod.rs
+++ b/ttlog/src/buffer/mod.rs
@@ -2,36 +2,30 @@ mod __test__;
 
 use serde::Serialize;
 
+use std::collections::VecDeque;
+
 #[derive(Debug, Clone, Serialize)]
 pub struct TTlogBuffer<T: Clone> {
-  pub buffer: Vec<Option<T>>,
-  pub capacity: usize,
-  pub head: usize,
+  data: VecDeque<T>,
+  capacity: usize,
 }
 
 impl<T: Clone> TTlogBuffer<T> {
   pub fn new(capacity: usize) -> Self {
     Self {
-      buffer: vec![None; capacity],
+      data: VecDeque::with_capacity(capacity),
       capacity,
-      head: 0,
     }
   }
 
-  pub fn push(&mut self, event: T) {
-    if self.head == self.capacity - 1 {
-      self.head = 0;
-    } else if self.head < self.capacity - 1 {
-      self.head += 1;
+  pub fn push(&mut self, item: T) {
+    if self.data.len() == self.capacity {
+      self.data.pop_front();
     }
-
-    self.buffer[self.head] = Some(event);
+    self.data.push_back(item);
   }
 
   pub fn iter(&self) -> impl Iterator<Item = &T> {
-    (0..self.capacity).map(move |i| {
-      let idx = (self.head + i + 1) % self.capacity;
-      self.buffer[idx].as_ref().unwrap()
-    })
+    self.data.iter()
   }
 }
diff --git a/ttlog/src/event/__test__/mod.rs b/ttlog/src/event/__test__/mod.rs
index fe91cd3..a7e3f90 100644
--- a/ttlog/src/event/__test__/mod.rs
+++ b/ttlog/src/event/__test__/mod.rs
@@ -4,7 +4,7 @@ mod tests {
 
   const JSON: &str = r#"{
         "ts": 1755082651423, 
-        "level": 1,
+        "level": "1",
         "message": "This is a test for event"
     }"#;
 
@@ -12,8 +12,8 @@ mod tests {
   fn test_event_serialization() {
     let ts = 1755082651423; // fixed for reproducibility
 
-    let event = Event::new(ts, 1, String::from("This is a test for event")).serialize();
-    let expected = r#"{"ts":1755082651423,"level":1,"message":"This is a test for event"}"#;
+    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
+    let expected = r#"{"ts":1755082651423,"level":"1","message":"This is a test for event"}"#;
 
     assert_eq!(event, expected);
   }
@@ -23,7 +23,7 @@ mod tests {
     let event: Event = Event::deserialize(JSON.to_string());
 
     assert_eq!(event.ts, 1755082651423);
-    assert_eq!(event.level, 1);
+    assert_eq!(event.level, 1.to_string());
     assert_eq!(event.message, "This is a test for event");
   }
 }
diff --git a/ttlog/src/event/mod.rs b/ttlog/src/event/mod.rs
index 6c42efa..5f0221b 100644
--- a/ttlog/src/event/mod.rs
+++ b/ttlog/src/event/mod.rs
@@ -4,12 +4,12 @@ use serde::{Deserialize, Serialize};
 #[derive(Debug, Clone, Serialize, Deserialize)]
 pub struct Event {
   pub ts: u64,
-  pub level: u8,
+  pub level: String,
   pub message: String,
 }
 
 impl Event {
-  pub fn new(ts: u64, level: u8, message: String) -> Self {
+  pub fn new(ts: u64, level: String, message: String) -> Self {
     Self { ts, level, message }
   }
 
diff --git a/ttlog/src/lib.rs b/ttlog/src/lib.rs
index 21c250e..5e1528c 100644
--- a/ttlog/src/lib.rs
+++ b/ttlog/src/lib.rs
@@ -1,2 +1,17 @@
+use std::sync::{Arc, Mutex};
+
+use crate::{buffer::TTlogBuffer, event::Event, trace::BufferLayer};
+use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
+
 pub mod buffer;
 pub mod event;
+pub mod trace;
+
+pub fn init(capacity: usize) -> Arc<Mutex<TTlogBuffer<Event>>> {
+  let buffer = Arc::new(Mutex::new(TTlogBuffer::new(capacity)));
+  let layer = BufferLayer::new(buffer.clone());
+
+  tracing_subscriber::registry().with(layer).init();
+
+  buffer
+}
diff --git a/ttlog/src/trace/__test__/mod.rs b/ttlog/src/trace/__test__/mod.rs
new file mode 100644
index 0000000..974fcf4
--- /dev/null
+++ b/ttlog/src/trace/__test__/mod.rs
@@ -0,0 +1,6 @@
+// #[cfg(test)]
+// mod tests {
+//
+//   #[test]
+//   fn hello() {}
+// }
diff --git a/ttlog/src/trace/mod.rs b/ttlog/src/trace/mod.rs
new file mode 100644
index 0000000..da74300
--- /dev/null
+++ b/ttlog/src/trace/mod.rs
@@ -0,0 +1,50 @@
+mod __test__;
+use std::sync::{Arc, Mutex};
+
+use crate::{buffer::TTlogBuffer, event::Event};
+use chrono::Utc;
+use tracing::{field::Field, Event as TracingEvent, Subscriber};
+use tracing_subscriber::{layer::Context, Layer};
+
+pub struct BufferLayer {
+  pub buffer: Arc<Mutex<TTlogBuffer<Event>>>,
+}
+
+impl BufferLayer {
+  pub fn new(buffer: Arc<Mutex<TTlogBuffer<Event>>>) -> Self {
+    Self { buffer }
+  }
+}
+
+impl<T: Subscriber> Layer<T> for BufferLayer {
+  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
+    let ts = Utc::now().timestamp_millis() as u64;
+    let level = event.metadata().level().to_string();
+
+    // Extract message
+    let mut visitor = MessageVisitor::default();
+    event.record(&mut visitor);
+    let message = visitor.message.unwrap_or_else(|| "".to_string());
+
+    let new_event = Event::new(ts, level, message);
+
+    if let Ok(mut buf) = self.buffer.lock() {
+      buf.push(new_event);
+    }
+  }
+}
+
+#[derive(Default)]
+struct MessageVisitor {
+  message: Option<String>,
+}
+
+impl tracing::field::Visit for MessageVisitor {
+  fn record_str(&mut self, _field: &Field, value: &str) {
+    self.message = Some(value.to_string());
+  }
+
+  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
+    self.message = Some(format!("{:?}", value));
+  }
+}

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "serde",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/src/main.rs -----
use tracing::{info, warn};
use ttlog::init;

fn main() {
  let buffer = init(10);

  info!("App started");
  warn!("Low disk space");
  info!("Shutting down");

  println!("--- Buffer contents ---");
  let buf = buffer.lock().unwrap();
  for ev in buf.iter() {
    println!("{:?}", ev);
  }
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "serde",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::TTlogBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = TTlogBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        ts: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();
    println!("{:#?}", items);

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::Serialize;

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize)]
pub struct TTlogBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> TTlogBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "ts": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected = r#"{"ts":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.ts, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub ts: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self { ts, level, message }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
use std::sync::{Arc, Mutex};

use crate::{buffer::TTlogBuffer, event::Event, trace::BufferLayer};
use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};

pub mod buffer;
pub mod event;
pub mod trace;

pub fn init(capacity: usize) -> Arc<Mutex<TTlogBuffer<Event>>> {
  let buffer = Arc::new(Mutex::new(TTlogBuffer::new(capacity)));
  let layer = BufferLayer::new(buffer.clone());

  tracing_subscriber::registry().with(layer).init();

  buffer
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
// #[cfg(test)]
// mod tests {
//
//   #[test]
//   fn hello() {}
// }

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::TTlogBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, Layer};

pub struct BufferLayer {
  pub buffer: Arc<Mutex<TTlogBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<TTlogBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T: Subscriber> Layer<T> for BufferLayer {
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: 19317bf84004007e2305b08e422336b32f688b35
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-13 12:45:59 +0300
Message:
feat: implement Trace system with BufferLayer and ring buffer logging

- Added `Trace` struct to manage a thread-safe ring buffer of events
- Created `BufferLayer` for integrating `tracing` subscriber with the buffer
- Updated tests for buffer, event, and trace modules
- Connected `ttlog-view` main.rs to use the Trace logging system


---- DIFF ----
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index cd7b591..b2179c9 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -1,16 +1,13 @@
-use tracing::{info, warn};
-use ttlog::init;
+use tracing::info;
+use ttlog::trace::Trace;
 
 fn main() {
-  let buffer = init(10);
+  let trace = Trace::init(5); // buffer size
 
-  info!("App started");
-  warn!("Low disk space");
-  info!("Shutting down");
+  info!("First log message");
+  info!("Second log message");
+  info!("Third log message");
 
-  println!("--- Buffer contents ---");
-  let buf = buffer.lock().unwrap();
-  for ev in buf.iter() {
-    println!("{:?}", ev);
-  }
+  println!("--- Buffer Contents ---");
+  trace.print_logs();
 }
diff --git a/ttlog/src/buffer/__test__/mod.rs b/ttlog/src/buffer/__test__/mod.rs
index 0aba95f..8e55c2c 100644
--- a/ttlog/src/buffer/__test__/mod.rs
+++ b/ttlog/src/buffer/__test__/mod.rs
@@ -1,15 +1,15 @@
 #[cfg(test)]
 mod tests {
-  use crate::{buffer::TTlogBuffer, event::Event};
+  use crate::{buffer::RingBuffer, event::Event};
 
   #[test]
   fn test_push_and_iter() {
     let capacity = 10;
-    let mut buffer = TTlogBuffer::new(capacity);
+    let mut buffer = RingBuffer::new(capacity);
 
     for i in 0..(capacity + 3) {
       buffer.push(Event {
-        ts: 1755082651423,
+        timestamps: 1755082651423,
         level: i.to_string(),
         message: format!("Event number {}", i),
       });
diff --git a/ttlog/src/buffer/mod.rs b/ttlog/src/buffer/mod.rs
index debd350..9856f90 100644
--- a/ttlog/src/buffer/mod.rs
+++ b/ttlog/src/buffer/mod.rs
@@ -5,12 +5,12 @@ use serde::Serialize;
 use std::collections::VecDeque;
 
 #[derive(Debug, Clone, Serialize)]
-pub struct TTlogBuffer<T: Clone> {
+pub struct RingBuffer<T: Clone> {
   data: VecDeque<T>,
   capacity: usize,
 }
 
-impl<T: Clone> TTlogBuffer<T> {
+impl<T: Clone> RingBuffer<T> {
   pub fn new(capacity: usize) -> Self {
     Self {
       data: VecDeque::with_capacity(capacity),
diff --git a/ttlog/src/event/__test__/mod.rs b/ttlog/src/event/__test__/mod.rs
index a7e3f90..840765e 100644
--- a/ttlog/src/event/__test__/mod.rs
+++ b/ttlog/src/event/__test__/mod.rs
@@ -3,7 +3,7 @@ mod tests {
   use crate::event::Event;
 
   const JSON: &str = r#"{
-        "ts": 1755082651423, 
+        "timestamps": 1755082651423, 
         "level": "1",
         "message": "This is a test for event"
     }"#;
@@ -13,7 +13,8 @@ mod tests {
     let ts = 1755082651423; // fixed for reproducibility
 
     let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
-    let expected = r#"{"ts":1755082651423,"level":"1","message":"This is a test for event"}"#;
+    let expected =
+      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;
 
     assert_eq!(event, expected);
   }
@@ -22,7 +23,7 @@ mod tests {
   fn test_event_deserialization() {
     let event: Event = Event::deserialize(JSON.to_string());
 
-    assert_eq!(event.ts, 1755082651423);
+    assert_eq!(event.timestamps, 1755082651423);
     assert_eq!(event.level, 1.to_string());
     assert_eq!(event.message, "This is a test for event");
   }
diff --git a/ttlog/src/event/mod.rs b/ttlog/src/event/mod.rs
index 5f0221b..6fc1b56 100644
--- a/ttlog/src/event/mod.rs
+++ b/ttlog/src/event/mod.rs
@@ -3,14 +3,18 @@ use serde::{Deserialize, Serialize};
 
 #[derive(Debug, Clone, Serialize, Deserialize)]
 pub struct Event {
-  pub ts: u64,
+  pub timestamps: u64,
   pub level: String,
   pub message: String,
 }
 
 impl Event {
   pub fn new(ts: u64, level: String, message: String) -> Self {
-    Self { ts, level, message }
+    Self {
+      timestamps: ts,
+      level,
+      message,
+    }
   }
 
   pub fn serialize(&self) -> String {
diff --git a/ttlog/src/lib.rs b/ttlog/src/lib.rs
index 5e1528c..3929ad8 100644
--- a/ttlog/src/lib.rs
+++ b/ttlog/src/lib.rs
@@ -1,17 +1,4 @@
-use std::sync::{Arc, Mutex};
-
-use crate::{buffer::TTlogBuffer, event::Event, trace::BufferLayer};
-use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
-
 pub mod buffer;
 pub mod event;
 pub mod trace;
-
-pub fn init(capacity: usize) -> Arc<Mutex<TTlogBuffer<Event>>> {
-  let buffer = Arc::new(Mutex::new(TTlogBuffer::new(capacity)));
-  let layer = BufferLayer::new(buffer.clone());
-
-  tracing_subscriber::registry().with(layer).init();
-
-  buffer
-}
+pub mod trace_layer;
diff --git a/ttlog/src/trace/__test__/mod.rs b/ttlog/src/trace/__test__/mod.rs
index 974fcf4..b93ef76 100644
--- a/ttlog/src/trace/__test__/mod.rs
+++ b/ttlog/src/trace/__test__/mod.rs
@@ -1,6 +1,80 @@
-// #[cfg(test)]
-// mod tests {
-//
-//   #[test]
-//   fn hello() {}
-// }
+#[cfg(test)]
+mod tests {
+  use crate::{buffer::RingBuffer, trace::Trace, trace_layer::BufferLayer};
+
+  use std::sync::{Arc, Mutex};
+  use tracing::{info, subscriber::with_default};
+  use tracing_subscriber::{layer::SubscriberExt, Registry};
+
+  /// Helper to initialize Trace locally for tests
+  fn init_local_trace(capacity: usize) -> Trace {
+    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
+    let layer = BufferLayer::new(buffer.clone());
+
+    let subscriber = Registry::default().with(layer);
+
+    // Activate subscriber for this thread only
+    with_default(subscriber, || {
+      // Tracing macros will log to this layer in this scope
+    });
+
+    Trace { buffer }
+  }
+
+  #[test]
+  fn trace_init_and_log() {
+    let trace = init_local_trace(5);
+
+    // Log some events inside a local subscriber scope
+    with_default(
+      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
+      || {
+        info!("First event");
+        info!("Second event");
+      },
+    );
+
+    let buf = trace.buffer.lock().unwrap();
+    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);
+
+    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
+    assert!(messages.contains(&"First event".to_string()));
+    assert!(messages.contains(&"Second event".to_string()));
+  }
+
+  #[test]
+  fn trace_buffer_wraparound() {
+    let trace = init_local_trace(3);
+
+    with_default(
+      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
+      || {
+        for i in 0..5 {
+          info!("Event {}", i);
+        }
+      },
+    );
+
+    let buf = trace.buffer.lock().unwrap();
+    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain
+
+    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
+    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
+  }
+
+  #[test]
+  fn trace_print_logs() {
+    let trace = init_local_trace(2);
+
+    with_default(
+      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
+      || {
+        info!("Hello");
+        info!("World");
+      },
+    );
+
+    // Ensure print_logs runs without panic
+    trace.print_logs();
+  }
+}
diff --git a/ttlog/src/trace/mod.rs b/ttlog/src/trace/mod.rs
index da74300..c9143ce 100644
--- a/ttlog/src/trace/mod.rs
+++ b/ttlog/src/trace/mod.rs
@@ -1,50 +1,33 @@
 mod __test__;
+
 use std::sync::{Arc, Mutex};
+use tracing_subscriber::layer::SubscriberExt;
+use tracing_subscriber::Registry;
 
-use crate::{buffer::TTlogBuffer, event::Event};
-use chrono::Utc;
-use tracing::{field::Field, Event as TracingEvent, Subscriber};
-use tracing_subscriber::{layer::Context, Layer};
+use crate::buffer::RingBuffer;
+use crate::event::Event;
+use crate::trace_layer::BufferLayer;
 
-pub struct BufferLayer {
-  pub buffer: Arc<Mutex<TTlogBuffer<Event>>>,
+pub struct Trace {
+  buffer: Arc<Mutex<RingBuffer<Event>>>,
 }
 
-impl BufferLayer {
-  pub fn new(buffer: Arc<Mutex<TTlogBuffer<Event>>>) -> Self {
-    Self { buffer }
-  }
-}
-
-impl<T: Subscriber> Layer<T> for BufferLayer {
-  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
-    let ts = Utc::now().timestamp_millis() as u64;
-    let level = event.metadata().level().to_string();
-
-    // Extract message
-    let mut visitor = MessageVisitor::default();
-    event.record(&mut visitor);
-    let message = visitor.message.unwrap_or_else(|| "".to_string());
-
-    let new_event = Event::new(ts, level, message);
+impl Trace {
+  pub fn init(capacity: usize) -> Self {
+    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
+    let layer = BufferLayer::new(buffer.clone());
 
-    if let Ok(mut buf) = self.buffer.lock() {
-      buf.push(new_event);
-    }
-  }
-}
+    let subscriber = Registry::default().with(layer);
+    tracing::subscriber::set_global_default(subscriber)
+      .expect("Failed to set global tracing subscriber");
 
-#[derive(Default)]
-struct MessageVisitor {
-  message: Option<String>,
-}
-
-impl tracing::field::Visit for MessageVisitor {
-  fn record_str(&mut self, _field: &Field, value: &str) {
-    self.message = Some(value.to_string());
+    Self { buffer }
   }
 
-  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
-    self.message = Some(format!("{:?}", value));
+  pub fn print_logs(&self) {
+    let buf = self.buffer.lock().unwrap();
+    for event in buf.iter() {
+      println!("[{}] {} - {}", event.timestamps, event.level, event.message);
+    }
   }
 }
diff --git a/ttlog/src/trace_layer/__test__/mod.rs b/ttlog/src/trace_layer/__test__/mod.rs
new file mode 100644
index 0000000..1f4ff50
--- /dev/null
+++ b/ttlog/src/trace_layer/__test__/mod.rs
@@ -0,0 +1,82 @@
+#[cfg(test)]
+mod tests {
+  use crate::buffer::RingBuffer;
+  use crate::trace_layer::BufferLayer;
+
+  use std::sync::{Arc, Mutex};
+  use tracing::{info, Dispatch};
+  use tracing_subscriber::layer::SubscriberExt;
+  use tracing_subscriber::Registry;
+
+  #[test]
+  fn single_event_pushes_to_buffer() {
+    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
+    let layer = BufferLayer::new(buffer.clone());
+
+    let subscriber = Registry::default().with(layer);
+    tracing::subscriber::with_default(subscriber, || {
+      info!("Hello world");
+    });
+
+    let buf = buffer.lock().unwrap();
+    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
+    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
+  }
+
+  #[test]
+  fn concurrent_logging() {
+    use std::sync::Arc;
+    use std::thread;
+    use tracing::{dispatcher, info};
+    use tracing_subscriber::{layer::SubscriberExt, Registry};
+
+    let capacity = 1000;
+    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
+    let layer = BufferLayer::new(buffer.clone());
+
+    // Wrap subscriber in Arc so threads can share it
+    let subscriber = Arc::new(Registry::default().with(layer));
+
+    let threads: Vec<_> = (0..10)
+      .map(|t| {
+        let disp = Dispatch::from(subscriber.clone());
+        thread::spawn(move || {
+          // Each thread sets the subscriber locally
+          dispatcher::with_default(&disp, || {
+            for i in 0..500 {
+              info!("Thread {} - {}", t, i);
+            }
+          });
+        })
+      })
+      .collect();
+
+    for t in threads {
+      t.join().unwrap();
+    }
+
+    // Lock buffer and check results
+    let buf = buffer.lock().unwrap();
+    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);
+
+    // Optional: print first 5 events to verify
+    for event in buf.iter().take(5) {
+      println!("{:?}", event);
+    }
+  }
+
+  #[test]
+  fn empty_message_logged() {
+    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
+    let layer = BufferLayer::new(buffer.clone());
+
+    let subscriber = Registry::default().with(layer);
+    tracing::subscriber::with_default(subscriber, || {
+      info!("");
+    });
+
+    let buf = buffer.lock().unwrap();
+    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
+    assert_eq!(buf.iter().next().unwrap().message, "");
+  }
+}
diff --git a/ttlog/src/trace_layer/mod.rs b/ttlog/src/trace_layer/mod.rs
new file mode 100644
index 0000000..bcc6796
--- /dev/null
+++ b/ttlog/src/trace_layer/mod.rs
@@ -0,0 +1,54 @@
+mod __test__;
+use std::sync::{Arc, Mutex};
+
+use crate::{buffer::RingBuffer, event::Event};
+use chrono::Utc;
+use tracing::{field::Field, Event as TracingEvent, Subscriber};
+use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};
+
+#[derive(Debug, Clone)]
+pub struct BufferLayer {
+  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
+}
+
+impl BufferLayer {
+  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
+    Self { buffer }
+  }
+}
+
+impl<T> Layer<T> for BufferLayer
+where
+  T: Subscriber + for<'a> LookupSpan<'a>,
+{
+  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
+    let ts = Utc::now().timestamp_millis() as u64;
+    let level = event.metadata().level().to_string();
+
+    // Extract message
+    let mut visitor = MessageVisitor::default();
+    event.record(&mut visitor);
+    let message = visitor.message.unwrap_or_else(|| "".to_string());
+
+    let new_event = Event::new(ts, level, message);
+
+    if let Ok(mut buf) = self.buffer.lock() {
+      buf.push(new_event);
+    }
+  }
+}
+
+#[derive(Default)]
+struct MessageVisitor {
+  message: Option<String>,
+}
+
+impl tracing::field::Visit for MessageVisitor {
+  fn record_str(&mut self, _field: &Field, value: &str) {
+    self.message = Some(value.to_string());
+  }
+
+  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
+    self.message = Some(format!("{:?}", value));
+  }
+}

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "serde",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/src/main.rs -----
use tracing::info;
use ttlog::trace::Trace;

fn main() {
  let trace = Trace::init(5); // buffer size

  info!("First log message");
  info!("Second log message");
  info!("Third log message");

  println!("--- Buffer Contents ---");
  trace.print_logs();
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "serde",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();
    println!("{:#?}", items);

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::Serialize;

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, trace::Trace, trace_layer::BufferLayer};

  use std::sync::{Arc, Mutex};
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn trace_print_logs() {
    let trace = init_local_trace(2);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("Hello");
        info!("World");
      },
    );

    // Ensure print_logs runs without panic
    trace.print_logs();
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn print_logs(&self) {
    let buf = self.buffer.lock().unwrap();
    for event in buf.iter() {
      println!("[{}] {} - {}", event.timestamps, event.level, event.message);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    for event in buf.iter().take(5) {
      println!("{:?}", event);
    }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: 7350e4e8bbc71a6b2fea2fbfcfc9d7e1b63f0289
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-13 20:41:25 +0300
Message:
feat(ttlog): Add panic hook and snapshot functionality

- Implement std::panic::set_hook to capture panics.
- On panic, serialize last N events from buffer to CBOR, compress with LZ4, and write to /tmp/ttlog-<pid>-<timestamp>.bin.
- Added flush_snapshot(reason) function for manual testing.
- Updated Trace struct and example app to integrate panic hook.
- Adjusted buffer iteration logic to safely handle unfilled slots.


---- DIFF ----
diff --git a/ttlog-view/Cargo.lock b/ttlog-view/Cargo.lock
index 7d46e49..c4e818c 100644
--- a/ttlog-view/Cargo.lock
+++ b/ttlog-view/Cargo.lock
@@ -64,6 +64,12 @@ version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
+[[package]]
+name = "half"
+version = "1.8.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"
+
 [[package]]
 name = "iana-time-zone"
 version = "0.1.63"
@@ -122,6 +128,25 @@ version = "0.4.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"
 
+[[package]]
+name = "lz4"
+version = "1.28.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
+dependencies = [
+ "lz4-sys",
+]
+
+[[package]]
+name = "lz4-sys"
+version = "1.11.1+lz4-1.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
+dependencies = [
+ "cc",
+ "libc",
+]
+
 [[package]]
 name = "memchr"
 version = "2.7.5"
@@ -204,6 +229,16 @@ dependencies = [
  "serde_derive",
 ]
 
+[[package]]
+name = "serde_cbor"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
+dependencies = [
+ "half",
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
 version = "1.0.219"
@@ -330,7 +365,9 @@ name = "ttlog"
 version = "0.1.0"
 dependencies = [
  "chrono",
+ "lz4",
  "serde",
+ "serde_cbor",
  "serde_json",
  "tracing",
  "tracing-subscriber",
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index b2179c9..3b6fb58 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -1,13 +1,19 @@
 use tracing::info;
+use ttlog::panic_hook::PanicHook;
 use ttlog::trace::Trace;
 
 fn main() {
-  let trace = Trace::init(5); // buffer size
+  let trace = Trace::init(5);
+  let buffer = trace.get_buffer();
+
+  PanicHook::install(buffer.clone());
 
   info!("First log message");
   info!("Second log message");
   info!("Third log message");
 
-  println!("--- Buffer Contents ---");
-  trace.print_logs();
+  // Trace::flush_snapshot(buffer.clone(), "main");
+
+  // Trigger panic
+  panic!("This is a test panic!");
 }
diff --git a/ttlog/Cargo.lock b/ttlog/Cargo.lock
index a1ba2fd..ff343fb 100644
--- a/ttlog/Cargo.lock
+++ b/ttlog/Cargo.lock
@@ -64,6 +64,12 @@ version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
+[[package]]
+name = "half"
+version = "1.8.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"
+
 [[package]]
 name = "iana-time-zone"
 version = "0.1.63"
@@ -122,6 +128,25 @@ version = "0.4.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"
 
+[[package]]
+name = "lz4"
+version = "1.28.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
+dependencies = [
+ "lz4-sys",
+]
+
+[[package]]
+name = "lz4-sys"
+version = "1.11.1+lz4-1.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
+dependencies = [
+ "cc",
+ "libc",
+]
+
 [[package]]
 name = "memchr"
 version = "2.7.5"
@@ -204,6 +229,16 @@ dependencies = [
  "serde_derive",
 ]
 
+[[package]]
+name = "serde_cbor"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
+dependencies = [
+ "half",
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
 version = "1.0.219"
@@ -330,7 +365,9 @@ name = "ttlog"
 version = "0.1.0"
 dependencies = [
  "chrono",
+ "lz4",
  "serde",
+ "serde_cbor",
  "serde_json",
  "tracing",
  "tracing-subscriber",
diff --git a/ttlog/Cargo.toml b/ttlog/Cargo.toml
index 1bada28..b63ab1a 100644
--- a/ttlog/Cargo.toml
+++ b/ttlog/Cargo.toml
@@ -4,8 +4,10 @@ version = "0.1.0"
 edition = "2024"
 
 [dependencies]
-chrono = "0.4.41"
+chrono = { version = "0.4.41", features = ["clock"] }
+lz4 = "1.28.1"
 serde = { version = "1.0", features = ["derive"] }
+serde_cbor = "0.11.2"
 serde_json = "1.0.142"
 tracing = "0.1.41"
 tracing-subscriber = "0.3.19"
diff --git a/ttlog/src/buffer/__test__/mod.rs b/ttlog/src/buffer/__test__/mod.rs
index 8e55c2c..ac8d7c7 100644
--- a/ttlog/src/buffer/__test__/mod.rs
+++ b/ttlog/src/buffer/__test__/mod.rs
@@ -16,7 +16,6 @@ mod tests {
     }
 
     let items: Vec<_> = buffer.iter().collect();
-    println!("{:#?}", items);
 
     assert_eq!(items.len(), capacity);
     assert_eq!(items.first().unwrap().level, 3.to_string());
diff --git a/ttlog/src/lib.rs b/ttlog/src/lib.rs
index 3929ad8..51ca804 100644
--- a/ttlog/src/lib.rs
+++ b/ttlog/src/lib.rs
@@ -1,4 +1,5 @@
 pub mod buffer;
 pub mod event;
+pub mod panic_hook;
 pub mod trace;
 pub mod trace_layer;
diff --git a/ttlog/src/panic_hook/__test__/mod.rs b/ttlog/src/panic_hook/__test__/mod.rs
new file mode 100644
index 0000000..173b1ac
--- /dev/null
+++ b/ttlog/src/panic_hook/__test__/mod.rs
@@ -0,0 +1,33 @@
+#[cfg(test)]
+mod tests {
+  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};
+
+  use std::{
+    fs, panic,
+    sync::{Arc, Mutex},
+  };
+
+  #[test]
+  fn test_panic_hook_creates_snapshot_file() {
+    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
+    PanicHook::install(buffer.clone());
+
+    let result = panic::catch_unwind(|| {
+      panic!("Trigger panic for testing hook");
+    });
+
+    assert!(result.is_err(), "Expected a panic");
+
+    // Check /tmp for any file created by flush_snapshot
+    let entries: Vec<_> = fs::read_dir("/tmp")
+      .unwrap()
+      .filter_map(|e| e.ok())
+      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
+      .collect();
+
+    assert!(
+      !entries.is_empty(),
+      "Expected a snapshot file to be created"
+    );
+  }
+}
diff --git a/ttlog/src/panic_hook/mod.rs b/ttlog/src/panic_hook/mod.rs
new file mode 100644
index 0000000..556a8d4
--- /dev/null
+++ b/ttlog/src/panic_hook/mod.rs
@@ -0,0 +1,19 @@
+mod __test__;
+use std::{
+  panic,
+  sync::{Arc, Mutex},
+};
+
+use crate::{buffer::RingBuffer, event::Event, trace::Trace};
+
+pub struct PanicHook {}
+
+impl PanicHook {
+  /// The install function sets up a custom panic handler for the current Application process
+  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
+    panic::set_hook(Box::new(move |info| {
+      eprintln!("[Panic] Captured panic: {:?}", info);
+      Trace::flush_snapshot(buffer.clone(), "panic");
+    }));
+  }
+}
diff --git a/ttlog/src/trace/__test__/mod.rs b/ttlog/src/trace/__test__/mod.rs
index b93ef76..9097374 100644
--- a/ttlog/src/trace/__test__/mod.rs
+++ b/ttlog/src/trace/__test__/mod.rs
@@ -1,8 +1,11 @@
 #[cfg(test)]
 mod tests {
-  use crate::{buffer::RingBuffer, trace::Trace, trace_layer::BufferLayer};
+  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};
 
-  use std::sync::{Arc, Mutex};
+  use std::{
+    fs,
+    sync::{Arc, Mutex},
+  };
   use tracing::{info, subscriber::with_default};
   use tracing_subscriber::{layer::SubscriberExt, Registry};
 
@@ -63,18 +66,44 @@ mod tests {
   }
 
   #[test]
-  fn trace_print_logs() {
-    let trace = init_local_trace(2);
-
-    with_default(
-      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
-      || {
-        info!("Hello");
-        info!("World");
-      },
-    );
-
-    // Ensure print_logs runs without panic
-    trace.print_logs();
+  fn test_flush_snapshot_creates_file() {
+    // 1. Create a buffer and populate it with dummy events
+    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
+
+    {
+      let mut buf_lock = buffer.lock().unwrap();
+      // Add some dummy events
+      buf_lock.push(Event::new(
+        12345,
+        "event1".to_string(),
+        "message1".to_string(),
+      ));
+      buf_lock.push(Event::new(
+        12345,
+        "event2".to_string(),
+        "message2".to_string(),
+      ));
+    }
+
+    // 2. Call flush_snapshot
+    Trace::flush_snapshot(buffer.clone(), "test");
+
+    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
+    let pid = std::process::id().to_string();
+    let files: Vec<_> = fs::read_dir("/tmp")
+      .unwrap()
+      .filter_map(|e| e.ok())
+      .filter(|e| {
+        let name = e.file_name().to_string_lossy().to_string();
+        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
+      })
+      .collect();
+
+    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");
+
+    // Optional: remove created files after test
+    for f in files {
+      let _ = fs::remove_file(f.path());
+    }
   }
 }
diff --git a/ttlog/src/trace/mod.rs b/ttlog/src/trace/mod.rs
index c9143ce..e1c3eb6 100644
--- a/ttlog/src/trace/mod.rs
+++ b/ttlog/src/trace/mod.rs
@@ -1,5 +1,9 @@
 mod __test__;
 
+use chrono::Utc;
+use lz4::block::{compress, CompressionMode};
+use std::fs::File;
+use std::io::Write;
 use std::sync::{Arc, Mutex};
 use tracing_subscriber::layer::SubscriberExt;
 use tracing_subscriber::Registry;
@@ -9,7 +13,7 @@ use crate::event::Event;
 use crate::trace_layer::BufferLayer;
 
 pub struct Trace {
-  buffer: Arc<Mutex<RingBuffer<Event>>>,
+  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
 }
 
 impl Trace {
@@ -24,10 +28,45 @@ impl Trace {
     Self { buffer }
   }
 
-  pub fn print_logs(&self) {
-    let buf = self.buffer.lock().unwrap();
-    for event in buf.iter() {
-      println!("[{}] {} - {}", event.timestamps, event.level, event.message);
+  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
+    self.buffer.clone()
+  }
+
+  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
+    // Check for the buffer
+    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
+    if buf.is_empty() {
+      return;
+    }
+
+    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
+    let cbor_buff = match serde_cbor::to_vec(&buf) {
+      Ok(buff) => buff,
+      Err(e) => {
+        println!("Failed to serialize snapshot: {}", e);
+        return;
+      },
+    };
+
+    // NOTE: We can check for more high performance compression
+    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
+      Ok(buff) => buff,
+      Err(e) => {
+        println!("Failed to compress snapshot: {}", e);
+        return;
+      },
+    };
+
+    // Build the file Path
+    let pid = std::process::id();
+    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
+    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);
+
+    // Write the file
+    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
+      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
+    } else {
+      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
     }
   }
 }
diff --git a/ttlog/src/trace_layer/__test__/mod.rs b/ttlog/src/trace_layer/__test__/mod.rs
index 1f4ff50..e5be8b9 100644
--- a/ttlog/src/trace_layer/__test__/mod.rs
+++ b/ttlog/src/trace_layer/__test__/mod.rs
@@ -60,9 +60,9 @@ mod tests {
     assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);
 
     // Optional: print first 5 events to verify
-    for event in buf.iter().take(5) {
-      println!("{:?}", event);
-    }
+    // for event in buf.iter().take(5) {
+    //   println!("{:?}", event);
+    // }
   }
 
   #[test]

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/src/main.rs -----
use tracing::info;
use ttlog::panic_hook::PanicHook;
use ttlog::trace::Trace;

fn main() {
  let trace = Trace::init(5);
  let buffer = trace.get_buffer();

  PanicHook::install(buffer.clone());

  info!("First log message");
  info!("Second log message");
  info!("Third log message");

  // Trace::flush_snapshot(buffer.clone(), "main");

  // Trigger panic
  panic!("This is a test panic!");
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::Serialize;

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;
use std::{
  panic,
  sync::{Arc, Mutex},
};

use crate::{buffer::RingBuffer, event::Event, trace::Trace};

pub struct PanicHook {}

impl PanicHook {
  /// The install function sets up a custom panic handler for the current Application process
  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
    panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);
      Trace::flush_snapshot(buffer.clone(), "panic");
    }));
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
    self.buffer.clone()
  }

  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
    // Check for the buffer
    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
    if buf.is_empty() {
      return;
    }

    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
    let cbor_buff = match serde_cbor::to_vec(&buf) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to serialize snapshot: {}", e);
        return;
      },
    };

    // NOTE: We can check for more high performance compression
    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to compress snapshot: {}", e);
        return;
      },
    };

    // Build the file Path
    let pid = std::process::id();
    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);

    // Write the file
    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
    } else {
      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: aca0da6bfa10896940f262ace1a4a9d69b71dec3
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 09:16:20 +0300
Message:
feat(cli): add ASCII art banner and menu with actions

- Implemented generate_ascii_art with terminal width wrapping
- Added interactive CLI menu using inquire::Select
- Added new utils module
- Added snapshot_read module for reading snapshot files
- Updated buffer logic in ttlog to support new features


---- DIFF ----
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index 3b6fb58..07240fc 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -1,19 +1,52 @@
-use tracing::info;
-use ttlog::panic_hook::PanicHook;
-use ttlog::trace::Trace;
+use crate::utils::{generate_ascii_art, print_snapshots};
 
-fn main() {
-  let trace = Trace::init(5);
-  let buffer = trace.get_buffer();
+mod snapshot_read;
+mod utils;
 
-  PanicHook::install(buffer.clone());
+// fn main() {
+//   print_snapshots(&snapshots);
+// }
 
-  info!("First log message");
-  info!("Second log message");
-  info!("Third log message");
+use colored::*;
+use inquire::Select;
+use std::error::Error;
 
-  // Trace::flush_snapshot(buffer.clone(), "main");
+fn main() -> Result<(), Box<dyn Error>> {
+  // Clear screen
+  print!("\x1B[2J\x1B[1;1H");
 
-  // Trigger panic
-  panic!("This is a test panic!");
+  // ASCII banner
+  let banner = generate_ascii_art("TTLOG")?;
+  println!("{}", banner.bright_yellow().bold());
+
+  // Menu items
+  let options = vec!["View log file", "View snapshot", "Filter logs", "Exit"];
+
+  // Prompt
+  let choice = Select::new("Select an action:", options.clone()).prompt()?;
+
+  let snapshots = snapshot_read::read_snapshots()?;
+
+  // Match choice
+  match choice {
+    "View log files" => {
+      println!("{}", "Opening log file...".cyan().bold());
+      println!("{:?}", snapshots);
+    },
+    "View snapshot" => {
+      println!("{}", "Opening snapshot viewer...".cyan().bold());
+      print_snapshots(&snapshots);
+    },
+    "Filter logs" => {
+      println!("{}", "Filtering logs...".cyan().bold());
+      // Filtering logic here
+    },
+    "Exit" => {
+      println!("{}", "Goodbye!".red().bold());
+      std::process::exit(0);
+    },
+    _ => unreachable!(), // Should never happen
+  }
+
+  Ok(())
 }
diff --git a/ttlog-view/src/snapshot_read/mod.rs b/ttlog-view/src/snapshot_read/mod.rs
new file mode 100644
index 0000000..d6d0071
--- /dev/null
+++ b/ttlog-view/src/snapshot_read/mod.rs
@@ -0,0 +1,47 @@
+use lz4::block::decompress;
+use serde::{Deserialize, Serialize};
+use std::{error::Error, fs};
+use ttlog::event::Event;
+
+#[derive(Debug, Clone, Serialize, Deserialize)]
+pub struct SnapShot {
+  pub name: String,
+  pub path: String,
+  pub create_at: String,
+  pub data: Vec<Event>,
+}
+
+pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
+  // Get the snapshots
+  let snapshots_dirs = fs::read_dir("/tmp")?
+    .filter_map(|e| e.ok())
+    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
+    .collect::<Vec<_>>();
+
+  let mut snapshots: Vec<SnapShot> = vec![];
+  for dir in &snapshots_dirs {
+    // Read the snapshot dir
+    let snapshot_compressed = fs::read(&dir.path())?;
+    // Decompress the snapshot
+    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
+    // Deserialize the snapshot
+    let snapshot: Vec<Event> = serde_cbor::from_slice(&snapshot_decompressed)?;
+    // Build data
+    let path = dir.path().to_string_lossy().to_string();
+    let path = path.strip_prefix("/tmp/").unwrap();
+    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
+    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
+      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
+      _ => panic!("Expected 4 parts in filename"),
+    };
+
+    snapshots.push(SnapShot {
+      name: path.strip_suffix(".bin").unwrap().to_string(),
+      path: dir.path().to_string_lossy().to_string(),
+      create_at: tsz.to_string(),
+      data: snapshot,
+    });
+  }
+
+  Ok(snapshots)
+}
diff --git a/ttlog-view/src/utils/mod.rs b/ttlog-view/src/utils/mod.rs
new file mode 100644
index 0000000..f461578
--- /dev/null
+++ b/ttlog-view/src/utils/mod.rs
@@ -0,0 +1,70 @@
+use std::error::Error;
+
+use colored::*;
+use figlet_rs::FIGfont;
+
+use crate::snapshot_read::SnapShot;
+
+use chrono::{Datelike, NaiveDateTime, Timelike};
+
+pub fn format_timestamp(ts_str: &str) -> String {
+  // Parse from string with format, avoiding deprecated functions
+  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
+    .map(|(dt, _)| dt)
+    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);
+
+  format!(
+    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
+    parsed.year(),
+    parsed.month(),
+    parsed.day(),
+    parsed.hour(),
+    parsed.minute(),
+    parsed.second()
+  )
+}
+
+pub fn print_snapshots(snapshots: &[SnapShot]) {
+  for snap in snapshots {
+    println!(
+      "{} {} {}",
+      "📦".bright_yellow(),
+      snap.name.bright_white().bold(),
+      format!("({})", format_timestamp(&snap.create_at)).dimmed()
+    );
+    println!("    {} {}", "📄".bright_cyan(), snap.path.dimmed());
+
+    for event in &snap.data {
+      let icon = match event.level.as_str() {
+        "INFO" => "ℹ️".bright_blue(),
+        "WARN" => "⚠️".bright_yellow(),
+        "ERROR" => "❌".bright_red(),
+        _ => "•".bright_white(),
+      };
+
+      println!(
+        "    {} [{}] {}",
+        icon,
+        event.level.color(match event.level.as_str() {
+          "INFO" => "blue",
+          "WARN" => "yellow",
+          "ERROR" => "red",
+          _ => "white",
+        }),
+        event.message
+      );
+    }
+    println!();
+  }
+}
+
+pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
+  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
+  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;
+
+  let figure = font
+    .convert(text)
+    .ok_or("Failed to convert text to ASCII art")?;
+
+  Ok(figure.to_string())
+}
diff --git a/ttlog/src/buffer/mod.rs b/ttlog/src/buffer/mod.rs
index 9856f90..b3269d6 100644
--- a/ttlog/src/buffer/mod.rs
+++ b/ttlog/src/buffer/mod.rs
@@ -1,10 +1,10 @@
 mod __test__;
 
-use serde::Serialize;
+use serde::{Deserialize, Serialize};
 
 use std::collections::VecDeque;
 
-#[derive(Debug, Clone, Serialize)]
+#[derive(Debug, Clone, Serialize, Deserialize)]
 pub struct RingBuffer<T: Clone> {
   data: VecDeque<T>,
   capacity: usize,

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/src/main.rs -----
use crate::utils::{generate_ascii_art, print_snapshots};

mod snapshot_read;
mod utils;

// fn main() {
//   print_snapshots(&snapshots);
// }

use colored::*;
use inquire::Select;
use std::error::Error;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  // Menu items
  let options = vec!["View log file", "View snapshot", "Filter logs", "Exit"];

  // Prompt
  let choice = Select::new("Select an action:", options.clone()).prompt()?;

  let snapshots = snapshot_read::read_snapshots()?;

  // Match choice
  match choice {
    "View log files" => {
      println!("{}", "Opening log file...".cyan().bold());
      println!("{:?}", snapshots);
    },
    "View snapshot" => {
      println!("{}", "Opening snapshot viewer...".cyan().bold());
      print_snapshots(&snapshots);
    },
    "Filter logs" => {
      println!("{}", "Filtering logs...".cyan().bold());
      // Filtering logic here
    },
    "Exit" => {
      println!("{}", "Goodbye!".red().bold());
      std::process::exit(0);
    },
    _ => unreachable!(), // Should never happen
  }

  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::event::Event;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapShot {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Vec<Event>,
}

pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapShot> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Vec<Event> = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
      _ => panic!("Expected 4 parts in filename"),
    };

    snapshots.push(SnapShot {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapShot;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapShot]) {
  for snap in snapshots {
    println!(
      "{} {} {}",
      "📦".bright_yellow(),
      snap.name.bright_white().bold(),
      format!("({})", format_timestamp(&snap.create_at)).dimmed()
    );
    println!("    {} {}", "📄".bright_cyan(), snap.path.dimmed());

    for event in &snap.data {
      let icon = match event.level.as_str() {
        "INFO" => "ℹ️".bright_blue(),
        "WARN" => "⚠️".bright_yellow(),
        "ERROR" => "❌".bright_red(),
        _ => "•".bright_white(),
      };

      println!(
        "    {} [{}] {}",
        icon,
        event.level.color(match event.level.as_str() {
          "INFO" => "blue",
          "WARN" => "yellow",
          "ERROR" => "red",
          _ => "white",
        }),
        event.message
      );
    }
    println!();
  }
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;
use std::{
  panic,
  sync::{Arc, Mutex},
};

use crate::{buffer::RingBuffer, event::Event, trace::Trace};

pub struct PanicHook {}

impl PanicHook {
  /// The install function sets up a custom panic handler for the current Application process
  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
    panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);
      Trace::flush_snapshot(buffer.clone(), "panic");
    }));
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
    self.buffer.clone()
  }

  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
    // Check for the buffer
    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
    if buf.is_empty() {
      return;
    }

    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
    let cbor_buff = match serde_cbor::to_vec(&buf) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to serialize snapshot: {}", e);
        return;
      },
    };

    // NOTE: We can check for more high performance compression
    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to compress snapshot: {}", e);
        return;
      },
    };

    // Build the file Path
    let pid = std::process::id();
    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);

    // Write the file
    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
    } else {
      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: aa6c3e5bbeff624687885ef158b7938693ce0ff4
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 09:16:36 +0300
Message:
feat(examples): add simple ttlog example and CLI font

- Added new `ttlog-simple` example project with basic main.rs
- Updated ttlog-view Cargo.toml and Cargo.lock
- Added ANSI Shadow FIGlet font to ttlog-view/fonts for ASCII art banners


---- DIFF ----
diff --git a/ttlog-view/Cargo.lock b/ttlog-view/Cargo.lock
index c4e818c..9bbf13c 100644
--- a/ttlog-view/Cargo.lock
+++ b/ttlog-view/Cargo.lock
@@ -23,12 +23,30 @@ version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
 
+[[package]]
+name = "bitflags"
+version = "1.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
+
+[[package]]
+name = "bitflags"
+version = "2.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"
+
 [[package]]
 name = "bumpalo"
 version = "3.19.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"
 
+[[package]]
+name = "byteorder"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"
+
 [[package]]
 name = "cc"
 version = "1.2.32"
@@ -58,12 +76,86 @@ dependencies = [
  "windows-link",
 ]
 
+[[package]]
+name = "colored"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
+dependencies = [
+ "windows-sys 0.59.0",
+]
+
 [[package]]
 name = "core-foundation-sys"
 version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
+[[package]]
+name = "crossterm"
+version = "0.25.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
+dependencies = [
+ "bitflags 1.3.2",
+ "crossterm_winapi",
+ "libc",
+ "mio",
+ "parking_lot",
+ "signal-hook",
+ "signal-hook-mio",
+ "winapi",
+]
+
+[[package]]
+name = "crossterm_winapi"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
+dependencies = [
+ "winapi",
+]
+
+[[package]]
+name = "dyn-clone"
+version = "1.0.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"
+
+[[package]]
+name = "errno"
+version = "0.3.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
+dependencies = [
+ "libc",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "figlet-rs"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"
+
+[[package]]
+name = "fuzzy-matcher"
+version = "0.3.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
+dependencies = [
+ "thread_local",
+]
+
+[[package]]
+name = "fxhash"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
+dependencies = [
+ "byteorder",
+]
+
 [[package]]
 name = "half"
 version = "1.8.3"
@@ -94,6 +186,23 @@ dependencies = [
  "cc",
 ]
 
+[[package]]
+name = "inquire"
+version = "0.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
+dependencies = [
+ "bitflags 2.9.1",
+ "crossterm",
+ "dyn-clone",
+ "fuzzy-matcher",
+ "fxhash",
+ "newline-converter",
+ "once_cell",
+ "unicode-segmentation",
+ "unicode-width",
+]
+
 [[package]]
 name = "itoa"
 version = "1.0.15"
@@ -122,6 +231,22 @@ version = "0.2.175"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"
 
+[[package]]
+name = "linux-raw-sys"
+version = "0.9.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"
+
+[[package]]
+name = "lock_api"
+version = "0.4.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
+dependencies = [
+ "autocfg",
+ "scopeguard",
+]
+
 [[package]]
 name = "log"
 version = "0.4.27"
@@ -153,6 +278,27 @@ version = "2.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
 
+[[package]]
+name = "mio"
+version = "0.8.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
+dependencies = [
+ "libc",
+ "log",
+ "wasi",
+ "windows-sys 0.48.0",
+]
+
+[[package]]
+name = "newline-converter"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
+dependencies = [
+ "unicode-segmentation",
+]
+
 [[package]]
 name = "nu-ansi-term"
 version = "0.46.0"
@@ -184,6 +330,29 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"
 
+[[package]]
+name = "parking_lot"
+version = "0.12.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
+dependencies = [
+ "lock_api",
+ "parking_lot_core",
+]
+
+[[package]]
+name = "parking_lot_core"
+version = "0.9.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "redox_syscall",
+ "smallvec",
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "pin-project-lite"
 version = "0.2.16"
@@ -208,6 +377,28 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "redox_syscall"
+version = "0.5.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
+dependencies = [
+ "bitflags 2.9.1",
+]
+
+[[package]]
+name = "rustix"
+version = "1.0.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
+dependencies = [
+ "bitflags 2.9.1",
+ "errno",
+ "libc",
+ "linux-raw-sys",
+ "windows-sys 0.59.0",
+]
+
 [[package]]
 name = "rustversion"
 version = "1.0.22"
@@ -220,6 +411,12 @@ version = "1.0.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"
 
+[[package]]
+name = "scopeguard"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
+
 [[package]]
 name = "serde"
 version = "1.0.219"
@@ -277,6 +474,36 @@ version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
 
+[[package]]
+name = "signal-hook"
+version = "0.3.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
+dependencies = [
+ "libc",
+ "signal-hook-registry",
+]
+
+[[package]]
+name = "signal-hook-mio"
+version = "0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
+dependencies = [
+ "libc",
+ "mio",
+ "signal-hook",
+]
+
+[[package]]
+name = "signal-hook-registry"
+version = "1.4.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
+dependencies = [
+ "libc",
+]
+
 [[package]]
 name = "smallvec"
 version = "1.15.1"
@@ -294,6 +521,16 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "terminal_size"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
+dependencies = [
+ "rustix",
+ "windows-sys 0.60.2",
+]
+
 [[package]]
 name = "thread_local"
 version = "1.1.9"
@@ -378,6 +615,14 @@ dependencies = [
 name = "ttlog-view"
 version = "0.1.0"
 dependencies = [
+ "chrono",
+ "colored",
+ "figlet-rs",
+ "inquire",
+ "lz4",
+ "serde",
+ "serde_cbor",
+ "terminal_size",
  "tracing",
  "ttlog",
 ]
@@ -388,6 +633,18 @@ version = "1.0.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
 
+[[package]]
+name = "unicode-segmentation"
+version = "1.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"
+
+[[package]]
+name = "unicode-width"
+version = "0.1.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"
+
 [[package]]
 name = "use"
 version = "0.0.1-pre.0"
@@ -400,6 +657,12 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"
 
+[[package]]
+name = "wasi"
+version = "0.11.1+wasi-snapshot-preview1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"
+
 [[package]]
 name = "wasm-bindgen"
 version = "0.2.100"
@@ -538,3 +801,216 @@ checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
 dependencies = [
  "windows-link",
 ]
+
+[[package]]
+name = "windows-sys"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
+dependencies = [
+ "windows-targets 0.48.5",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.59.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.60.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
+dependencies = [
+ "windows-targets 0.53.3",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
+dependencies = [
+ "windows_aarch64_gnullvm 0.48.5",
+ "windows_aarch64_msvc 0.48.5",
+ "windows_i686_gnu 0.48.5",
+ "windows_i686_msvc 0.48.5",
+ "windows_x86_64_gnu 0.48.5",
+ "windows_x86_64_gnullvm 0.48.5",
+ "windows_x86_64_msvc 0.48.5",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
+dependencies = [
+ "windows_aarch64_gnullvm 0.52.6",
+ "windows_aarch64_msvc 0.52.6",
+ "windows_i686_gnu 0.52.6",
+ "windows_i686_gnullvm 0.52.6",
+ "windows_i686_msvc 0.52.6",
+ "windows_x86_64_gnu 0.52.6",
+ "windows_x86_64_gnullvm 0.52.6",
+ "windows_x86_64_msvc 0.52.6",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.53.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
+dependencies = [
+ "windows-link",
+ "windows_aarch64_gnullvm 0.53.0",
+ "windows_aarch64_msvc 0.53.0",
+ "windows_i686_gnu 0.53.0",
+ "windows_i686_gnullvm 0.53.0",
+ "windows_i686_msvc 0.53.0",
+ "windows_x86_64_gnu 0.53.0",
+ "windows_x86_64_gnullvm 0.53.0",
+ "windows_x86_64_msvc 0.53.0",
+]
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
diff --git a/ttlog-view/Cargo.toml b/ttlog-view/Cargo.toml
index 8e91d93..7b18a04 100644
--- a/ttlog-view/Cargo.toml
+++ b/ttlog-view/Cargo.toml
@@ -4,5 +4,13 @@ version = "0.1.0"
 edition = "2024"
 
 [dependencies]
+chrono = "0.4.41"
+colored = "3.0.0"
+figlet-rs = "0.1.5"
+inquire = "0.7.5"
+lz4 = "1.28.1"
+serde = { version = "1.0", features = ["derive"] }
+serde_cbor = "0.11.2"
+terminal_size = "0.4.3"
 tracing = "0.1.41"
 ttlog = { path = "../ttlog" }
diff --git a/ttlog-view/fonts/ANSI Shadow.flf b/ttlog-view/fonts/ANSI Shadow.flf
new file mode 100644
index 0000000..2f0f364
--- /dev/null
+++ b/ttlog-view/fonts/ANSI Shadow.flf	
@@ -0,0 +1,722 @@
+flf2a$ 7 7 13 0 7 0 64 0
+Font Author: ?
+
+More Info:
+
+https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp
+
+FIGFont created with: http://patorjk.com/figfont-editor
+$  $@
+$  $@
+$  $@
+$  $@
+$  $@
+$  $@
+$  $@@
+██╗@
+██║@
+██║@
+╚═╝@
+██╗@
+╚═╝@
+   @@
+@
+@
+@
+@
+@
+@
+@@
+ ██╗ ██╗ @
+████████╗@
+╚██╔═██╔╝@
+████████╗@
+╚██╔═██╔╝@
+ ╚═╝ ╚═╝ @
+         @@
+▄▄███▄▄·@
+██╔════╝@
+███████╗@
+╚════██║@
+███████║@
+╚═▀▀▀══╝@
+        @@
+██╗ ██╗@
+╚═╝██╔╝@
+  ██╔╝ @
+ ██╔╝  @
+██╔╝██╗@
+╚═╝ ╚═╝@
+       @@
+   ██╗   @
+   ██║   @
+████████╗@
+██╔═██╔═╝@
+██████║  @
+╚═════╝  @
+         @@
+@
+@
+@
+@
+@
+@
+@@
+ ██╗@
+██╔╝@
+██║ @
+██║ @
+╚██╗@
+ ╚═╝@
+    @@
+██╗ @
+╚██╗@
+ ██║@
+ ██║@
+██╔╝@
+╚═╝ @
+    @@
+      @
+▄ ██╗▄@
+ ████╗@
+▀╚██╔▀@
+  ╚═╝ @
+      @
+      @@
+@
+@
+@
+@
+@
+@
+@@
+   @
+   @
+   @
+   @
+▄█╗@
+╚═╝@
+   @@
+      @
+      @
+█████╗@
+╚════╝@
+      @
+      @
+      @@
+   @
+   @
+   @
+   @
+██╗@
+╚═╝@
+   @@
+    ██╗@
+   ██╔╝@
+  ██╔╝ @
+ ██╔╝  @
+██╔╝   @
+╚═╝    @
+       @@
+ ██████╗ @
+██╔═████╗@
+██║██╔██║@
+████╔╝██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+ ██╗@
+███║@
+╚██║@
+ ██║@
+ ██║@
+ ╚═╝@
+    @@
+██████╗ @
+╚════██╗@
+ █████╔╝@
+██╔═══╝ @
+███████╗@
+╚══════╝@
+        @@
+██████╗ @
+╚════██╗@
+ █████╔╝@
+ ╚═══██╗@
+██████╔╝@
+╚═════╝ @
+        @@
+██╗  ██╗@
+██║  ██║@
+███████║@
+╚════██║@
+     ██║@
+     ╚═╝@
+        @@
+███████╗@
+██╔════╝@
+███████╗@
+╚════██║@
+███████║@
+╚══════╝@
+        @@
+ ██████╗ @
+██╔════╝ @
+███████╗ @
+██╔═══██╗@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+███████╗@
+╚════██║@
+    ██╔╝@
+   ██╔╝ @
+   ██║  @
+   ╚═╝  @
+        @@
+ █████╗ @
+██╔══██╗@
+╚█████╔╝@
+██╔══██╗@
+╚█████╔╝@
+ ╚════╝ @
+        @@
+ █████╗ @
+██╔══██╗@
+╚██████║@
+ ╚═══██║@
+ █████╔╝@
+ ╚════╝ @
+        @@
+   @
+██╗@
+╚═╝@
+██╗@
+╚═╝@
+   @
+   @@
+   @
+██╗@
+╚═╝@
+▄█╗@
+▀═╝@
+   @
+   @@
+  ██╗@
+ ██╔╝@
+██╔╝ @
+╚██╗ @
+ ╚██╗@
+  ╚═╝@
+     @@
+@
+@
+@
+@
+@
+@
+@@
+██╗  @
+╚██╗ @
+ ╚██╗@
+ ██╔╝@
+██╔╝ @
+╚═╝  @
+     @@
+██████╗ @
+╚════██╗@
+  ▄███╔╝@
+  ▀▀══╝ @
+  ██╗   @
+  ╚═╝   @
+        @@
+ ██████╗ @
+██╔═══██╗@
+██║██╗██║@
+██║██║██║@
+╚█║████╔╝@
+ ╚╝╚═══╝ @
+         @@
+ █████╗ @
+██╔══██╗@
+███████║@
+██╔══██║@
+██║  ██║@
+╚═╝  ╚═╝@
+        @@
+██████╗ @
+██╔══██╗@
+██████╔╝@
+██╔══██╗@
+██████╔╝@
+╚═════╝ @
+        @@
+ ██████╗@
+██╔════╝@
+██║     @
+██║     @
+╚██████╗@
+ ╚═════╝@
+        @@
+██████╗ @
+██╔══██╗@
+██║  ██║@
+██║  ██║@
+██████╔╝@
+╚═════╝ @
+        @@
+███████╗@
+██╔════╝@
+█████╗  @
+██╔══╝  @
+███████╗@
+╚══════╝@
+        @@
+███████╗@
+██╔════╝@
+█████╗  @
+██╔══╝  @
+██║     @
+╚═╝     @
+        @@
+ ██████╗ @
+██╔════╝ @
+██║  ███╗@
+██║   ██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+██╗  ██╗@
+██║  ██║@
+███████║@
+██╔══██║@
+██║  ██║@
+╚═╝  ╚═╝@
+        @@
+██╗@
+██║@
+██║@
+██║@
+██║@
+╚═╝@
+   @@
+     ██╗@
+     ██║@
+     ██║@
+██   ██║@
+╚█████╔╝@
+ ╚════╝ @
+        @@
+██╗  ██╗@
+██║ ██╔╝@
+█████╔╝ @
+██╔═██╗ @
+██║  ██╗@
+╚═╝  ╚═╝@
+        @@
+██╗     @
+██║     @
+██║     @
+██║     @
+███████╗@
+╚══════╝@
+        @@
+███╗   ███╗@
+████╗ ████║@
+██╔████╔██║@
+██║╚██╔╝██║@
+██║ ╚═╝ ██║@
+╚═╝     ╚═╝@
+           @@
+███╗   ██╗@
+████╗  ██║@
+██╔██╗ ██║@
+██║╚██╗██║@
+██║ ╚████║@
+╚═╝  ╚═══╝@
+          @@
+ ██████╗ @
+██╔═══██╗@
+██║   ██║@
+██║   ██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+██████╗ @
+██╔══██╗@
+██████╔╝@
+██╔═══╝ @
+██║     @
+╚═╝     @
+        @@
+ ██████╗ @
+██╔═══██╗@
+██║   ██║@
+██║▄▄ ██║@
+╚██████╔╝@
+ ╚══▀▀═╝ @
+         @@
+██████╗ @
+██╔══██╗@
+██████╔╝@
+██╔══██╗@
+██║  ██║@
+╚═╝  ╚═╝@
+        @@
+███████╗@
+██╔════╝@
+███████╗@
+╚════██║@
+███████║@
+╚══════╝@
+        @@
+████████╗@
+╚══██╔══╝@
+   ██║   @
+   ██║   @
+   ██║   @
+   ╚═╝   @
+         @@
+██╗   ██╗@
+██║   ██║@
+██║   ██║@
+██║   ██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+██╗   ██╗@
+██║   ██║@
+██║   ██║@
+╚██╗ ██╔╝@
+ ╚████╔╝ @
+  ╚═══╝  @
+         @@
+██╗    ██╗@
+██║    ██║@
+██║ █╗ ██║@
+██║███╗██║@
+╚███╔███╔╝@
+ ╚══╝╚══╝ @
+          @@
+██╗  ██╗@
+╚██╗██╔╝@
+ ╚███╔╝ @
+ ██╔██╗ @
+██╔╝ ██╗@
+╚═╝  ╚═╝@
+        @@
+██╗   ██╗@
+╚██╗ ██╔╝@
+ ╚████╔╝ @
+  ╚██╔╝  @
+   ██║   @
+   ╚═╝   @
+         @@
+███████╗@
+╚══███╔╝@
+  ███╔╝ @
+ ███╔╝  @
+███████╗@
+╚══════╝@
+        @@
+███╗@
+██╔╝@
+██║ @
+██║ @
+███╗@
+╚══╝@
+    @@
+@
+@
+@
+@
+@
+@
+@@
+███╗@
+╚██║@
+ ██║@
+ ██║@
+███║@
+╚══╝@
+    @@
+ ███╗ @
+██╔██╗@
+╚═╝╚═╝@
+      @
+      @
+      @
+      @@
+        @
+        @
+        @
+        @
+███████╗@
+╚══════╝@
+        @@
+@
+@
+@
+@
+@
+@
+@@
+ █████╗ @
+██╔══██╗@
+███████║@
+██╔══██║@
+██║  ██║@
+╚═╝  ╚═╝@
+        @@
+██████╗ @
+██╔══██╗@
+██████╔╝@
+██╔══██╗@
+██████╔╝@
+╚═════╝ @
+        @@
+ ██████╗@
+██╔════╝@
+██║     @
+██║     @
+╚██████╗@
+ ╚═════╝@
+        @@
+██████╗ @
+██╔══██╗@
+██║  ██║@
+██║  ██║@
+██████╔╝@
+╚═════╝ @
+        @@
+███████╗@
+██╔════╝@
+█████╗  @
+██╔══╝  @
+███████╗@
+╚══════╝@
+        @@
+███████╗@
+██╔════╝@
+█████╗  @
+██╔══╝  @
+██║     @
+╚═╝     @
+        @@
+ ██████╗ @
+██╔════╝ @
+██║  ███╗@
+██║   ██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+██╗  ██╗@
+██║  ██║@
+███████║@
+██╔══██║@
+██║  ██║@
+╚═╝  ╚═╝@
+        @@
+██╗@
+██║@
+██║@
+██║@
+██║@
+╚═╝@
+   @@
+     ██╗@
+     ██║@
+     ██║@
+██   ██║@
+╚█████╔╝@
+ ╚════╝ @
+        @@
+██╗  ██╗@
+██║ ██╔╝@
+█████╔╝ @
+██╔═██╗ @
+██║  ██╗@
+╚═╝  ╚═╝@
+        @@
+██╗     @
+██║     @
+██║     @
+██║     @
+███████╗@
+╚══════╝@
+        @@
+███╗   ███╗@
+████╗ ████║@
+██╔████╔██║@
+██║╚██╔╝██║@
+██║ ╚═╝ ██║@
+╚═╝     ╚═╝@
+           @@
+███╗   ██╗@
+████╗  ██║@
+██╔██╗ ██║@
+██║╚██╗██║@
+██║ ╚████║@
+╚═╝  ╚═══╝@
+          @@
+ ██████╗ @
+██╔═══██╗@
+██║   ██║@
+██║   ██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+██████╗ @
+██╔══██╗@
+██████╔╝@
+██╔═══╝ @
+██║     @
+╚═╝     @
+        @@
+ ██████╗ @
+██╔═══██╗@
+██║   ██║@
+██║▄▄ ██║@
+╚██████╔╝@
+ ╚══▀▀═╝ @
+         @@
+██████╗ @
+██╔══██╗@
+██████╔╝@
+██╔══██╗@
+██║  ██║@
+╚═╝  ╚═╝@
+        @@
+███████╗@
+██╔════╝@
+███████╗@
+╚════██║@
+███████║@
+╚══════╝@
+        @@
+████████╗@
+╚══██╔══╝@
+   ██║   @
+   ██║   @
+   ██║   @
+   ╚═╝   @
+         @@
+██╗   ██╗@
+██║   ██║@
+██║   ██║@
+██║   ██║@
+╚██████╔╝@
+ ╚═════╝ @
+         @@
+██╗   ██╗@
+██║   ██║@
+██║   ██║@
+╚██╗ ██╔╝@
+ ╚████╔╝ @
+  ╚═══╝  @
+         @@
+██╗    ██╗@
+██║    ██║@
+██║ █╗ ██║@
+██║███╗██║@
+╚███╔███╔╝@
+ ╚══╝╚══╝ @
+          @@
+██╗  ██╗@
+╚██╗██╔╝@
+ ╚███╔╝ @
+ ██╔██╗ @
+██╔╝ ██╗@
+╚═╝  ╚═╝@
+        @@
+██╗   ██╗@
+╚██╗ ██╔╝@
+ ╚████╔╝ @
+  ╚██╔╝  @
+   ██║   @
+   ╚═╝   @
+         @@
+███████╗@
+╚══███╔╝@
+  ███╔╝ @
+ ███╔╝  @
+███████╗@
+╚══════╝@
+        @@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@
+@
+@
+@
+@
+@
+@
+@@

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.59.0",
]

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.59.0",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
use crate::utils::{generate_ascii_art, print_snapshots};

mod snapshot_read;
mod utils;

// fn main() {
//   print_snapshots(&snapshots);
// }

use colored::*;
use inquire::Select;
use std::error::Error;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  // Menu items
  let options = vec!["View log file", "View snapshot", "Filter logs", "Exit"];

  // Prompt
  let choice = Select::new("Select an action:", options.clone()).prompt()?;

  let snapshots = snapshot_read::read_snapshots()?;

  // Match choice
  match choice {
    "View log files" => {
      println!("{}", "Opening log file...".cyan().bold());
      println!("{:?}", snapshots);
    },
    "View snapshot" => {
      println!("{}", "Opening snapshot viewer...".cyan().bold());
      print_snapshots(&snapshots);
    },
    "Filter logs" => {
      println!("{}", "Filtering logs...".cyan().bold());
      // Filtering logic here
    },
    "Exit" => {
      println!("{}", "Goodbye!".red().bold());
      std::process::exit(0);
    },
    _ => unreachable!(), // Should never happen
  }

  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::event::Event;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapShot {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Vec<Event>,
}

pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapShot> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Vec<Event> = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
      _ => panic!("Expected 4 parts in filename"),
    };

    snapshots.push(SnapShot {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapShot;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapShot]) {
  for snap in snapshots {
    println!(
      "{} {} {}",
      "📦".bright_yellow(),
      snap.name.bright_white().bold(),
      format!("({})", format_timestamp(&snap.create_at)).dimmed()
    );
    println!("    {} {}", "📄".bright_cyan(), snap.path.dimmed());

    for event in &snap.data {
      let icon = match event.level.as_str() {
        "INFO" => "ℹ️".bright_blue(),
        "WARN" => "⚠️".bright_yellow(),
        "ERROR" => "❌".bright_red(),
        _ => "•".bright_white(),
      };

      println!(
        "    {} [{}] {}",
        icon,
        event.level.color(match event.level.as_str() {
          "INFO" => "blue",
          "WARN" => "yellow",
          "ERROR" => "red",
          _ => "white",
        }),
        event.message
      );
    }
    println!();
  }
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;
use std::{
  panic,
  sync::{Arc, Mutex},
};

use crate::{buffer::RingBuffer, event::Event, trace::Trace};

pub struct PanicHook {}

impl PanicHook {
  /// The install function sets up a custom panic handler for the current Application process
  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
    panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);
      Trace::flush_snapshot(buffer.clone(), "panic");
    }));
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
    self.buffer.clone()
  }

  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
    // Check for the buffer
    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
    if buf.is_empty() {
      return;
    }

    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
    let cbor_buff = match serde_cbor::to_vec(&buf) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to serialize snapshot: {}", e);
        return;
      },
    };

    // NOTE: We can check for more high performance compression
    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to compress snapshot: {}", e);
        return;
      },
    };

    // Build the file Path
    let pid = std::process::id();
    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);

    // Write the file
    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
    } else {
      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: d5c6f40c3ad002046e4dd3569a65dae45adcaa0e
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 11:02:33 +0300
Message:
feat(cli): enhance TTLog viewer with preview/delete options

- Added file preview option in CLI menu
- Integrated delete functionality for selected logs
- Updated Cargo dependencies in Cargo.toml and Cargo.lock


---- DIFF ----
diff --git a/ttlog-view/Cargo.lock b/ttlog-view/Cargo.lock
index 9bbf13c..ba804ea 100644
--- a/ttlog-view/Cargo.lock
+++ b/ttlog-view/Cargo.lock
@@ -2,6 +2,15 @@
 # It is not intended for manual editing.
 version = 4
 
+[[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
 [[package]]
 name = "android-tzdata"
 version = "0.1.1"
@@ -129,7 +138,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
 dependencies = [
  "libc",
- "windows-sys 0.59.0",
+ "windows-sys 0.60.2",
 ]
 
 [[package]]
@@ -386,6 +395,35 @@ dependencies = [
  "bitflags 2.9.1",
 ]
 
+[[package]]
+name = "regex"
+version = "1.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
+
 [[package]]
 name = "rustix"
 version = "1.0.8"
@@ -396,7 +434,7 @@ dependencies = [
  "errno",
  "libc",
  "linux-raw-sys",
- "windows-sys 0.59.0",
+ "windows-sys 0.60.2",
 ]
 
 [[package]]
@@ -620,6 +658,7 @@ dependencies = [
  "figlet-rs",
  "inquire",
  "lz4",
+ "regex",
  "serde",
  "serde_cbor",
  "terminal_size",
diff --git a/ttlog-view/Cargo.toml b/ttlog-view/Cargo.toml
index 7b18a04..aa390d2 100644
--- a/ttlog-view/Cargo.toml
+++ b/ttlog-view/Cargo.toml
@@ -9,6 +9,7 @@ colored = "3.0.0"
 figlet-rs = "0.1.5"
 inquire = "0.7.5"
 lz4 = "1.28.1"
+regex = "1.11.1"
 serde = { version = "1.0", features = ["derive"] }
 serde_cbor = "0.11.2"
 terminal_size = "0.4.3"
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index 07240fc..b339d7c 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -1,15 +1,12 @@
-use crate::utils::{generate_ascii_art, print_snapshots};
-
 mod snapshot_read;
 mod utils;
 
-// fn main() {
-//   print_snapshots(&snapshots);
-// }
-
+use crate::snapshot_read::SnapShot;
+use crate::utils::{generate_ascii_art, print_snapshots};
 use colored::*;
 use inquire::Select;
 use std::error::Error;
+use std::fs;
 
 fn main() -> Result<(), Box<dyn Error>> {
   // Clear screen
@@ -19,34 +16,94 @@ fn main() -> Result<(), Box<dyn Error>> {
   let banner = generate_ascii_art("TTLOG")?;
   println!("{}", banner.bright_yellow().bold());
 
-  // Menu items
-  let options = vec!["View log file", "View snapshot", "Filter logs", "Exit"];
+  loop {
+    // Main menu
+    let choice = Select::new(
+      "Main Menu - Select an action:",
+      vec!["Show All Files", "Preview All Files", "Exit"],
+    )
+    .prompt()?;
 
-  // Prompt
-  let choice = Select::new("Select an action:", options.clone()).prompt()?;
+    match choice {
+      "Show All Files" => show_all_files_menu()?,
+      "Preview All Files" => preview_all_files()?,
+      "Exit" => {
+        println!("{}", "Goodbye!".red().bold());
+        break;
+      },
+      _ => unreachable!(),
+    }
+  }
 
-  let snapshots = snapshot_read::read_snapshots()?;
+  Ok(())
+}
+
+fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
+  let files = snapshot_read::read_snapshots()?;
+  if files.is_empty() {
+    println!("{}", "No log files found.".red());
+    return Ok(());
+  }
+
+  loop {
+    let mut options: Vec<String> = files
+      .iter()
+      .map(|f| f.name.clone()) // Convert PathBuf to String
+      .collect();
+
+    options.push("Back".to_string());
+
+    let choice = Select::new("Select a file to manage:", options).prompt()?;
+
+    if choice == "Back" {
+      break;
+    }
 
-  // Match choice
-  match choice {
-    "View log files" => {
-      println!("{}", "Opening log file...".cyan().bold());
-      println!("{:?}", snapshots);
-    },
-    "View snapshot" => {
-      println!("{}", "Opening snapshot viewer...".cyan().bold());
-      print_snapshots(&snapshots);
-    },
-    "Filter logs" => {
-      println!("{}", "Filtering logs...".cyan().bold());
-      // Filtering logic here
-    },
-    "Exit" => {
-      println!("{}", "Goodbye!".red().bold());
-      std::process::exit(0);
-    },
-    _ => unreachable!(), // Should never happen
+    file_action_menu(&choice, &files)?;
   }
 
   Ok(())
 }
+
+fn file_action_menu(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
+  loop {
+    match Select::new(
+      &format!("File: {} - Choose an action:", file),
+      vec!["Preview", "Delete", "Back"],
+    )
+    .prompt()?
+    {
+      "Preview" => preview_file(file, snapshots)?,
+      "Delete" => {
+        fs::remove_file(file)?;
+        println!("{}", format!("Deleted file: {}", file).red());
+        break; // exit after deletion
+      },
+      "Back" => break,
+      _ => unreachable!(),
+    }
+  }
+  Ok(())
+}
+
+fn preview_file(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
+  // Find snapshot by path
+  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
+    println!("=== Preview: {} ===", snapshot.name);
+
+    // Instead of raw debug output, reuse your old rendering logic
+    print_snapshots(&vec![snapshot.clone()]);
+    // Or if you had a function like render_snapshot(snapshot), call that:
+    // render_snapshot(snapshot);
+  } else {
+    println!("File '{}' not found in snapshots.", file);
+  }
+
+  Ok(())
+}
+
+fn preview_all_files() -> Result<(), Box<dyn Error>> {
+  let snapshots = snapshot_read::read_snapshots()?;
+  print_snapshots(&snapshots);
+  Ok(())
+}
diff --git a/ttlog-view/src/utils/mod.rs b/ttlog-view/src/utils/mod.rs
index f461578..33b322c 100644
--- a/ttlog-view/src/utils/mod.rs
+++ b/ttlog-view/src/utils/mod.rs
@@ -25,37 +25,113 @@ pub fn format_timestamp(ts_str: &str) -> String {
 }
 
 pub fn print_snapshots(snapshots: &[SnapShot]) {
-  for snap in snapshots {
-    println!(
-      "{} {} {}",
-      "📦".bright_yellow(),
-      snap.name.bright_white().bold(),
-      format!("({})", format_timestamp(&snap.create_at)).dimmed()
-    );
-    println!("    {} {}", "📄".bright_cyan(), snap.path.dimmed());
+  if snapshots.is_empty() {
+    println!("{}", "No snapshots to display.".red());
+    return;
+  }
 
+  // Collect all lines for width calculation
+  let mut all_lines: Vec<String> = Vec::new();
+  for snap in snapshots {
+    all_lines.push(format!(
+      "📦 {} ({})",
+      snap.name,
+      format_timestamp(&snap.create_at)
+    ));
+    all_lines.push(format!("📄 {}", snap.path));
     for event in &snap.data {
-      let icon = match event.level.as_str() {
-        "INFO" => "ℹ️".bright_blue(),
-        "WARN" => "⚠️".bright_yellow(),
-        "ERROR" => "❌".bright_red(),
-        _ => "•".bright_white(),
-      };
-
-      println!(
-        "    {} [{}] {}",
-        icon,
-        event.level.color(match event.level.as_str() {
-          "INFO" => "blue",
-          "WARN" => "yellow",
-          "ERROR" => "red",
-          _ => "white",
-        }),
+      all_lines.push(format!(
+        "{} [{}] {}",
+        icon_for_level(&event.level),
+        event.level,
         event.message
-      );
+      ));
     }
-    println!();
   }
+
+  // Strip ANSI for accurate width measurement
+  let max_width = all_lines
+    .iter()
+    .map(|l| strip_ansi_codes(l).chars().count())
+    .max()
+    .unwrap_or(0);
+
+  // Print each snapshot
+  for snap in snapshots {
+    print_snapshot(snap, max_width);
+  }
+}
+
+fn print_snapshot(snap: &SnapShot, max_width: usize) {
+  // Top border
+  println!(
+    "{}",
+    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
+  );
+
+  // Header
+  let header = format!(
+    "📦 {} ({})",
+    snap.name.bright_white().bold(),
+    format_timestamp(&snap.create_at).dimmed()
+  );
+  println!("{}", bordered_line(&header, max_width - 1));
+
+  let path_line = format!("📄 {}", snap.path.dimmed());
+  println!("{}", bordered_line(&path_line, max_width - 1));
+
+  // Separator
+  println!(
+    "{}",
+    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
+  );
+
+  // Events
+  for event in &snap.data {
+    let icon = icon_for_level(&event.level);
+    let level_colored = match event.level.as_str() {
+      "INFO" => event.level.bright_blue().bold(),
+      "WARN" => event.level.bright_yellow().bold(),
+      "ERROR" => event.level.bright_red().bold(),
+      _ => event.level.bright_white().bold(),
+    };
+
+    let line = format!("{} [{}] {}", icon, level_colored, event.message);
+    println!("{}", bordered_line(&line, max_width));
+  }
+
+  // Bottom border
+  println!(
+    "{}",
+    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
+  );
+  println!();
+}
+
+fn bordered_line(content: &str, max_width: usize) -> String {
+  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
+  format!(
+    "{} {}{} {}",
+    "║".bright_black(),
+    content,
+    " ".repeat(max_width - stripped_len),
+    "║".bright_black()
+  )
+}
+
+fn icon_for_level(level: &str) -> colored::ColoredString {
+  match level {
+    "INFO" => "ℹ️".bright_blue(),
+    "WARN" => "⚠️".bright_yellow(),
+    "ERROR" => "❌".bright_red(),
+    _ => "•".bright_white(),
+  }
+}
+
+/// Remove ANSI color codes for correct length measurement
+fn strip_ansi_codes(s: &str) -> String {
+  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
+  re.replace_all(s, "").to_string()
 }
 
 pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapShot;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(file)?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::event::Event;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapShot {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Vec<Event>,
}

pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapShot> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Vec<Event> = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
      _ => panic!("Expected 4 parts in filename"),
    };

    snapshots.push(SnapShot {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapShot;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapShot]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  // Collect all lines for width calculation
  let mut all_lines: Vec<String> = Vec::new();
  for snap in snapshots {
    all_lines.push(format!(
      "📦 {} ({})",
      snap.name,
      format_timestamp(&snap.create_at)
    ));
    all_lines.push(format!("📄 {}", snap.path));
    for event in &snap.data {
      all_lines.push(format!(
        "{} [{}] {}",
        icon_for_level(&event.level),
        event.level,
        event.message
      ));
    }
  }

  // Strip ANSI for accurate width measurement
  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Print each snapshot
  for snap in snapshots {
    print_snapshot(snap, max_width);
  }
}

fn print_snapshot(snap: &SnapShot, max_width: usize) {
  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width - 1));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width - 1));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };

    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;
use std::{
  panic,
  sync::{Arc, Mutex},
};

use crate::{buffer::RingBuffer, event::Event, trace::Trace};

pub struct PanicHook {}

impl PanicHook {
  /// The install function sets up a custom panic handler for the current Application process
  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
    panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);
      Trace::flush_snapshot(buffer.clone(), "panic");
    }));
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
    self.buffer.clone()
  }

  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
    // Check for the buffer
    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
    if buf.is_empty() {
      return;
    }

    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
    let cbor_buff = match serde_cbor::to_vec(&buf) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to serialize snapshot: {}", e);
        return;
      },
    };

    // NOTE: We can check for more high performance compression
    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to compress snapshot: {}", e);
        return;
      },
    };

    // Build the file Path
    let pid = std::process::id();
    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);

    // Write the file
    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
    } else {
      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: 790fc57318ff0f982f9409aa23c11c848865eb57
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 11:48:36 +0300
Message:
Add complex TTLog example and update main viewer

- Added new example `ttlog-complex` with Cargo setup, README, and test description
- Implemented main logic in `src/main.rs` for the complex example
- Updated `ttlog-view/src/main.rs` to support new functionality


---- DIFF ----
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index b339d7c..dca88ed 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -75,7 +75,7 @@ fn file_action_menu(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn
     {
       "Preview" => preview_file(file, snapshots)?,
       "Delete" => {
-        fs::remove_file(file)?;
+        fs::remove_file(format!("/tmp/{}.bin", file))?;
         println!("{}", format!("Deleted file: {}", file).red());
         break; // exit after deletion
       },

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapShot;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(format!("/tmp/{}.bin", file))?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::event::Event;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapShot {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Vec<Event>,
}

pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapShot> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Vec<Event> = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
      _ => panic!("Expected 4 parts in filename"),
    };

    snapshots.push(SnapShot {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapShot;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapShot]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  // Collect all lines for width calculation
  let mut all_lines: Vec<String> = Vec::new();
  for snap in snapshots {
    all_lines.push(format!(
      "📦 {} ({})",
      snap.name,
      format_timestamp(&snap.create_at)
    ));
    all_lines.push(format!("📄 {}", snap.path));
    for event in &snap.data {
      all_lines.push(format!(
        "{} [{}] {}",
        icon_for_level(&event.level),
        event.level,
        event.message
      ));
    }
  }

  // Strip ANSI for accurate width measurement
  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Print each snapshot
  for snap in snapshots {
    print_snapshot(snap, max_width);
  }
}

fn print_snapshot(snap: &SnapShot, max_width: usize) {
  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width - 1));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width - 1));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };

    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;
use std::{
  panic,
  sync::{Arc, Mutex},
};

use crate::{buffer::RingBuffer, event::Event, trace::Trace};

pub struct PanicHook {}

impl PanicHook {
  /// The install function sets up a custom panic handler for the current Application process
  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
    panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);
      Trace::flush_snapshot(buffer.clone(), "panic");
    }));
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
    self.buffer.clone()
  }

  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
    // Check for the buffer
    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
    if buf.is_empty() {
      return;
    }

    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
    let cbor_buff = match serde_cbor::to_vec(&buf) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to serialize snapshot: {}", e);
        return;
      },
    };

    // NOTE: We can check for more high performance compression
    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to compress snapshot: {}", e);
        return;
      },
    };

    // Build the file Path
    let pid = std::process::id();
    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);

    // Write the file
    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
    } else {
      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: ad487550cf203f97c48f64042669ccc6c30d6b88
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 21:33:43 +0300
Message:
Add docs, examples, and snapshot module; update ttlog-view and examples

- Added new documentation files: docs/docs.md, docs/why.md, notes.md
- Added new example project at exampels/tes
- Added snapshot module in ttlog/src/snapshot/mod.rs
- Updated ttlog-view: Cargo.lock, main.rs, snapshot_read, utils
- Updated existing example projects and main.rs files


---- DIFF ----
diff --git a/ttlog-view/Cargo.lock b/ttlog-view/Cargo.lock
index ba804ea..023c029 100644
--- a/ttlog-view/Cargo.lock
+++ b/ttlog-view/Cargo.lock
@@ -100,6 +100,21 @@ version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
+[[package]]
+name = "crossbeam-channel"
+version = "0.5.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
+dependencies = [
+ "crossbeam-utils",
+]
+
+[[package]]
+name = "crossbeam-utils"
+version = "0.8.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"
+
 [[package]]
 name = "crossterm"
 version = "0.25.0"
@@ -165,6 +180,16 @@ dependencies = [
  "byteorder",
 ]
 
+[[package]]
+name = "gethostname"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
+dependencies = [
+ "rustix",
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "half"
 version = "1.8.3"
@@ -640,6 +665,8 @@ name = "ttlog"
 version = "0.1.0"
 dependencies = [
  "chrono",
+ "crossbeam-channel",
+ "gethostname",
  "lz4",
  "serde",
  "serde_cbor",
diff --git a/ttlog-view/src/main.rs b/ttlog-view/src/main.rs
index dca88ed..056b0fc 100644
--- a/ttlog-view/src/main.rs
+++ b/ttlog-view/src/main.rs
@@ -1,7 +1,7 @@
 mod snapshot_read;
 mod utils;
 
-use crate::snapshot_read::SnapShot;
+use crate::snapshot_read::SnapshotFile;
 use crate::utils::{generate_ascii_art, print_snapshots};
 use colored::*;
 use inquire::Select;
@@ -65,7 +65,7 @@ fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
   Ok(())
 }
 
-fn file_action_menu(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
+fn file_action_menu(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
   loop {
     match Select::new(
       &format!("File: {} - Choose an action:", file),
@@ -86,7 +86,7 @@ fn file_action_menu(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn
   Ok(())
 }
 
-fn preview_file(file: &str, snapshots: &Vec<SnapShot>) -> Result<(), Box<dyn Error>> {
+fn preview_file(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
   // Find snapshot by path
   if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
     println!("=== Preview: {} ===", snapshot.name);
diff --git a/ttlog-view/src/snapshot_read/mod.rs b/ttlog-view/src/snapshot_read/mod.rs
index d6d0071..3b0f59d 100644
--- a/ttlog-view/src/snapshot_read/mod.rs
+++ b/ttlog-view/src/snapshot_read/mod.rs
@@ -1,31 +1,31 @@
 use lz4::block::decompress;
 use serde::{Deserialize, Serialize};
 use std::{error::Error, fs};
-use ttlog::event::Event;
+use ttlog::snapshot::Snapshot;
 
 #[derive(Debug, Clone, Serialize, Deserialize)]
-pub struct SnapShot {
+pub struct SnapshotFile {
   pub name: String,
   pub path: String,
   pub create_at: String,
-  pub data: Vec<Event>,
+  pub data: Snapshot,
 }
 
-pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
+pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
   // Get the snapshots
   let snapshots_dirs = fs::read_dir("/tmp")?
     .filter_map(|e| e.ok())
     .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
     .collect::<Vec<_>>();
 
-  let mut snapshots: Vec<SnapShot> = vec![];
+  let mut snapshots: Vec<SnapshotFile> = vec![];
   for dir in &snapshots_dirs {
     // Read the snapshot dir
     let snapshot_compressed = fs::read(&dir.path())?;
     // Decompress the snapshot
     let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
     // Deserialize the snapshot
-    let snapshot: Vec<Event> = serde_cbor::from_slice(&snapshot_decompressed)?;
+    let snapshot: Snapshot = serde_cbor::from_slice(&snapshot_decompressed)?;
     // Build data
     let path = dir.path().to_string_lossy().to_string();
     let path = path.strip_prefix("/tmp/").unwrap();
@@ -35,7 +35,7 @@ pub fn read_snapshots() -> Result<Vec<SnapShot>, Box<dyn Error>> {
       _ => panic!("Expected 4 parts in filename"),
     };
 
-    snapshots.push(SnapShot {
+    snapshots.push(SnapshotFile {
       name: path.strip_suffix(".bin").unwrap().to_string(),
       path: dir.path().to_string_lossy().to_string(),
       create_at: tsz.to_string(),
diff --git a/ttlog-view/src/utils/mod.rs b/ttlog-view/src/utils/mod.rs
index 33b322c..447393f 100644
--- a/ttlog-view/src/utils/mod.rs
+++ b/ttlog-view/src/utils/mod.rs
@@ -3,7 +3,7 @@ use std::error::Error;
 use colored::*;
 use figlet_rs::FIGfont;
 
-use crate::snapshot_read::SnapShot;
+use crate::snapshot_read::SnapshotFile;
 
 use chrono::{Datelike, NaiveDateTime, Timelike};
 
@@ -24,45 +24,40 @@ pub fn format_timestamp(ts_str: &str) -> String {
   )
 }
 
-pub fn print_snapshots(snapshots: &[SnapShot]) {
+pub fn print_snapshots(snapshots: &[SnapshotFile]) {
   if snapshots.is_empty() {
     println!("{}", "No snapshots to display.".red());
     return;
   }
 
-  // Collect all lines for width calculation
-  let mut all_lines: Vec<String> = Vec::new();
   for snap in snapshots {
+    print_snapshot(snap);
+  }
+}
+fn print_snapshot(snap: &SnapshotFile) {
+  // Calculate max width for borders
+  let mut all_lines: Vec<String> = Vec::new();
+  all_lines.push(format!(
+    "📦 {} ({})",
+    snap.name,
+    format_timestamp(&snap.create_at)
+  ));
+  all_lines.push(format!("📄 {}", snap.path));
+  for event in &snap.data.events {
     all_lines.push(format!(
-      "📦 {} ({})",
-      snap.name,
-      format_timestamp(&snap.create_at)
+      "{} [{}] {}",
+      icon_for_level(&event.level),
+      event.level,
+      event.message
     ));
-    all_lines.push(format!("📄 {}", snap.path));
-    for event in &snap.data {
-      all_lines.push(format!(
-        "{} [{}] {}",
-        icon_for_level(&event.level),
-        event.level,
-        event.message
-      ));
-    }
   }
 
-  // Strip ANSI for accurate width measurement
   let max_width = all_lines
     .iter()
     .map(|l| strip_ansi_codes(l).chars().count())
     .max()
     .unwrap_or(0);
 
-  // Print each snapshot
-  for snap in snapshots {
-    print_snapshot(snap, max_width);
-  }
-}
-
-fn print_snapshot(snap: &SnapShot, max_width: usize) {
   // Top border
   println!(
     "{}",
@@ -75,10 +70,10 @@ fn print_snapshot(snap: &SnapShot, max_width: usize) {
     snap.name.bright_white().bold(),
     format_timestamp(&snap.create_at).dimmed()
   );
-  println!("{}", bordered_line(&header, max_width - 1));
+  println!("{}", bordered_line(&header, max_width));
 
   let path_line = format!("📄 {}", snap.path.dimmed());
-  println!("{}", bordered_line(&path_line, max_width - 1));
+  println!("{}", bordered_line(&path_line, max_width));
 
   // Separator
   println!(
@@ -87,7 +82,7 @@ fn print_snapshot(snap: &SnapShot, max_width: usize) {
   );
 
   // Events
-  for event in &snap.data {
+  for event in &snap.data.events {
     let icon = icon_for_level(&event.level);
     let level_colored = match event.level.as_str() {
       "INFO" => event.level.bright_blue().bold(),
@@ -95,7 +90,6 @@ fn print_snapshot(snap: &SnapShot, max_width: usize) {
       "ERROR" => event.level.bright_red().bold(),
       _ => event.level.bright_white().bold(),
     };
-
     let line = format!("{} [{}] {}", icon, level_colored, event.message);
     println!("{}", bordered_line(&line, max_width));
   }
diff --git a/ttlog/src/snapshot/mod.rs b/ttlog/src/snapshot/mod.rs
new file mode 100644
index 0000000..5b7286c
--- /dev/null
+++ b/ttlog/src/snapshot/mod.rs
@@ -0,0 +1,120 @@
+use chrono::Utc;
+use lz4::block::{compress, CompressionMode};
+use serde::{Deserialize, Serialize};
+use std::fs::{self, File};
+use std::io::Write;
+
+use crate::buffer::RingBuffer;
+use crate::event::Event;
+
+// wrap metadata + events
+#[derive(Serialize, Deserialize, Clone, Debug)]
+pub struct Snapshot {
+  pub service: String,
+  pub hostname: String,
+  pub pid: u32,
+  pub created_at: String,
+  pub reason: String,
+  pub events: Vec<Event>,
+}
+/// Responsible for creating snapshots from a ring buffer and writing them to disk.
+pub struct SnapshotWriter {
+  service: String,
+}
+
+impl SnapshotWriter {
+  /// Creates a new `SnapshotWriter` for a given service name.
+  pub fn new(service: impl Into<String>) -> Self {
+    Self {
+      service: service.into(),
+    }
+  }
+
+  /// Take a snapshot from the ring buffer, capturing metadata and events.
+  ///
+  /// # Parameters
+  /// - `ring`: The ring buffer containing events.
+  /// - `reason`: Reason for taking the snapshot (for logging/audit).
+  ///
+  /// # Returns
+  /// A `Snapshot` struct containing all events and metadata.
+  pub fn create_snapshot(
+    &self,
+    ring: &mut RingBuffer<Event>,
+    reason: impl Into<String>,
+  ) -> Option<Snapshot> {
+    let events = ring.take_snapshot();
+    if events.is_empty() {
+      return None;
+    }
+
+    let hostname = gethostname::gethostname().to_string_lossy().into_owned();
+    let pid = std::process::id();
+    let created_at = Utc::now().format("%Y%m%d%H%M%S").to_string();
+
+    Some(Snapshot {
+      service: self.service.clone(),
+      hostname,
+      pid,
+      created_at,
+      reason: reason.into(),
+      events,
+    })
+  }
+
+  /// Serialize a snapshot to CBOR, compress with LZ4, and write it atomically to disk.
+  ///
+  /// # Parameters
+  /// - `snapshot`: The snapshot to serialize and write.
+  ///
+  /// # Returns
+  /// `Ok(())` if successful, otherwise an error.
+  pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
+    // Serialize CBOR
+    let cbor_buff = serde_cbor::to_vec(&snapshot)?;
+    // Compress
+    let compressed = compress(&cbor_buff, Some(CompressionMode::DEFAULT), true)?;
+
+    // Build filename and write atomically
+    let filename = format!(
+      "/tmp/ttlog-{}-{}-{}.bin",
+      snapshot.pid, snapshot.created_at, snapshot.reason
+    );
+    let tmp = format!("{}.tmp", &filename);
+
+    {
+      let mut f = File::create(&tmp)?;
+      f.write_all(&compressed)?;
+      f.sync_all()?;
+    }
+    fs::rename(&tmp, &filename)?;
+    eprintln!(
+      "[Snapshot] Saved {} events to {}",
+      snapshot.events.len(),
+      filename
+    );
+    Ok(())
+  }
+
+  /// Take a snapshot from the ring buffer, capturing metadata and events.
+  /// If a snapshot is created, write it to disk.
+  ///
+  /// # Parameters
+  /// - `ring`: The ring buffer containing events.
+  /// - `reason`: Reason for taking the snapshot (for logging/audit).
+  ///
+  /// # Returns
+  /// `Ok(())` if successful, otherwise an error.
+  pub fn snapshot_and_write(
+    &self,
+    ring: &mut RingBuffer<Event>,
+    reason: impl Into<String>,
+  ) -> Result<(), Box<dyn std::error::Error>> {
+    if let Some(snapshot) = self.create_snapshot(ring, reason) {
+      self.write_snapshot(&snapshot)
+    } else {
+      println!("[Snapshot] No events to snapshot");
+      Ok(())
+    }
+  }
+}

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "gethostname"
version = "1.0.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
dependencies = [
 "rustix",
 "windows-targets 0.52.6",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapshotFile;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(format!("/tmp/{}.bin", file))?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::snapshot::Snapshot;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapshotFile {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Snapshot,
}

pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapshotFile> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Snapshot = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
      _ => panic!("Expected 4 parts in filename"),
    };

    snapshots.push(SnapshotFile {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapshotFile;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapshotFile]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  for snap in snapshots {
    print_snapshot(snap);
  }
}
fn print_snapshot(snap: &SnapshotFile) {
  // Calculate max width for borders
  let mut all_lines: Vec<String> = Vec::new();
  all_lines.push(format!(
    "📦 {} ({})",
    snap.name,
    format_timestamp(&snap.create_at)
  ));
  all_lines.push(format!("📄 {}", snap.path));
  for event in &snap.data.events {
    all_lines.push(format!(
      "{} [{}] {}",
      icon_for_level(&event.level),
      event.level,
      event.message
    ));
  }

  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data.events {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };
    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamps: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

use std::collections::VecDeque;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  data: VecDeque<T>,
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::Event;

  const JSON: &str = r#"{
        "timestamps": 1755082651423, 
        "level": "1",
        "message": "This is a test for event"
    }"#;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423; // fixed for reproducibility

    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
    let expected =
      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;

    assert_eq!(event, expected);
  }

  #[test]
  fn test_event_deserialization() {
    let event: Event = Event::deserialize(JSON.to_string());

    assert_eq!(event.timestamps, 1755082651423);
    assert_eq!(event.level, 1.to_string());
    assert_eq!(event.message, "This is a test for event");
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamps: u64,
  pub level: String,
  pub message: String,
}

impl Event {
  pub fn new(ts: u64, level: String, message: String) -> Self {
    Self {
      timestamps: ts,
      level,
      message,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;
use std::{
  panic,
  sync::{Arc, Mutex},
};

use crate::{buffer::RingBuffer, event::Event, trace::Trace};

pub struct PanicHook {}

impl PanicHook {
  /// The install function sets up a custom panic handler for the current Application process
  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
    panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);
      Trace::flush_snapshot(buffer.clone(), "panic");
    }));
  }
}

----- FILE: ttlog/src/snapshot/mod.rs -----
use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use serde::{Deserialize, Serialize};
use std::fs::{self, File};
use std::io::Write;

use crate::buffer::RingBuffer;
use crate::event::Event;

// wrap metadata + events
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Snapshot {
  pub service: String,
  pub hostname: String,
  pub pid: u32,
  pub created_at: String,
  pub reason: String,
  pub events: Vec<Event>,
}
/// Responsible for creating snapshots from a ring buffer and writing them to disk.
pub struct SnapshotWriter {
  service: String,
}

impl SnapshotWriter {
  /// Creates a new `SnapshotWriter` for a given service name.
  pub fn new(service: impl Into<String>) -> Self {
    Self {
      service: service.into(),
    }
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// A `Snapshot` struct containing all events and metadata.
  pub fn create_snapshot(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Option<Snapshot> {
    let events = ring.take_snapshot();
    if events.is_empty() {
      return None;
    }

    let hostname = gethostname::gethostname().to_string_lossy().into_owned();
    let pid = std::process::id();
    let created_at = Utc::now().format("%Y%m%d%H%M%S").to_string();

    Some(Snapshot {
      service: self.service.clone(),
      hostname,
      pid,
      created_at,
      reason: reason.into(),
      events,
    })
  }

  /// Serialize a snapshot to CBOR, compress with LZ4, and write it atomically to disk.
  ///
  /// # Parameters
  /// - `snapshot`: The snapshot to serialize and write.
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
    // Serialize CBOR
    let cbor_buff = serde_cbor::to_vec(&snapshot)?;
    // Compress
    let compressed = compress(&cbor_buff, Some(CompressionMode::DEFAULT), true)?;

    // Build filename and write atomically
    let filename = format!(
      "/tmp/ttlog-{}-{}-{}.bin",
      snapshot.pid, snapshot.created_at, snapshot.reason
    );
    let tmp = format!("{}.tmp", &filename);

    {
      let mut f = File::create(&tmp)?;
      f.write_all(&compressed)?;
      f.sync_all()?;
    }
    fs::rename(&tmp, &filename)?;
    eprintln!(
      "[Snapshot] Saved {} events to {}",
      snapshot.events.len(),
      filename
    );
    Ok(())
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  /// If a snapshot is created, write it to disk.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn snapshot_and_write(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Result<(), Box<dyn std::error::Error>> {
    if let Some(snapshot) = self.create_snapshot(ring, reason) {
      self.write_snapshot(&snapshot)
    } else {
      println!("[Snapshot] No events to snapshot");
      Ok(())
    }
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};
use tracing_subscriber::layer::SubscriberExt;
use tracing_subscriber::Registry;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::trace_layer::BufferLayer;

pub struct Trace {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl Trace {
  pub fn init(capacity: usize) -> Self {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::set_global_default(subscriber)
      .expect("Failed to set global tracing subscriber");

    Self { buffer }
  }

  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
    self.buffer.clone()
  }

  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
    // Check for the buffer
    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
    if buf.is_empty() {
      return;
    }

    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
    let cbor_buff = match serde_cbor::to_vec(&buf) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to serialize snapshot: {}", e);
        return;
      },
    };

    // NOTE: We can check for more high performance compression
    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
      Ok(buff) => buff,
      Err(e) => {
        println!("Failed to compress snapshot: {}", e);
        return;
      },
    };

    // Build the file Path
    let pid = std::process::id();
    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);

    // Write the file
    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
    } else {
      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;
use std::sync::{Arc, Mutex};

use crate::{buffer::RingBuffer, event::Event};
use chrono::Utc;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

#[derive(Debug, Clone)]
pub struct BufferLayer {
  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
}

impl BufferLayer {
  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
    Self { buffer }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract message
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());

    let new_event = Event::new(ts, level, message);

    if let Ok(mut buf) = self.buffer.lock() {
      buf.push(new_event);
    }
  }
}

#[derive(Default)]
struct MessageVisitor {
  message: Option<String>,
}

impl tracing::field::Visit for MessageVisitor {
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: 5d1163085f3d392c60830a74d3140d574e2a6c97
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 21:33:59 +0300
Message:
Refactor and improve ttlog core modules

- Updated buffer and event modules, including tests
- Improved trace and trace_layer functionality
- Enhanced panic_hook handling
- Updated Cargo.toml and Cargo.lock
- Minor updates to README.md


---- DIFF ----
diff --git a/ttlog/Cargo.lock b/ttlog/Cargo.lock
index ff343fb..2803092 100644
--- a/ttlog/Cargo.lock
+++ b/ttlog/Cargo.lock
@@ -23,6 +23,12 @@ version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
 
+[[package]]
+name = "bitflags"
+version = "2.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"
+
 [[package]]
 name = "bumpalo"
 version = "3.19.0"
@@ -64,6 +70,41 @@ version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
+[[package]]
+name = "crossbeam-channel"
+version = "0.5.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
+dependencies = [
+ "crossbeam-utils",
+]
+
+[[package]]
+name = "crossbeam-utils"
+version = "0.8.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"
+
+[[package]]
+name = "errno"
+version = "0.3.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
+dependencies = [
+ "libc",
+ "windows-sys",
+]
+
+[[package]]
+name = "gethostname"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
+dependencies = [
+ "rustix",
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "half"
 version = "1.8.3"
@@ -122,6 +163,12 @@ version = "0.2.175"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"
 
+[[package]]
+name = "linux-raw-sys"
+version = "0.9.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"
+
 [[package]]
 name = "log"
 version = "0.4.27"
@@ -208,6 +255,19 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "rustix"
+version = "1.0.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
+dependencies = [
+ "bitflags",
+ "errno",
+ "libc",
+ "linux-raw-sys",
+ "windows-sys",
+]
+
 [[package]]
 name = "rustversion"
 version = "1.0.22"
@@ -365,6 +425,8 @@ name = "ttlog"
 version = "0.1.0"
 dependencies = [
  "chrono",
+ "crossbeam-channel",
+ "gethostname",
  "lz4",
  "serde",
  "serde_cbor",
@@ -530,3 +592,141 @@ checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
 dependencies = [
  "windows-link",
 ]
+
+[[package]]
+name = "windows-sys"
+version = "0.60.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
+dependencies = [
+ "windows-targets 0.53.3",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
+dependencies = [
+ "windows_aarch64_gnullvm 0.52.6",
+ "windows_aarch64_msvc 0.52.6",
+ "windows_i686_gnu 0.52.6",
+ "windows_i686_gnullvm 0.52.6",
+ "windows_i686_msvc 0.52.6",
+ "windows_x86_64_gnu 0.52.6",
+ "windows_x86_64_gnullvm 0.52.6",
+ "windows_x86_64_msvc 0.52.6",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.53.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
+dependencies = [
+ "windows-link",
+ "windows_aarch64_gnullvm 0.53.0",
+ "windows_aarch64_msvc 0.53.0",
+ "windows_i686_gnu 0.53.0",
+ "windows_i686_gnullvm 0.53.0",
+ "windows_i686_msvc 0.53.0",
+ "windows_x86_64_gnu 0.53.0",
+ "windows_x86_64_gnullvm 0.53.0",
+ "windows_x86_64_msvc 0.53.0",
+]
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
diff --git a/ttlog/Cargo.toml b/ttlog/Cargo.toml
index b63ab1a..65f079e 100644
--- a/ttlog/Cargo.toml
+++ b/ttlog/Cargo.toml
@@ -9,7 +9,9 @@ lz4 = "1.28.1"
 serde = { version = "1.0", features = ["derive"] }
 serde_cbor = "0.11.2"
 serde_json = "1.0.142"
+crossbeam-channel = "0.5.15"
 tracing = "0.1.41"
 tracing-subscriber = "0.3.19"
 use = "0.0.1-pre.0"
+gethostname = "1.0.2"
 
diff --git a/ttlog/src/buffer/__test__/mod.rs b/ttlog/src/buffer/__test__/mod.rs
index ac8d7c7..ec58951 100644
--- a/ttlog/src/buffer/__test__/mod.rs
+++ b/ttlog/src/buffer/__test__/mod.rs
@@ -9,7 +9,7 @@ mod tests {
 
     for i in 0..(capacity + 3) {
       buffer.push(Event {
-        timestamps: 1755082651423,
+        timestamp: 1755082651423,
         level: i.to_string(),
         message: format!("Event number {}", i),
       });
diff --git a/ttlog/src/buffer/mod.rs b/ttlog/src/buffer/mod.rs
index b3269d6..ec3b666 100644
--- a/ttlog/src/buffer/mod.rs
+++ b/ttlog/src/buffer/mod.rs
@@ -1,16 +1,35 @@
 mod __test__;
 
 use serde::{Deserialize, Serialize};
-
 use std::collections::VecDeque;
 
+/// A fixed-capacity ring buffer that stores items in insertion order.
+///
+/// When the buffer reaches its capacity, adding a new item
+/// will automatically evict the oldest item.
+///
+/// # Type Parameters
+/// * `T` - The type of the items stored in the buffer. Must implement `Clone`.
 #[derive(Debug, Clone, Serialize, Deserialize)]
 pub struct RingBuffer<T: Clone> {
+  /// Internal storage for the buffer
   data: VecDeque<T>,
+
+  /// Maximum number of items the buffer can hold
   capacity: usize,
 }
 
 impl<T: Clone> RingBuffer<T> {
+  /// Creates a new empty ring buffer with the specified capacity.
+  ///
+  /// # Arguments
+  /// * `capacity` - The maximum number of items the buffer can store.
+  ///
+  /// # Example
+  /// ```
+  /// let buffer: RingBuffer<i32> = RingBuffer::new(10);
+  /// assert_eq!(buffer.len(), 0);
+  /// ```
   pub fn new(capacity: usize) -> Self {
     Self {
       data: VecDeque::with_capacity(capacity),
@@ -18,6 +37,22 @@ impl<T: Clone> RingBuffer<T> {
     }
   }
 
+  /// Adds a new item to the buffer.
+  ///
+  /// If the buffer is already at capacity, the oldest item is removed
+  /// to make space for the new item.
+  ///
+  /// # Arguments
+  /// * `item` - The item to add to the buffer.
+  ///
+  /// # Example
+  /// ```
+  /// let mut buffer = RingBuffer::new(2);
+  /// buffer.push(1);
+  /// buffer.push(2);
+  /// buffer.push(3); // evicts 1
+  /// assert_eq!(buffer.len(), 2);
+  /// ```
   pub fn push(&mut self, item: T) {
     if self.data.len() == self.capacity {
       self.data.pop_front();
@@ -25,7 +60,66 @@ impl<T: Clone> RingBuffer<T> {
     self.data.push_back(item);
   }
 
+  /// Removes and returns all items currently in the buffer.
+  ///
+  /// This operation leaves the buffer empty but preserves its capacity,
+  /// avoiding reallocations on future pushes.
+  ///
+  /// # Returns
+  /// A `Vec<T>` containing all items in insertion order.
+  ///
+  /// # Example
+  /// ```
+  /// let mut buffer = RingBuffer::new(3);
+  /// buffer.push(1);
+  /// buffer.push(2);
+  /// let snapshot = buffer.take_snapshot();
+  /// assert_eq!(snapshot, vec![1, 2]);
+  /// assert!(buffer.is_empty());
+  /// ```
+  pub fn take_snapshot(&mut self) -> Vec<T> {
+    let old = std::mem::replace(&mut self.data, VecDeque::with_capacity(self.capacity));
+    old.into_iter().collect()
+  }
+
+  /// Returns an iterator over the items currently in the buffer.
+  ///
+  /// Items are iterated in insertion order (oldest to newest).
+  ///
+  /// # Example
+  /// ```
+  /// let mut buffer = RingBuffer::new(2);
+  /// buffer.push(10);
+  /// buffer.push(20);
+  /// for item in buffer.iter() {
+  ///     println!("{}", item);
+  /// }
+  /// ```
   pub fn iter(&self) -> impl Iterator<Item = &T> {
     self.data.iter()
   }
+
+  /// Returns the number of items currently in the buffer.
+  ///
+  /// # Example
+  /// ```
+  /// let mut buffer = RingBuffer::new(2);
+  /// assert_eq!(buffer.len(), 0);
+  /// buffer.push(5);
+  /// assert_eq!(buffer.len(), 1);
+  /// ```
+  pub fn len(&self) -> usize {
+    self.data.len()
+  }
+
+  /// Returns `true` if the buffer is empty.
+  ///
+  /// # Example
+  /// ```
+  /// let buffer: RingBuffer<i32> = RingBuffer::new(2);
+  /// assert!(buffer.is_empty());
+  /// ```
+  pub fn is_empty(&self) -> bool {
+    self.data.is_empty()
+  }
 }
diff --git a/ttlog/src/event/__test__/mod.rs b/ttlog/src/event/__test__/mod.rs
index 840765e..847e466 100644
--- a/ttlog/src/event/__test__/mod.rs
+++ b/ttlog/src/event/__test__/mod.rs
@@ -1,30 +1,64 @@
 #[cfg(test)]
 mod tests {
-  use crate::event::Event;
+  use crate::event::{Event, Level};
 
-  const JSON: &str = r#"{
-        "timestamps": 1755082651423, 
-        "level": "1",
-        "message": "This is a test for event"
-    }"#;
+  use std::collections::HashMap;
 
   #[test]
   fn test_event_serialization() {
-    let ts = 1755082651423; // fixed for reproducibility
+    let ts = 1755082651423;
+    let mut fields = HashMap::new();
+    fields.insert("key".to_string(), serde_json::json!("value"));
 
-    let event = Event::new(ts, 1.to_string(), String::from("This is a test for event")).serialize();
-    let expected =
-      r#"{"timestamps":1755082651423,"level":"1","message":"This is a test for event"}"#;
+    let event = Event::new(
+      ts,
+      Level::Info,
+      "This is a test for event".to_string(),
+      "my_target".to_string(),
+      Some(42),
+      fields.clone(),
+      Some(1),
+      Some("my_service".to_string()),
+    );
 
-    assert_eq!(event, expected);
+    let serialized = event.serialize();
+
+    let expected_json = serde_json::json!({
+        "timestamp": ts,
+        "level": "Info",
+        "message": "This is a test for event",
+        "target": "my_target",
+        "span_id": 42,
+        "fields": fields,
+        "thread_id": 1,
+        "service_name": "my_service"
+    })
+    .to_string();
+
+    assert_eq!(serialized, expected_json);
   }
 
   #[test]
   fn test_event_deserialization() {
-    let event: Event = Event::deserialize(JSON.to_string());
+    let json = r#"{
+            "timestamp": 1755082651423,
+            "level": "Info",
+            "message": "This is a test for event",
+            "target": "my_target",
+            "span_id": 42,
+            "fields": {"key": "value"},
+            "thread_id": 1,
+            "service_name": "my_service"
+        }"#;
+
+    let event: Event = Event::deserialize(json.to_string());
 
-    assert_eq!(event.timestamps, 1755082651423);
-    assert_eq!(event.level, 1.to_string());
+    assert_eq!(event.timestamp, 1755082651423);
     assert_eq!(event.message, "This is a test for event");
+    assert_eq!(event.target, "my_target");
+    assert_eq!(event.span_id, Some(42));
+    assert_eq!(event.fields.get("key").unwrap(), "value");
+    assert_eq!(event.thread_id, Some(1));
+    assert_eq!(event.service_name.as_deref(), Some("my_service"));
   }
 }
diff --git a/ttlog/src/event/mod.rs b/ttlog/src/event/mod.rs
index 6fc1b56..373362f 100644
--- a/ttlog/src/event/mod.rs
+++ b/ttlog/src/event/mod.rs
@@ -1,19 +1,31 @@
 mod __test__;
+
 use serde::{Deserialize, Serialize};
 
+#[derive(Debug, Clone, Serialize, Deserialize)]
+pub enum Level {
+  Trace,
+  Debug,
+  Info,
+  Warn,
+  Error,
+}
+
 #[derive(Debug, Clone, Serialize, Deserialize)]
 pub struct Event {
-  pub timestamps: u64,
+  pub timestamp: u64,
   pub level: String,
   pub message: String,
+  pub target: String,
 }
 
 impl Event {
-  pub fn new(ts: u64, level: String, message: String) -> Self {
+  pub fn new(timestamp: u64, level: String, message: String, target: String) -> Self {
     Self {
-      timestamps: ts,
+      timestamp,
       level,
       message,
+      target,
     }
   }
 
@@ -25,3 +37,14 @@ impl Event {
     serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
   }
 }
+
+impl Default for Event {
+  fn default() -> Self {
+    Self {
+      timestamp: 0,
+      level: "".to_string(), // Level::Info,
+      message: String::new(),
+      target: String::new(),
+    }
+  }
+}
diff --git a/ttlog/src/lib.rs b/ttlog/src/lib.rs
index 51ca804..719f4a2 100644
--- a/ttlog/src/lib.rs
+++ b/ttlog/src/lib.rs
@@ -1,5 +1,6 @@
 pub mod buffer;
 pub mod event;
 pub mod panic_hook;
+pub mod snapshot;
 pub mod trace;
 pub mod trace_layer;
diff --git a/ttlog/src/panic_hook/mod.rs b/ttlog/src/panic_hook/mod.rs
index 556a8d4..d486149 100644
--- a/ttlog/src/panic_hook/mod.rs
+++ b/ttlog/src/panic_hook/mod.rs
@@ -1,19 +1,68 @@
-mod __test__;
-use std::{
-  panic,
-  sync::{Arc, Mutex},
-};
+use std::thread;
 
-use crate::{buffer::RingBuffer, event::Event, trace::Trace};
+use crate::trace::Message;
+use chrono::Duration;
+use crossbeam_channel::Sender;
 
+/// `
+/// PanicHook` is a utility for installing a custom panic hook in Rust programs.
+///
+/// When a panic occurs, this hook captures the panic information and requests
+/// an immediate snapshot to be sent via a `crossbeam_channel::Sender<Message>`.
+/// This is useful in tracing or logging systems to capture the state of the
+/// application at the moment of a panic.
+///
+/// # Example
+///
+/// ```rust
+/// use crossbeam_channel::unbounded;
+/// use crate::trace::Message;
+/// use crate::PanicHook;
+///
+/// let (sender, receiver) = unbounded();
+///
+/// // Install the panic hook
+/// PanicHook::install(sender.clone());
+///
+/// // Trigger a panic to test
+/// std::panic::panic_any("something went wrong");
+/// ```
+///
+/// The hook will attempt to send a `Message::SnapshotImmediate` containing
+/// the reason `"panic"` without blocking.
 pub struct PanicHook {}
 
 impl PanicHook {
-  /// The install function sets up a custom panic handler for the current Application process
-  pub fn install(buffer: Arc<Mutex<RingBuffer<Event>>>) {
-    panic::set_hook(Box::new(move |info| {
+  /// Installs a panic hook that requests an immediate snapshot when a panic occurs.
+  ///
+  /// # Parameters
+  ///
+  /// - `sender`: A `crossbeam_channel::Sender<Message>` used to request the snapshot.
+  ///   The hook will use `try_send` to avoid blocking the panic unwinding process.
+  ///
+  /// # Behavior
+  ///
+  /// When a panic occurs:
+  /// 1. The panic information (`std::panic::PanicInfo`) is printed to stderr.
+  /// 2. A `Message::SnapshotImmediate("panic")` is sent through the provided sender.
+  ///    If sending fails (e.g., channel is full or closed), the error is ignored.
+  pub fn install(sender: Sender<Message>) {
+    std::panic::set_hook(Box::new(move |info| {
       eprintln!("[Panic] Captured panic: {:?}", info);
-      Trace::flush_snapshot(buffer.clone(), "panic");
+
+      // Send snapshot request
+      if let Err(e) = sender.try_send(Message::SnapshotImmediate("panic".to_string())) {
+        eprintln!("[Panic] Failed to send snapshot request: {:?}", e);
+        return;
+      }
+
+      eprintln!("[Panic] Snapshot request sent, waiting for completion...");
+
+      // Give the writer thread time to process the snapshot
+      // This is a blocking operation, but we're in a panic handler
+      thread::sleep(Duration::milliseconds(100).to_std().unwrap());
+
+      eprintln!("[Panic] Panic hook completed");
     }));
   }
 }
diff --git a/ttlog/src/trace/mod.rs b/ttlog/src/trace/mod.rs
index e1c3eb6..5ddc672 100644
--- a/ttlog/src/trace/mod.rs
+++ b/ttlog/src/trace/mod.rs
@@ -1,72 +1,149 @@
 mod __test__;
 
-use chrono::Utc;
-use lz4::block::{compress, CompressionMode};
-use std::fs::File;
-use std::io::Write;
-use std::sync::{Arc, Mutex};
+use chrono::Duration;
+use std::thread;
+use std::time::Instant;
 use tracing_subscriber::layer::SubscriberExt;
-use tracing_subscriber::Registry;
 
 use crate::buffer::RingBuffer;
 use crate::event::Event;
+use crate::snapshot::SnapshotWriter;
 use crate::trace_layer::BufferLayer;
 
+use crossbeam_channel::{bounded, Receiver, Sender};
+
 pub struct Trace {
-  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
+  sender: Sender<Message>,
+}
+
+#[derive(Debug)]
+pub enum Message {
+  Event(Event),
+  SnapshotImmediate(String), // reason
+  FlushAndExit,              // optional: for graceful shutdown in tests
 }
 
 impl Trace {
-  pub fn init(capacity: usize) -> Self {
-    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
-    let layer = BufferLayer::new(buffer.clone());
+  /// Initializes the tracing/logging system with a bounded channel and a writer thread.
+  ///
+  /// # Parameters
+  /// - `capacity`: The maximum number of messages the ring buffer can hold.
+  /// - `channel_capacity`: The maximum number of messages the channel can buffer before blocking.
+  ///
+  /// # Behavior
+  /// - Spawns a dedicated writer thread that reads messages from the channel and writes them into the ring buffer.
+  /// - Creates a `BufferLayer` that intercepts tracing events and sends them to the channel.
+  /// - Registers the `BufferLayer` with the global tracing subscriber. If a subscriber is already set, the error is ignored.
+  ///
+  /// # Returns
+  /// Returns an instance containing the sender, which can be used to send messages to the buffer asynchronously.
+  ///
+  /// # Example
+  /// ```rust
+  /// let trace_system = Trace::init(1024, 128);
+  /// trace_system.sender.send(Message::new("test")).unwrap();
+  /// ```
+  pub fn init(capacity: usize, channel_capacity: usize) -> Self {
+    let (sender, receiver) = bounded::<Message>(channel_capacity);
 
-    let subscriber = Registry::default().with(layer);
-    tracing::subscriber::set_global_default(subscriber)
-      .expect("Failed to set global tracing subscriber");
+    // Spawn writer thread which owns the ring buffer
+    thread::spawn(move || Trace::writer_loop(receiver, capacity));
 
-    Self { buffer }
+    // Create and register BufferLayer using the sender
+    let layer = BufferLayer::new(sender.clone());
+    let subscriber = tracing_subscriber::Registry::default().with(layer);
+    let _ = tracing::subscriber::set_global_default(subscriber); // ignore error if already set
+
+    Self { sender }
   }
 
-  pub fn get_buffer(&self) -> Arc<Mutex<RingBuffer<Event>>> {
-    self.buffer.clone()
+  /// Returns a clone of the sender used to send messages into the tracing buffer.
+  ///
+  /// This allows other threads or components to asynchronously send `Message`s
+  /// (events or snapshot requests) to the writer thread.
+  ///
+  /// # Example
+  /// ```rust
+  /// let sender = trace_system.get_sender();
+  /// sender.send(Message::Event(my_event)).unwrap();
+  /// ```
+  pub fn get_sender(&self) -> Sender<Message> {
+    self.sender.clone()
   }
 
-  pub fn flush_snapshot(buffer: Arc<Mutex<RingBuffer<Event>>>, reason: &str) {
-    // Check for the buffer
-    let buf = buffer.lock().unwrap().iter().cloned().collect::<Vec<_>>();
-    if buf.is_empty() {
-      return;
-    }
+  /// Requests an immediate snapshot of the current ring buffer.
+  ///
+  /// Sends a `SnapshotImmediate` message into the channel. The `reason` is included
+  /// in the snapshot metadata for logging or debugging purposes.
+  ///
+  /// If the channel is full, the request is ignored.
+  ///
+  /// # Parameters
+  /// - `reason`: A string describing why the snapshot was requested.
+  ///
+  /// # Example
+  /// ```rust
+  /// trace_system.request_snapshot("manual_debug_snapshot");
+  /// ```
+  pub fn request_snapshot(&self, reason: &str) {
+    let _ = self
+      .sender
+      .try_send(Message::SnapshotImmediate(reason.to_string()));
+  }
 
-    // Serialize the Buffer to Concise Binary Object Representation ( CBOR )
-    let cbor_buff = match serde_cbor::to_vec(&buf) {
-      Ok(buff) => buff,
-      Err(e) => {
-        println!("Failed to serialize snapshot: {}", e);
-        return;
-      },
-    };
+  /// The main writer loop that runs on a dedicated thread.
+  ///
+  /// This function continuously receives messages from the channel and:
+  /// - Stores events in a ring buffer.
+  /// - Writes immediate snapshots when requested.
+  /// - Flushes and exits when requested.
+  /// - Performs periodic flushes every 60 seconds.
+  ///
+  /// # Parameters
+  /// - `receiver`: The channel receiver used to receive messages from other threads.
+  /// - `capacity`: The size of the ring buffer to store incoming events.
+  ///
+  /// # Notes
+  /// - This function is intended to run on a separate thread.
+  /// - Snapshots are written using `snapshot_and_write`.
+  fn writer_loop(receiver: Receiver<Message>, capacity: usize) {
+    let mut ring = RingBuffer::new(capacity);
+    let mut last_periodic = Instant::now();
+    // you can set a periodic flush interval
+    let periodic_flush_interval = Duration::seconds(60).to_std().unwrap();
 
-    // NOTE: We can check for more high performance compression
-    let compressed_buff = match compress(&cbor_buff, Some(CompressionMode::DEFAULT), true) {
-      Ok(buff) => buff,
-      Err(e) => {
-        println!("Failed to compress snapshot: {}", e);
-        return;
-      },
-    };
+    let service = SnapshotWriter::new("ttlog");
 
-    // Build the file Path
-    let pid = std::process::id();
-    let timestamps = Utc::now().format("%Y%m%d%H%M%S");
-    let filename = format!("/tmp/ttlog-{}-{}-{}.bin", pid, timestamps, reason);
+    while let Ok(msg) = receiver.recv() {
+      match msg {
+        Message::Event(ev) => {
+          ring.push(ev);
+        },
+        Message::SnapshotImmediate(reason) => {
+          if !ring.is_empty() {
+            if let Err(e) = service.snapshot_and_write(&mut ring, reason) {
+              eprintln!("[Snapshot] failed: {}", e);
+            }
+          } else {
+            eprintln!(
+              "[Snapshot] buffer empty, skipping snapshot (reason={})",
+              reason
+            );
+          }
+        },
+        Message::FlushAndExit => {
+          if !ring.is_empty() {
+            let _ = service.snapshot_and_write(&mut ring, "flush_and_exit".to_string());
+          }
+          break;
+        },
+      }
 
-    // Write the file
-    if let Err(e) = File::create(&filename).and_then(|mut f| f.write_all(&compressed_buff)) {
-      eprintln!("[Snapshot] Failed to write file {}: {}", filename, e);
-    } else {
-      eprintln!("[Snapshot] Saved {} events to {}", buf.len(), filename);
+      // periodic flush
+      if last_periodic.elapsed() >= periodic_flush_interval && !ring.is_empty() {
+        let _ = service.snapshot_and_write(&mut ring, "periodic".to_string());
+        last_periodic = Instant::now();
+      }
     }
   }
 }
diff --git a/ttlog/src/trace_layer/mod.rs b/ttlog/src/trace_layer/mod.rs
index bcc6796..0099842 100644
--- a/ttlog/src/trace_layer/mod.rs
+++ b/ttlog/src/trace_layer/mod.rs
@@ -1,19 +1,34 @@
-mod __test__;
-use std::sync::{Arc, Mutex};
-
-use crate::{buffer::RingBuffer, event::Event};
+use crate::{event::Event, trace::Message};
 use chrono::Utc;
+use crossbeam_channel::{Sender, TrySendError};
+use tracing::field::Visit;
 use tracing::{field::Field, Event as TracingEvent, Subscriber};
 use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};
 
+/// `BufferLayer` is a `tracing` layer that captures tracing events and
+/// forwards them to a channel for asynchronous processing.
+///
+/// This layer converts a `tracing::Event` into a minimal `Event` struct
+/// containing only the timestamp, log level, and message, and sends it
+/// to a `crossbeam_channel::Sender<Message>`.
+///
+/// # Design
+/// - Non-blocking: uses `try_send` to avoid slowing down the tracing hot path.
+/// - Drops events if the channel is full to prevent blocking.
+/// - Handles disconnected channels gracefully.
 #[derive(Debug, Clone)]
 pub struct BufferLayer {
-  pub buffer: Arc<Mutex<RingBuffer<Event>>>,
+  /// Channel sender used to forward captured events.
+  sender: Sender<Message>,
 }
 
 impl BufferLayer {
-  pub fn new(buffer: Arc<Mutex<RingBuffer<Event>>>) -> Self {
-    Self { buffer }
+  /// Creates a new `BufferLayer` that will send events to the given channel.
+  ///
+  /// # Parameters
+  /// - `sender`: A `crossbeam_channel::Sender<Message>` to forward captured events.
+  pub fn new(sender: Sender<Message>) -> Self {
+    Self { sender }
   }
 }
 
@@ -21,33 +36,78 @@ impl<T> Layer<T> for BufferLayer
 where
   T: Subscriber + for<'a> LookupSpan<'a>,
 {
+  /// Called for every tracing event.
+  ///
+  /// Converts the event into a minimal `Event` (timestamp + level + message)
+  /// and attempts to send it through the channel. Drops the event if the
+  /// channel is full, or logs an error if the channel is disconnected.
+  ///
+  /// # Parameters
+  /// - `event`: The `tracing::Event` being recorded.
+  /// - `_ctx`: The subscriber context (unused in this implementation).
   fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
+    // Capture timestamp and level
     let ts = Utc::now().timestamp_millis() as u64;
     let level = event.metadata().level().to_string();
 
-    // Extract message
+    // Extract the message field using a visitor
     let mut visitor = MessageVisitor::default();
     event.record(&mut visitor);
     let message = visitor.message.unwrap_or_else(|| "".to_string());
+    let target = event.metadata().target().to_string();
 
-    let new_event = Event::new(ts, level, message);
+    // Build a minimal Event
+    let new_event = Event::new(ts, level, message, target);
 
-    if let Ok(mut buf) = self.buffer.lock() {
-      buf.push(new_event);
+    // Attempt non-blocking send; drop if channel full
+    match self.sender.try_send(Message::Event(new_event)) {
+      Ok(_) => {},
+      Err(err) => match err {
+        TrySendError::Full(_) => {
+          // Optional: increment a dropped-events counter here
+        },
+        TrySendError::Disconnected(_) => {
+          // Writer thread died; log error
+          eprintln!("[BufferLayer] writer thread disconnected");
+        },
+      },
     }
   }
 }
 
+/// `MessageVisitor` is a helper struct used to extract a string message
+/// from structured tracing fields.
+///
+/// This is typically used when subscribing to tracing events and you want
+/// to capture a specific field (like a message) from the event in a uniform way.
 #[derive(Default)]
 struct MessageVisitor {
-  message: Option<String>,
+  /// Stores the captured message from the tracing field.
+  pub message: Option<String>,
 }
 
-impl tracing::field::Visit for MessageVisitor {
+impl Visit for MessageVisitor {
+  /// Records a string field from a tracing event.
+  ///
+  /// # Parameters
+  /// - `_field`: The `Field` metadata (ignored in this implementation).
+  /// - `value`: The string value to record.
+  ///
+  /// # Behavior
+  /// Stores the string value in the `message` field, replacing any previous value.
   fn record_str(&mut self, _field: &Field, value: &str) {
     self.message = Some(value.to_string());
   }
 
+  /// Records a field that implements the `Debug` trait.
+  ///
+  /// # Parameters
+  /// - `_field`: The `Field` metadata (ignored in this implementation).
+  /// - `value`: The value to record, formatted using `Debug`.
+  ///
+  /// # Behavior
+  /// Converts the value to a string using `format!("{:?}", value)` and stores it
+  /// in the `message` field, replacing any previous value.
   fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
     self.message = Some(format!("{:?}", value));
   }

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "gethostname"
version = "1.0.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
dependencies = [
 "rustix",
 "windows-targets 0.52.6",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapshotFile;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(format!("/tmp/{}.bin", file))?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::snapshot::Snapshot;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapshotFile {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Snapshot,
}

pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapshotFile> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Snapshot = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
      _ => panic!("Expected 4 parts in filename"),
    };

    snapshots.push(SnapshotFile {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapshotFile;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapshotFile]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  for snap in snapshots {
    print_snapshot(snap);
  }
}
fn print_snapshot(snap: &SnapshotFile) {
  // Calculate max width for borders
  let mut all_lines: Vec<String> = Vec::new();
  all_lines.push(format!(
    "📦 {} ({})",
    snap.name,
    format_timestamp(&snap.create_at)
  ));
  all_lines.push(format!("📄 {}", snap.path));
  for event in &snap.data.events {
    all_lines.push(format!(
      "{} [{}] {}",
      icon_for_level(&event.level),
      event.level,
      event.message
    ));
  }

  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data.events {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };
    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys",
]

[[package]]
name = "gethostname"
version = "1.0.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
dependencies = [
 "rustix",
 "windows-targets 0.52.6",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
crossbeam-channel = "0.5.15"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"
gethostname = "1.0.2"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamp: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};
use std::collections::VecDeque;

/// A fixed-capacity ring buffer that stores items in insertion order.
///
/// When the buffer reaches its capacity, adding a new item
/// will automatically evict the oldest item.
///
/// # Type Parameters
/// * `T` - The type of the items stored in the buffer. Must implement `Clone`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  /// Internal storage for the buffer
  data: VecDeque<T>,

  /// Maximum number of items the buffer can hold
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  /// Creates a new empty ring buffer with the specified capacity.
  ///
  /// # Arguments
  /// * `capacity` - The maximum number of items the buffer can store.
  ///
  /// # Example
  /// ```
  /// let buffer: RingBuffer<i32> = RingBuffer::new(10);
  /// assert_eq!(buffer.len(), 0);
  /// ```
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  /// Adds a new item to the buffer.
  ///
  /// If the buffer is already at capacity, the oldest item is removed
  /// to make space for the new item.
  ///
  /// # Arguments
  /// * `item` - The item to add to the buffer.
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(1);
  /// buffer.push(2);
  /// buffer.push(3); // evicts 1
  /// assert_eq!(buffer.len(), 2);
  /// ```
  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  /// Removes and returns all items currently in the buffer.
  ///
  /// This operation leaves the buffer empty but preserves its capacity,
  /// avoiding reallocations on future pushes.
  ///
  /// # Returns
  /// A `Vec<T>` containing all items in insertion order.
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(3);
  /// buffer.push(1);
  /// buffer.push(2);
  /// let snapshot = buffer.take_snapshot();
  /// assert_eq!(snapshot, vec![1, 2]);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn take_snapshot(&mut self) -> Vec<T> {
    let old = std::mem::replace(&mut self.data, VecDeque::with_capacity(self.capacity));
    old.into_iter().collect()
  }

  /// Returns an iterator over the items currently in the buffer.
  ///
  /// Items are iterated in insertion order (oldest to newest).
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(10);
  /// buffer.push(20);
  /// for item in buffer.iter() {
  ///     println!("{}", item);
  /// }
  /// ```
  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }

  /// Returns the number of items currently in the buffer.
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(2);
  /// assert_eq!(buffer.len(), 0);
  /// buffer.push(5);
  /// assert_eq!(buffer.len(), 1);
  /// ```
  pub fn len(&self) -> usize {
    self.data.len()
  }

  /// Returns `true` if the buffer is empty.
  ///
  /// # Example
  /// ```
  /// let buffer: RingBuffer<i32> = RingBuffer::new(2);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn is_empty(&self) -> bool {
    self.data.is_empty()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::{Event, Level};

  use std::collections::HashMap;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423;
    let mut fields = HashMap::new();
    fields.insert("key".to_string(), serde_json::json!("value"));

    let event = Event::new(
      ts,
      Level::Info,
      "This is a test for event".to_string(),
      "my_target".to_string(),
      Some(42),
      fields.clone(),
      Some(1),
      Some("my_service".to_string()),
    );

    let serialized = event.serialize();

    let expected_json = serde_json::json!({
        "timestamp": ts,
        "level": "Info",
        "message": "This is a test for event",
        "target": "my_target",
        "span_id": 42,
        "fields": fields,
        "thread_id": 1,
        "service_name": "my_service"
    })
    .to_string();

    assert_eq!(serialized, expected_json);
  }

  #[test]
  fn test_event_deserialization() {
    let json = r#"{
            "timestamp": 1755082651423,
            "level": "Info",
            "message": "This is a test for event",
            "target": "my_target",
            "span_id": 42,
            "fields": {"key": "value"},
            "thread_id": 1,
            "service_name": "my_service"
        }"#;

    let event: Event = Event::deserialize(json.to_string());

    assert_eq!(event.timestamp, 1755082651423);
    assert_eq!(event.message, "This is a test for event");
    assert_eq!(event.target, "my_target");
    assert_eq!(event.span_id, Some(42));
    assert_eq!(event.fields.get("key").unwrap(), "value");
    assert_eq!(event.thread_id, Some(1));
    assert_eq!(event.service_name.as_deref(), Some("my_service"));
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Level {
  Trace,
  Debug,
  Info,
  Warn,
  Error,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamp: u64,
  pub level: String,
  pub message: String,
  pub target: String,
}

impl Event {
  pub fn new(timestamp: u64, level: String, message: String, target: String) -> Self {
    Self {
      timestamp,
      level,
      message,
      target,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

impl Default for Event {
  fn default() -> Self {
    Self {
      timestamp: 0,
      level: "".to_string(), // Level::Info,
      message: String::new(),
      target: String::new(),
    }
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod snapshot;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
use std::thread;

use crate::trace::Message;
use chrono::Duration;
use crossbeam_channel::Sender;

/// `
/// PanicHook` is a utility for installing a custom panic hook in Rust programs.
///
/// When a panic occurs, this hook captures the panic information and requests
/// an immediate snapshot to be sent via a `crossbeam_channel::Sender<Message>`.
/// This is useful in tracing or logging systems to capture the state of the
/// application at the moment of a panic.
///
/// # Example
///
/// ```rust
/// use crossbeam_channel::unbounded;
/// use crate::trace::Message;
/// use crate::PanicHook;
///
/// let (sender, receiver) = unbounded();
///
/// // Install the panic hook
/// PanicHook::install(sender.clone());
///
/// // Trigger a panic to test
/// std::panic::panic_any("something went wrong");
/// ```
///
/// The hook will attempt to send a `Message::SnapshotImmediate` containing
/// the reason `"panic"` without blocking.
pub struct PanicHook {}

impl PanicHook {
  /// Installs a panic hook that requests an immediate snapshot when a panic occurs.
  ///
  /// # Parameters
  ///
  /// - `sender`: A `crossbeam_channel::Sender<Message>` used to request the snapshot.
  ///   The hook will use `try_send` to avoid blocking the panic unwinding process.
  ///
  /// # Behavior
  ///
  /// When a panic occurs:
  /// 1. The panic information (`std::panic::PanicInfo`) is printed to stderr.
  /// 2. A `Message::SnapshotImmediate("panic")` is sent through the provided sender.
  ///    If sending fails (e.g., channel is full or closed), the error is ignored.
  pub fn install(sender: Sender<Message>) {
    std::panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);

      // Send snapshot request
      if let Err(e) = sender.try_send(Message::SnapshotImmediate("panic".to_string())) {
        eprintln!("[Panic] Failed to send snapshot request: {:?}", e);
        return;
      }

      eprintln!("[Panic] Snapshot request sent, waiting for completion...");

      // Give the writer thread time to process the snapshot
      // This is a blocking operation, but we're in a panic handler
      thread::sleep(Duration::milliseconds(100).to_std().unwrap());

      eprintln!("[Panic] Panic hook completed");
    }));
  }
}

----- FILE: ttlog/src/snapshot/mod.rs -----
use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use serde::{Deserialize, Serialize};
use std::fs::{self, File};
use std::io::Write;

use crate::buffer::RingBuffer;
use crate::event::Event;

// wrap metadata + events
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Snapshot {
  pub service: String,
  pub hostname: String,
  pub pid: u32,
  pub created_at: String,
  pub reason: String,
  pub events: Vec<Event>,
}
/// Responsible for creating snapshots from a ring buffer and writing them to disk.
pub struct SnapshotWriter {
  service: String,
}

impl SnapshotWriter {
  /// Creates a new `SnapshotWriter` for a given service name.
  pub fn new(service: impl Into<String>) -> Self {
    Self {
      service: service.into(),
    }
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// A `Snapshot` struct containing all events and metadata.
  pub fn create_snapshot(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Option<Snapshot> {
    let events = ring.take_snapshot();
    if events.is_empty() {
      return None;
    }

    let hostname = gethostname::gethostname().to_string_lossy().into_owned();
    let pid = std::process::id();
    let created_at = Utc::now().format("%Y%m%d%H%M%S").to_string();

    Some(Snapshot {
      service: self.service.clone(),
      hostname,
      pid,
      created_at,
      reason: reason.into(),
      events,
    })
  }

  /// Serialize a snapshot to CBOR, compress with LZ4, and write it atomically to disk.
  ///
  /// # Parameters
  /// - `snapshot`: The snapshot to serialize and write.
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
    // Serialize CBOR
    let cbor_buff = serde_cbor::to_vec(&snapshot)?;
    // Compress
    let compressed = compress(&cbor_buff, Some(CompressionMode::DEFAULT), true)?;

    // Build filename and write atomically
    let filename = format!(
      "/tmp/ttlog-{}-{}-{}.bin",
      snapshot.pid, snapshot.created_at, snapshot.reason
    );
    let tmp = format!("{}.tmp", &filename);

    {
      let mut f = File::create(&tmp)?;
      f.write_all(&compressed)?;
      f.sync_all()?;
    }
    fs::rename(&tmp, &filename)?;
    eprintln!(
      "[Snapshot] Saved {} events to {}",
      snapshot.events.len(),
      filename
    );
    Ok(())
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  /// If a snapshot is created, write it to disk.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn snapshot_and_write(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Result<(), Box<dyn std::error::Error>> {
    if let Some(snapshot) = self.create_snapshot(ring, reason) {
      self.write_snapshot(&snapshot)
    } else {
      println!("[Snapshot] No events to snapshot");
      Ok(())
    }
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Duration;
use std::thread;
use std::time::Instant;
use tracing_subscriber::layer::SubscriberExt;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::snapshot::SnapshotWriter;
use crate::trace_layer::BufferLayer;

use crossbeam_channel::{bounded, Receiver, Sender};

pub struct Trace {
  sender: Sender<Message>,
}

#[derive(Debug)]
pub enum Message {
  Event(Event),
  SnapshotImmediate(String), // reason
  FlushAndExit,              // optional: for graceful shutdown in tests
}

impl Trace {
  /// Initializes the tracing/logging system with a bounded channel and a writer thread.
  ///
  /// # Parameters
  /// - `capacity`: The maximum number of messages the ring buffer can hold.
  /// - `channel_capacity`: The maximum number of messages the channel can buffer before blocking.
  ///
  /// # Behavior
  /// - Spawns a dedicated writer thread that reads messages from the channel and writes them into the ring buffer.
  /// - Creates a `BufferLayer` that intercepts tracing events and sends them to the channel.
  /// - Registers the `BufferLayer` with the global tracing subscriber. If a subscriber is already set, the error is ignored.
  ///
  /// # Returns
  /// Returns an instance containing the sender, which can be used to send messages to the buffer asynchronously.
  ///
  /// # Example
  /// ```rust
  /// let trace_system = Trace::init(1024, 128);
  /// trace_system.sender.send(Message::new("test")).unwrap();
  /// ```
  pub fn init(capacity: usize, channel_capacity: usize) -> Self {
    let (sender, receiver) = bounded::<Message>(channel_capacity);

    // Spawn writer thread which owns the ring buffer
    thread::spawn(move || Trace::writer_loop(receiver, capacity));

    // Create and register BufferLayer using the sender
    let layer = BufferLayer::new(sender.clone());
    let subscriber = tracing_subscriber::Registry::default().with(layer);
    let _ = tracing::subscriber::set_global_default(subscriber); // ignore error if already set

    Self { sender }
  }

  /// Returns a clone of the sender used to send messages into the tracing buffer.
  ///
  /// This allows other threads or components to asynchronously send `Message`s
  /// (events or snapshot requests) to the writer thread.
  ///
  /// # Example
  /// ```rust
  /// let sender = trace_system.get_sender();
  /// sender.send(Message::Event(my_event)).unwrap();
  /// ```
  pub fn get_sender(&self) -> Sender<Message> {
    self.sender.clone()
  }

  /// Requests an immediate snapshot of the current ring buffer.
  ///
  /// Sends a `SnapshotImmediate` message into the channel. The `reason` is included
  /// in the snapshot metadata for logging or debugging purposes.
  ///
  /// If the channel is full, the request is ignored.
  ///
  /// # Parameters
  /// - `reason`: A string describing why the snapshot was requested.
  ///
  /// # Example
  /// ```rust
  /// trace_system.request_snapshot("manual_debug_snapshot");
  /// ```
  pub fn request_snapshot(&self, reason: &str) {
    let _ = self
      .sender
      .try_send(Message::SnapshotImmediate(reason.to_string()));
  }

  /// The main writer loop that runs on a dedicated thread.
  ///
  /// This function continuously receives messages from the channel and:
  /// - Stores events in a ring buffer.
  /// - Writes immediate snapshots when requested.
  /// - Flushes and exits when requested.
  /// - Performs periodic flushes every 60 seconds.
  ///
  /// # Parameters
  /// - `receiver`: The channel receiver used to receive messages from other threads.
  /// - `capacity`: The size of the ring buffer to store incoming events.
  ///
  /// # Notes
  /// - This function is intended to run on a separate thread.
  /// - Snapshots are written using `snapshot_and_write`.
  fn writer_loop(receiver: Receiver<Message>, capacity: usize) {
    let mut ring = RingBuffer::new(capacity);
    let mut last_periodic = Instant::now();
    // you can set a periodic flush interval
    let periodic_flush_interval = Duration::seconds(60).to_std().unwrap();

    let service = SnapshotWriter::new("ttlog");

    while let Ok(msg) = receiver.recv() {
      match msg {
        Message::Event(ev) => {
          ring.push(ev);
        },
        Message::SnapshotImmediate(reason) => {
          if !ring.is_empty() {
            if let Err(e) = service.snapshot_and_write(&mut ring, reason) {
              eprintln!("[Snapshot] failed: {}", e);
            }
          } else {
            eprintln!(
              "[Snapshot] buffer empty, skipping snapshot (reason={})",
              reason
            );
          }
        },
        Message::FlushAndExit => {
          if !ring.is_empty() {
            let _ = service.snapshot_and_write(&mut ring, "flush_and_exit".to_string());
          }
          break;
        },
      }

      // periodic flush
      if last_periodic.elapsed() >= periodic_flush_interval && !ring.is_empty() {
        let _ = service.snapshot_and_write(&mut ring, "periodic".to_string());
        last_periodic = Instant::now();
      }
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
use crate::{event::Event, trace::Message};
use chrono::Utc;
use crossbeam_channel::{Sender, TrySendError};
use tracing::field::Visit;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

/// `BufferLayer` is a `tracing` layer that captures tracing events and
/// forwards them to a channel for asynchronous processing.
///
/// This layer converts a `tracing::Event` into a minimal `Event` struct
/// containing only the timestamp, log level, and message, and sends it
/// to a `crossbeam_channel::Sender<Message>`.
///
/// # Design
/// - Non-blocking: uses `try_send` to avoid slowing down the tracing hot path.
/// - Drops events if the channel is full to prevent blocking.
/// - Handles disconnected channels gracefully.
#[derive(Debug, Clone)]
pub struct BufferLayer {
  /// Channel sender used to forward captured events.
  sender: Sender<Message>,
}

impl BufferLayer {
  /// Creates a new `BufferLayer` that will send events to the given channel.
  ///
  /// # Parameters
  /// - `sender`: A `crossbeam_channel::Sender<Message>` to forward captured events.
  pub fn new(sender: Sender<Message>) -> Self {
    Self { sender }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  /// Called for every tracing event.
  ///
  /// Converts the event into a minimal `Event` (timestamp + level + message)
  /// and attempts to send it through the channel. Drops the event if the
  /// channel is full, or logs an error if the channel is disconnected.
  ///
  /// # Parameters
  /// - `event`: The `tracing::Event` being recorded.
  /// - `_ctx`: The subscriber context (unused in this implementation).
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    // Capture timestamp and level
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract the message field using a visitor
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());
    let target = event.metadata().target().to_string();

    // Build a minimal Event
    let new_event = Event::new(ts, level, message, target);

    // Attempt non-blocking send; drop if channel full
    match self.sender.try_send(Message::Event(new_event)) {
      Ok(_) => {},
      Err(err) => match err {
        TrySendError::Full(_) => {
          // Optional: increment a dropped-events counter here
        },
        TrySendError::Disconnected(_) => {
          // Writer thread died; log error
          eprintln!("[BufferLayer] writer thread disconnected");
        },
      },
    }
  }
}

/// `MessageVisitor` is a helper struct used to extract a string message
/// from structured tracing fields.
///
/// This is typically used when subscribing to tracing events and you want
/// to capture a specific field (like a message) from the event in a uniform way.
#[derive(Default)]
struct MessageVisitor {
  /// Stores the captured message from the tracing field.
  pub message: Option<String>,
}

impl Visit for MessageVisitor {
  /// Records a string field from a tracing event.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The string value to record.
  ///
  /// # Behavior
  /// Stores the string value in the `message` field, replacing any previous value.
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  /// Records a field that implements the `Debug` trait.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The value to record, formatted using `Debug`.
  ///
  /// # Behavior
  /// Converts the value to a string using `format!("{:?}", value)` and stores it
  /// in the `message` field, replacing any previous value.
  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: 20a2f119857ecf72eff177c0f4992137627806e9
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-14 23:14:51 +0300
Message:
Organize and update examples; update ttlog and snapshot modules

- Added new example projects under `exampels/ttlog-*`
- Removed obsolete `exampels/tes` project
- Updated `ttlog-complex` and `ttlog-simple` examples
- Updated `ttlog-view` snapshot reading module
- Improved `ttlog` panic hook handling


---- DIFF ----
diff --git a/ttlog-view/src/snapshot_read/mod.rs b/ttlog-view/src/snapshot_read/mod.rs
index 3b0f59d..8e334b9 100644
--- a/ttlog-view/src/snapshot_read/mod.rs
+++ b/ttlog-view/src/snapshot_read/mod.rs
@@ -29,10 +29,11 @@ pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
     // Build data
     let path = dir.path().to_string_lossy().to_string();
     let path = path.strip_prefix("/tmp/").unwrap();
-    let chunks = path.split("-").into_iter().collect::<Vec<_>>();
+    let chunks = path.split('-').collect::<Vec<_>>();
+
     let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
-      [prefix, pid, tsz, suffix] => (prefix, pid, tsz, suffix),
-      _ => panic!("Expected 4 parts in filename"),
+      [prefix, pid, tsz, rest @ ..] => (prefix, pid, tsz, rest),
+      _ => panic!("Expected at least 3 parts in filename"),
     };
 
     snapshots.push(SnapshotFile {
diff --git a/ttlog/src/panic_hook/mod.rs b/ttlog/src/panic_hook/mod.rs
index d486149..1e43b51 100644
--- a/ttlog/src/panic_hook/mod.rs
+++ b/ttlog/src/panic_hook/mod.rs
@@ -51,17 +51,13 @@ impl PanicHook {
       eprintln!("[Panic] Captured panic: {:?}", info);
 
       // Send snapshot request
-      if let Err(e) = sender.try_send(Message::SnapshotImmediate("panic".to_string())) {
+      if let Err(e) = sender.send(Message::SnapshotImmediate("panic".to_string())) {
         eprintln!("[Panic] Failed to send snapshot request: {:?}", e);
         return;
       }
 
       eprintln!("[Panic] Snapshot request sent, waiting for completion...");
 
-      // Give the writer thread time to process the snapshot
-      // This is a blocking operation, but we're in a panic handler
-      thread::sleep(Duration::milliseconds(100).to_std().unwrap());
-
       eprintln!("[Panic] Panic hook completed");
     }));
   }

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "gethostname"
version = "1.0.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
dependencies = [
 "rustix",
 "windows-targets 0.52.6",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapshotFile;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(format!("/tmp/{}.bin", file))?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::snapshot::Snapshot;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapshotFile {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Snapshot,
}

pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapshotFile> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Snapshot = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split('-').collect::<Vec<_>>();

    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, rest @ ..] => (prefix, pid, tsz, rest),
      _ => panic!("Expected at least 3 parts in filename"),
    };

    snapshots.push(SnapshotFile {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapshotFile;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapshotFile]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  for snap in snapshots {
    print_snapshot(snap);
  }
}
fn print_snapshot(snap: &SnapshotFile) {
  // Calculate max width for borders
  let mut all_lines: Vec<String> = Vec::new();
  all_lines.push(format!(
    "📦 {} ({})",
    snap.name,
    format_timestamp(&snap.create_at)
  ));
  all_lines.push(format!("📄 {}", snap.path));
  for event in &snap.data.events {
    all_lines.push(format!(
      "{} [{}] {}",
      icon_for_level(&event.level),
      event.level,
      event.message
    ));
  }

  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data.events {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };
    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys",
]

[[package]]
name = "gethostname"
version = "1.0.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
dependencies = [
 "rustix",
 "windows-targets 0.52.6",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tracing",
 "tracing-subscriber",
 "use",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "use"
version = "0.0.1-pre.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = { version = "0.4.41", features = ["clock"] }
lz4 = "1.28.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
serde_json = "1.0.142"
crossbeam-channel = "0.5.15"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
use = "0.0.1-pre.0"
gethostname = "1.0.2"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event};

  #[test]
  fn test_push_and_iter() {
    let capacity = 10;
    let mut buffer = RingBuffer::new(capacity);

    for i in 0..(capacity + 3) {
      buffer.push(Event {
        timestamp: 1755082651423,
        level: i.to_string(),
        message: format!("Event number {}", i),
      });
    }

    let items: Vec<_> = buffer.iter().collect();

    assert_eq!(items.len(), capacity);
    assert_eq!(items.first().unwrap().level, 3.to_string());
    assert_eq!(items.last().unwrap().level, 12.to_string());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};
use std::collections::VecDeque;

/// A fixed-capacity ring buffer that stores items in insertion order.
///
/// When the buffer reaches its capacity, adding a new item
/// will automatically evict the oldest item.
///
/// # Type Parameters
/// * `T` - The type of the items stored in the buffer. Must implement `Clone`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  /// Internal storage for the buffer
  data: VecDeque<T>,

  /// Maximum number of items the buffer can hold
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  /// Creates a new empty ring buffer with the specified capacity.
  ///
  /// # Arguments
  /// * `capacity` - The maximum number of items the buffer can store.
  ///
  /// # Example
  /// ```
  /// let buffer: RingBuffer<i32> = RingBuffer::new(10);
  /// assert_eq!(buffer.len(), 0);
  /// ```
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  /// Adds a new item to the buffer.
  ///
  /// If the buffer is already at capacity, the oldest item is removed
  /// to make space for the new item.
  ///
  /// # Arguments
  /// * `item` - The item to add to the buffer.
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(1);
  /// buffer.push(2);
  /// buffer.push(3); // evicts 1
  /// assert_eq!(buffer.len(), 2);
  /// ```
  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  /// Removes and returns all items currently in the buffer.
  ///
  /// This operation leaves the buffer empty but preserves its capacity,
  /// avoiding reallocations on future pushes.
  ///
  /// # Returns
  /// A `Vec<T>` containing all items in insertion order.
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(3);
  /// buffer.push(1);
  /// buffer.push(2);
  /// let snapshot = buffer.take_snapshot();
  /// assert_eq!(snapshot, vec![1, 2]);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn take_snapshot(&mut self) -> Vec<T> {
    let old = std::mem::replace(&mut self.data, VecDeque::with_capacity(self.capacity));
    old.into_iter().collect()
  }

  /// Returns an iterator over the items currently in the buffer.
  ///
  /// Items are iterated in insertion order (oldest to newest).
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(10);
  /// buffer.push(20);
  /// for item in buffer.iter() {
  ///     println!("{}", item);
  /// }
  /// ```
  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }

  /// Returns the number of items currently in the buffer.
  ///
  /// # Example
  /// ```
  /// let mut buffer = RingBuffer::new(2);
  /// assert_eq!(buffer.len(), 0);
  /// buffer.push(5);
  /// assert_eq!(buffer.len(), 1);
  /// ```
  pub fn len(&self) -> usize {
    self.data.len()
  }

  /// Returns `true` if the buffer is empty.
  ///
  /// # Example
  /// ```
  /// let buffer: RingBuffer<i32> = RingBuffer::new(2);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn is_empty(&self) -> bool {
    self.data.is_empty()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::event::{Event, Level};

  use std::collections::HashMap;

  #[test]
  fn test_event_serialization() {
    let ts = 1755082651423;
    let mut fields = HashMap::new();
    fields.insert("key".to_string(), serde_json::json!("value"));

    let event = Event::new(
      ts,
      Level::Info,
      "This is a test for event".to_string(),
      "my_target".to_string(),
      Some(42),
      fields.clone(),
      Some(1),
      Some("my_service".to_string()),
    );

    let serialized = event.serialize();

    let expected_json = serde_json::json!({
        "timestamp": ts,
        "level": "Info",
        "message": "This is a test for event",
        "target": "my_target",
        "span_id": 42,
        "fields": fields,
        "thread_id": 1,
        "service_name": "my_service"
    })
    .to_string();

    assert_eq!(serialized, expected_json);
  }

  #[test]
  fn test_event_deserialization() {
    let json = r#"{
            "timestamp": 1755082651423,
            "level": "Info",
            "message": "This is a test for event",
            "target": "my_target",
            "span_id": 42,
            "fields": {"key": "value"},
            "thread_id": 1,
            "service_name": "my_service"
        }"#;

    let event: Event = Event::deserialize(json.to_string());

    assert_eq!(event.timestamp, 1755082651423);
    assert_eq!(event.message, "This is a test for event");
    assert_eq!(event.target, "my_target");
    assert_eq!(event.span_id, Some(42));
    assert_eq!(event.fields.get("key").unwrap(), "value");
    assert_eq!(event.thread_id, Some(1));
    assert_eq!(event.service_name.as_deref(), Some("my_service"));
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Level {
  Trace,
  Debug,
  Info,
  Warn,
  Error,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  pub timestamp: u64,
  pub level: String,
  pub message: String,
  pub target: String,
}

impl Event {
  pub fn new(timestamp: u64, level: String, message: String, target: String) -> Self {
    Self {
      timestamp,
      level,
      message,
      target,
    }
  }

  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

impl Default for Event {
  fn default() -> Self {
    Self {
      timestamp: 0,
      level: "".to_string(), // Level::Info,
      message: String::new(),
      target: String::new(),
    }
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod snapshot;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
use std::thread;

use crate::trace::Message;
use chrono::Duration;
use crossbeam_channel::Sender;

/// `
/// PanicHook` is a utility for installing a custom panic hook in Rust programs.
///
/// When a panic occurs, this hook captures the panic information and requests
/// an immediate snapshot to be sent via a `crossbeam_channel::Sender<Message>`.
/// This is useful in tracing or logging systems to capture the state of the
/// application at the moment of a panic.
///
/// # Example
///
/// ```rust
/// use crossbeam_channel::unbounded;
/// use crate::trace::Message;
/// use crate::PanicHook;
///
/// let (sender, receiver) = unbounded();
///
/// // Install the panic hook
/// PanicHook::install(sender.clone());
///
/// // Trigger a panic to test
/// std::panic::panic_any("something went wrong");
/// ```
///
/// The hook will attempt to send a `Message::SnapshotImmediate` containing
/// the reason `"panic"` without blocking.
pub struct PanicHook {}

impl PanicHook {
  /// Installs a panic hook that requests an immediate snapshot when a panic occurs.
  ///
  /// # Parameters
  ///
  /// - `sender`: A `crossbeam_channel::Sender<Message>` used to request the snapshot.
  ///   The hook will use `try_send` to avoid blocking the panic unwinding process.
  ///
  /// # Behavior
  ///
  /// When a panic occurs:
  /// 1. The panic information (`std::panic::PanicInfo`) is printed to stderr.
  /// 2. A `Message::SnapshotImmediate("panic")` is sent through the provided sender.
  ///    If sending fails (e.g., channel is full or closed), the error is ignored.
  pub fn install(sender: Sender<Message>) {
    std::panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);

      // Send snapshot request
      if let Err(e) = sender.send(Message::SnapshotImmediate("panic".to_string())) {
        eprintln!("[Panic] Failed to send snapshot request: {:?}", e);
        return;
      }

      eprintln!("[Panic] Snapshot request sent, waiting for completion...");

      eprintln!("[Panic] Panic hook completed");
    }));
  }
}

----- FILE: ttlog/src/snapshot/mod.rs -----
use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use serde::{Deserialize, Serialize};
use std::fs::{self, File};
use std::io::Write;

use crate::buffer::RingBuffer;
use crate::event::Event;

// wrap metadata + events
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Snapshot {
  pub service: String,
  pub hostname: String,
  pub pid: u32,
  pub created_at: String,
  pub reason: String,
  pub events: Vec<Event>,
}
/// Responsible for creating snapshots from a ring buffer and writing them to disk.
pub struct SnapshotWriter {
  service: String,
}

impl SnapshotWriter {
  /// Creates a new `SnapshotWriter` for a given service name.
  pub fn new(service: impl Into<String>) -> Self {
    Self {
      service: service.into(),
    }
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// A `Snapshot` struct containing all events and metadata.
  pub fn create_snapshot(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Option<Snapshot> {
    let events = ring.take_snapshot();
    if events.is_empty() {
      return None;
    }

    let hostname = gethostname::gethostname().to_string_lossy().into_owned();
    let pid = std::process::id();
    let created_at = Utc::now().format("%Y%m%d%H%M%S").to_string();

    Some(Snapshot {
      service: self.service.clone(),
      hostname,
      pid,
      created_at,
      reason: reason.into(),
      events,
    })
  }

  /// Serialize a snapshot to CBOR, compress with LZ4, and write it atomically to disk.
  ///
  /// # Parameters
  /// - `snapshot`: The snapshot to serialize and write.
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
    // Serialize CBOR
    let cbor_buff = serde_cbor::to_vec(&snapshot)?;
    // Compress
    let compressed = compress(&cbor_buff, Some(CompressionMode::DEFAULT), true)?;

    // Build filename and write atomically
    let filename = format!(
      "/tmp/ttlog-{}-{}-{}.bin",
      snapshot.pid, snapshot.created_at, snapshot.reason
    );
    let tmp = format!("{}.tmp", &filename);

    {
      let mut f = File::create(&tmp)?;
      f.write_all(&compressed)?;
      f.sync_all()?;
    }
    fs::rename(&tmp, &filename)?;
    eprintln!(
      "[Snapshot] Saved {} events to {}",
      snapshot.events.len(),
      filename
    );
    Ok(())
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  /// If a snapshot is created, write it to disk.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn snapshot_and_write(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Result<(), Box<dyn std::error::Error>> {
    if let Some(snapshot) = self.create_snapshot(ring, reason) {
      self.write_snapshot(&snapshot)
    } else {
      println!("[Snapshot] No events to snapshot");
      Ok(())
    }
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Duration;
use std::thread;
use std::time::Instant;
use tracing_subscriber::layer::SubscriberExt;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::snapshot::SnapshotWriter;
use crate::trace_layer::BufferLayer;

use crossbeam_channel::{bounded, Receiver, Sender};

pub struct Trace {
  sender: Sender<Message>,
}

#[derive(Debug)]
pub enum Message {
  Event(Event),
  SnapshotImmediate(String), // reason
  FlushAndExit,              // optional: for graceful shutdown in tests
}

impl Trace {
  /// Initializes the tracing/logging system with a bounded channel and a writer thread.
  ///
  /// # Parameters
  /// - `capacity`: The maximum number of messages the ring buffer can hold.
  /// - `channel_capacity`: The maximum number of messages the channel can buffer before blocking.
  ///
  /// # Behavior
  /// - Spawns a dedicated writer thread that reads messages from the channel and writes them into the ring buffer.
  /// - Creates a `BufferLayer` that intercepts tracing events and sends them to the channel.
  /// - Registers the `BufferLayer` with the global tracing subscriber. If a subscriber is already set, the error is ignored.
  ///
  /// # Returns
  /// Returns an instance containing the sender, which can be used to send messages to the buffer asynchronously.
  ///
  /// # Example
  /// ```rust
  /// let trace_system = Trace::init(1024, 128);
  /// trace_system.sender.send(Message::new("test")).unwrap();
  /// ```
  pub fn init(capacity: usize, channel_capacity: usize) -> Self {
    let (sender, receiver) = bounded::<Message>(channel_capacity);

    // Spawn writer thread which owns the ring buffer
    thread::spawn(move || Trace::writer_loop(receiver, capacity));

    // Create and register BufferLayer using the sender
    let layer = BufferLayer::new(sender.clone());
    let subscriber = tracing_subscriber::Registry::default().with(layer);
    let _ = tracing::subscriber::set_global_default(subscriber); // ignore error if already set

    Self { sender }
  }

  /// Returns a clone of the sender used to send messages into the tracing buffer.
  ///
  /// This allows other threads or components to asynchronously send `Message`s
  /// (events or snapshot requests) to the writer thread.
  ///
  /// # Example
  /// ```rust
  /// let sender = trace_system.get_sender();
  /// sender.send(Message::Event(my_event)).unwrap();
  /// ```
  pub fn get_sender(&self) -> Sender<Message> {
    self.sender.clone()
  }

  /// Requests an immediate snapshot of the current ring buffer.
  ///
  /// Sends a `SnapshotImmediate` message into the channel. The `reason` is included
  /// in the snapshot metadata for logging or debugging purposes.
  ///
  /// If the channel is full, the request is ignored.
  ///
  /// # Parameters
  /// - `reason`: A string describing why the snapshot was requested.
  ///
  /// # Example
  /// ```rust
  /// trace_system.request_snapshot("manual_debug_snapshot");
  /// ```
  pub fn request_snapshot(&self, reason: &str) {
    let _ = self
      .sender
      .try_send(Message::SnapshotImmediate(reason.to_string()));
  }

  /// The main writer loop that runs on a dedicated thread.
  ///
  /// This function continuously receives messages from the channel and:
  /// - Stores events in a ring buffer.
  /// - Writes immediate snapshots when requested.
  /// - Flushes and exits when requested.
  /// - Performs periodic flushes every 60 seconds.
  ///
  /// # Parameters
  /// - `receiver`: The channel receiver used to receive messages from other threads.
  /// - `capacity`: The size of the ring buffer to store incoming events.
  ///
  /// # Notes
  /// - This function is intended to run on a separate thread.
  /// - Snapshots are written using `snapshot_and_write`.
  fn writer_loop(receiver: Receiver<Message>, capacity: usize) {
    let mut ring = RingBuffer::new(capacity);
    let mut last_periodic = Instant::now();
    // you can set a periodic flush interval
    let periodic_flush_interval = Duration::seconds(60).to_std().unwrap();

    let service = SnapshotWriter::new("ttlog");

    while let Ok(msg) = receiver.recv() {
      match msg {
        Message::Event(ev) => {
          ring.push(ev);
        },
        Message::SnapshotImmediate(reason) => {
          if !ring.is_empty() {
            if let Err(e) = service.snapshot_and_write(&mut ring, reason) {
              eprintln!("[Snapshot] failed: {}", e);
            }
          } else {
            eprintln!(
              "[Snapshot] buffer empty, skipping snapshot (reason={})",
              reason
            );
          }
        },
        Message::FlushAndExit => {
          if !ring.is_empty() {
            let _ = service.snapshot_and_write(&mut ring, "flush_and_exit".to_string());
          }
          break;
        },
      }

      // periodic flush
      if last_periodic.elapsed() >= periodic_flush_interval && !ring.is_empty() {
        let _ = service.snapshot_and_write(&mut ring, "periodic".to_string());
        last_periodic = Instant::now();
      }
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
use crate::{event::Event, trace::Message};
use chrono::Utc;
use crossbeam_channel::{Sender, TrySendError};
use tracing::field::Visit;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

/// `BufferLayer` is a `tracing` layer that captures tracing events and
/// forwards them to a channel for asynchronous processing.
///
/// This layer converts a `tracing::Event` into a minimal `Event` struct
/// containing only the timestamp, log level, and message, and sends it
/// to a `crossbeam_channel::Sender<Message>`.
///
/// # Design
/// - Non-blocking: uses `try_send` to avoid slowing down the tracing hot path.
/// - Drops events if the channel is full to prevent blocking.
/// - Handles disconnected channels gracefully.
#[derive(Debug, Clone)]
pub struct BufferLayer {
  /// Channel sender used to forward captured events.
  sender: Sender<Message>,
}

impl BufferLayer {
  /// Creates a new `BufferLayer` that will send events to the given channel.
  ///
  /// # Parameters
  /// - `sender`: A `crossbeam_channel::Sender<Message>` to forward captured events.
  pub fn new(sender: Sender<Message>) -> Self {
    Self { sender }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  /// Called for every tracing event.
  ///
  /// Converts the event into a minimal `Event` (timestamp + level + message)
  /// and attempts to send it through the channel. Drops the event if the
  /// channel is full, or logs an error if the channel is disconnected.
  ///
  /// # Parameters
  /// - `event`: The `tracing::Event` being recorded.
  /// - `_ctx`: The subscriber context (unused in this implementation).
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    // Capture timestamp and level
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract the message field using a visitor
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());
    let target = event.metadata().target().to_string();

    // Build a minimal Event
    let new_event = Event::new(ts, level, message, target);

    // Attempt non-blocking send; drop if channel full
    match self.sender.try_send(Message::Event(new_event)) {
      Ok(_) => {},
      Err(err) => match err {
        TrySendError::Full(_) => {
          // Optional: increment a dropped-events counter here
        },
        TrySendError::Disconnected(_) => {
          // Writer thread died; log error
          eprintln!("[BufferLayer] writer thread disconnected");
        },
      },
    }
  }
}

/// `MessageVisitor` is a helper struct used to extract a string message
/// from structured tracing fields.
///
/// This is typically used when subscribing to tracing events and you want
/// to capture a specific field (like a message) from the event in a uniform way.
#[derive(Default)]
struct MessageVisitor {
  /// Stores the captured message from the tracing field.
  pub message: Option<String>,
}

impl Visit for MessageVisitor {
  /// Records a string field from a tracing event.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The string value to record.
  ///
  /// # Behavior
  /// Stores the string value in the `message` field, replacing any previous value.
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  /// Records a field that implements the `Debug` trait.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The value to record, formatted using `Debug`.
  ///
  /// # Behavior
  /// Converts the value to a string using `format!("{:?}", value)` and stores it
  /// in the `message` field, replacing any previous value.
  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: bdf74e6ad538607279b494c8e60fedfb679669ee
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-15 01:04:58 +0300
Message:
refactor(ttlog): enhance buffer and event handling

- Improved buffer and event modules for stability and performance
- Updated examples to align with new APIs
- Regenerated Cargo.lock for all crates
- Tweaked Makefile for smoother builds


---- DIFF ----
diff --git a/ttlog-view/Cargo.lock b/ttlog-view/Cargo.lock
index 023c029..dfd259e 100644
--- a/ttlog-view/Cargo.lock
+++ b/ttlog-view/Cargo.lock
@@ -81,6 +81,7 @@ dependencies = [
  "iana-time-zone",
  "js-sys",
  "num-traits",
+ "serde",
  "wasm-bindgen",
  "windows-link",
 ]
@@ -156,6 +157,12 @@ dependencies = [
  "windows-sys 0.60.2",
 ]
 
+[[package]]
+name = "fastrand"
+version = "2.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
+
 [[package]]
 name = "figlet-rs"
 version = "0.1.5"
@@ -182,12 +189,24 @@ dependencies = [
 
 [[package]]
 name = "gethostname"
-version = "1.0.2"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
+checksum = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"
 dependencies = [
- "rustix",
- "windows-targets 0.52.6",
+ "libc",
+ "windows-targets 0.48.5",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "r-efi",
+ "wasi 0.14.2+wasi-0.2.4",
 ]
 
 [[package]]
@@ -320,7 +339,7 @@ checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
 dependencies = [
  "libc",
  "log",
- "wasi",
+ "wasi 0.11.1+wasi-snapshot-preview1",
  "windows-sys 0.48.0",
 ]
 
@@ -411,6 +430,12 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "r-efi"
+version = "5.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"
+
 [[package]]
 name = "redox_syscall"
 version = "0.5.17"
@@ -584,6 +609,19 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "tempfile"
+version = "3.20.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
+dependencies = [
+ "fastrand",
+ "getrandom",
+ "once_cell",
+ "rustix",
+ "windows-sys 0.59.0",
+]
+
 [[package]]
 name = "terminal_size"
 version = "0.4.3"
@@ -671,9 +709,9 @@ dependencies = [
  "serde",
  "serde_cbor",
  "serde_json",
+ "tempfile",
  "tracing",
  "tracing-subscriber",
- "use",
 ]
 
 [[package]]
@@ -711,12 +749,6 @@ version = "0.1.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"
 
-[[package]]
-name = "use"
-version = "0.0.1-pre.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"
-
 [[package]]
 name = "valuable"
 version = "0.1.1"
@@ -729,6 +761,15 @@ version = "0.11.1+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"
 
+[[package]]
+name = "wasi"
+version = "0.14.2+wasi-0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
+dependencies = [
+ "wit-bindgen-rt",
+]
+
 [[package]]
 name = "wasm-bindgen"
 version = "0.2.100"
@@ -1080,3 +1121,12 @@ name = "windows_x86_64_msvc"
 version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
+
+[[package]]
+name = "wit-bindgen-rt"
+version = "0.39.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
+dependencies = [
+ "bitflags 2.9.1",
+]
diff --git a/ttlog/Cargo.lock b/ttlog/Cargo.lock
index 2803092..20fff1f 100644
--- a/ttlog/Cargo.lock
+++ b/ttlog/Cargo.lock
@@ -60,6 +60,7 @@ dependencies = [
  "iana-time-zone",
  "js-sys",
  "num-traits",
+ "serde",
  "wasm-bindgen",
  "windows-link",
 ]
@@ -92,17 +93,35 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
 dependencies = [
  "libc",
- "windows-sys",
+ "windows-sys 0.60.2",
 ]
 
+[[package]]
+name = "fastrand"
+version = "2.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
+
 [[package]]
 name = "gethostname"
-version = "1.0.2"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fc257fdb4038301ce4b9cd1b3b51704509692bb3ff716a410cbd07925d9dae55"
+checksum = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"
 dependencies = [
- "rustix",
- "windows-targets 0.52.6",
+ "libc",
+ "windows-targets 0.48.5",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "r-efi",
+ "wasi",
 ]
 
 [[package]]
@@ -255,6 +274,12 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "r-efi"
+version = "5.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"
+
 [[package]]
 name = "rustix"
 version = "1.0.8"
@@ -265,7 +290,7 @@ dependencies = [
  "errno",
  "libc",
  "linux-raw-sys",
- "windows-sys",
+ "windows-sys 0.60.2",
 ]
 
 [[package]]
@@ -354,6 +379,19 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "tempfile"
+version = "3.20.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
+dependencies = [
+ "fastrand",
+ "getrandom",
+ "once_cell",
+ "rustix",
+ "windows-sys 0.59.0",
+]
+
 [[package]]
 name = "thread_local"
 version = "1.1.9"
@@ -431,9 +469,9 @@ dependencies = [
  "serde",
  "serde_cbor",
  "serde_json",
+ "tempfile",
  "tracing",
  "tracing-subscriber",
- "use",
 ]
 
 [[package]]
@@ -442,18 +480,21 @@ version = "1.0.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
 
-[[package]]
-name = "use"
-version = "0.0.1-pre.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f916b8b6102de89f9999988ddc8e9bd0f119a8344e06bb19b0b03fb655769035"
-
 [[package]]
 name = "valuable"
 version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"
 
+[[package]]
+name = "wasi"
+version = "0.14.2+wasi-0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
+dependencies = [
+ "wit-bindgen-rt",
+]
+
 [[package]]
 name = "wasm-bindgen"
 version = "0.2.100"
@@ -593,6 +634,15 @@ dependencies = [
  "windows-link",
 ]
 
+[[package]]
+name = "windows-sys"
+version = "0.59.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "windows-sys"
 version = "0.60.2"
@@ -602,6 +652,21 @@ dependencies = [
  "windows-targets 0.53.3",
 ]
 
+[[package]]
+name = "windows-targets"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
+dependencies = [
+ "windows_aarch64_gnullvm 0.48.5",
+ "windows_aarch64_msvc 0.48.5",
+ "windows_i686_gnu 0.48.5",
+ "windows_i686_msvc 0.48.5",
+ "windows_x86_64_gnu 0.48.5",
+ "windows_x86_64_gnullvm 0.48.5",
+ "windows_x86_64_msvc 0.48.5",
+]
+
 [[package]]
 name = "windows-targets"
 version = "0.52.6"
@@ -635,6 +700,12 @@ dependencies = [
  "windows_x86_64_msvc 0.53.0",
 ]
 
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"
+
 [[package]]
 name = "windows_aarch64_gnullvm"
 version = "0.52.6"
@@ -647,6 +718,12 @@ version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"
 
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"
+
 [[package]]
 name = "windows_aarch64_msvc"
 version = "0.52.6"
@@ -659,6 +736,12 @@ version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"
 
+[[package]]
+name = "windows_i686_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"
+
 [[package]]
 name = "windows_i686_gnu"
 version = "0.52.6"
@@ -683,6 +766,12 @@ version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"
 
+[[package]]
+name = "windows_i686_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"
+
 [[package]]
 name = "windows_i686_msvc"
 version = "0.52.6"
@@ -695,6 +784,12 @@ version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"
 
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"
+
 [[package]]
 name = "windows_x86_64_gnu"
 version = "0.52.6"
@@ -707,6 +802,12 @@ version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"
 
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"
+
 [[package]]
 name = "windows_x86_64_gnullvm"
 version = "0.52.6"
@@ -719,6 +820,12 @@ version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"
 
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"
+
 [[package]]
 name = "windows_x86_64_msvc"
 version = "0.52.6"
@@ -730,3 +837,12 @@ name = "windows_x86_64_msvc"
 version = "0.53.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
+
+[[package]]
+name = "wit-bindgen-rt"
+version = "0.39.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
+dependencies = [
+ "bitflags",
+]
diff --git a/ttlog/Cargo.toml b/ttlog/Cargo.toml
index 65f079e..ee7a178 100644
--- a/ttlog/Cargo.toml
+++ b/ttlog/Cargo.toml
@@ -1,17 +1,20 @@
 [package]
 name = "ttlog"
 version = "0.1.0"
-edition = "2024"
+edition = "2021"
 
 [dependencies]
-chrono = { version = "0.4.41", features = ["clock"] }
-lz4 = "1.28.1"
+chrono = { version = "0.4", features = ["serde"] }
+lz4 = "1.28"
 serde = { version = "1.0", features = ["derive"] }
-serde_cbor = "0.11.2"
-serde_json = "1.0.142"
-crossbeam-channel = "0.5.15"
-tracing = "0.1.41"
-tracing-subscriber = "0.3.19"
-use = "0.0.1-pre.0"
-gethostname = "1.0.2"
+serde_cbor = "0.11"
+serde_json = "1.0"
+tracing = "0.1"
+tracing-subscriber = "0.3"
+crossbeam-channel = "0.5"
+gethostname = "0.4"
+tempfile = "3.8"
+
+[dev-dependencies]
+tempfile = "3.8"
 
diff --git a/ttlog/src/buffer/__test__/mod.rs b/ttlog/src/buffer/__test__/mod.rs
index ec58951..71b41f2 100644
--- a/ttlog/src/buffer/__test__/mod.rs
+++ b/ttlog/src/buffer/__test__/mod.rs
@@ -1,24 +1,166 @@
 #[cfg(test)]
-mod tests {
-  use crate::{buffer::RingBuffer, event::Event};
+mod __test__ {
+
+  use crate::buffer::RingBuffer;
+  use crate::event::Event;
+
+  #[test]
+  fn test_ring_buffer_new() {
+    let buffer: RingBuffer<i32> = RingBuffer::new(10);
+    assert_eq!(buffer.capacity, 10);
+    assert_eq!(buffer.len(), 0);
+    assert!(buffer.is_empty());
+  }
+
+  #[test]
+  fn test_ring_buffer_push_single() {
+    let mut buffer = RingBuffer::new(5);
+    buffer.push(42);
+
+    assert_eq!(buffer.len(), 1);
+    assert!(!buffer.is_empty());
+
+    let items: Vec<i32> = buffer.iter().cloned().collect();
+    assert_eq!(items, vec![42]);
+  }
+
+  #[test]
+  fn test_ring_buffer_push_multiple() {
+    let mut buffer = RingBuffer::new(3);
+
+    buffer.push(1);
+    buffer.push(2);
+    buffer.push(3);
+
+    assert_eq!(buffer.len(), 3);
+    assert_eq!(buffer.capacity, 3);
+
+    let items: Vec<i32> = buffer.iter().cloned().collect();
+    assert_eq!(items, vec![1, 2, 3]);
+  }
+
+  #[test]
+  fn test_ring_buffer_overflow() {
+    let mut buffer = RingBuffer::new(3);
+
+    buffer.push(1);
+    buffer.push(2);
+    buffer.push(3);
+    buffer.push(4); // should evict 1
+
+    assert_eq!(buffer.len(), 3);
+    let items: Vec<i32> = buffer.iter().cloned().collect();
+    assert_eq!(items, vec![2, 3, 4]);
+
+    buffer.push(5); // should evict 2
+    let items: Vec<i32> = buffer.iter().cloned().collect();
+    assert_eq!(items, vec![3, 4, 5]);
+  }
+
+  #[test]
+  fn test_ring_buffer_take_snapshot() {
+    let mut buffer = RingBuffer::new(5);
+
+    buffer.push(10);
+    buffer.push(20);
+    buffer.push(30);
+
+    let snapshot = buffer.take_snapshot();
+    assert_eq!(snapshot, vec![10, 20, 30]);
+    assert!(buffer.is_empty());
+    assert_eq!(buffer.len(), 0);
+    assert_eq!(buffer.capacity, 5);
+  }
+
+  #[test]
+  fn test_ring_buffer_take_snapshot_empty() {
+    let mut buffer: RingBuffer<i32> = RingBuffer::new(5);
+
+    let snapshot = buffer.take_snapshot();
+    assert!(snapshot.is_empty());
+    assert!(buffer.is_empty());
+  }
+
+  #[test]
+  fn test_ring_buffer_iter() {
+    let mut buffer = RingBuffer::new(4);
+
+    buffer.push(1);
+    buffer.push(2);
+    buffer.push(3);
+
+    let items: Vec<i32> = buffer.iter().cloned().collect();
+    assert_eq!(items, vec![1, 2, 3]);
+  }
+
+  #[test]
+  fn test_ring_buffer_iter_empty() {
+    let buffer: RingBuffer<i32> = RingBuffer::new(5);
+    let items: Vec<i32> = buffer.iter().cloned().collect();
+    assert!(items.is_empty());
+  }
 
   #[test]
-  fn test_push_and_iter() {
-    let capacity = 10;
-    let mut buffer = RingBuffer::new(capacity);
+  fn test_ring_buffer_with_events() {
+    let mut buffer = RingBuffer::new(3);
+
+    let event1 = Event::new(
+      1000,
+      "INFO".to_string(),
+      "First".to_string(),
+      "target1".to_string(),
+    );
+    let event2 = Event::new(
+      2000,
+      "WARN".to_string(),
+      "Second".to_string(),
+      "target2".to_string(),
+    );
+    let event3 = Event::new(
+      3000,
+      "ERROR".to_string(),
+      "Third".to_string(),
+      "target3".to_string(),
+    );
 
-    for i in 0..(capacity + 3) {
-      buffer.push(Event {
-        timestamp: 1755082651423,
-        level: i.to_string(),
-        message: format!("Event number {}", i),
-      });
-    }
+    buffer.push(event1.clone());
+    buffer.push(event2.clone());
+    buffer.push(event3.clone());
+
+    let events: Vec<Event> = buffer.iter().cloned().collect();
+    assert_eq!(events.len(), 3);
+    assert_eq!(events[0].message, "First");
+    assert_eq!(events[1].message, "Second");
+    assert_eq!(events[2].message, "Third");
+
+    // Test overflow with events
+    let event4 = Event::new(
+      4000,
+      "DEBUG".to_string(),
+      "Fourth".to_string(),
+      "target4".to_string(),
+    );
+    buffer.push(event4.clone());
+    let events: Vec<Event> = buffer.iter().cloned().collect();
+    assert_eq!(events.len(), 3);
+    assert_eq!(events[0].message, "Second"); // First evicted
+    assert_eq!(events[2].message, "Fourth");
+  }
+
+  // test: push and snapshot repeatedly
+  #[test]
+  fn test_ring_buffer_push_and_snapshot_repeatedly() {
+    let mut buffer = RingBuffer::new(2);
 
-    let items: Vec<_> = buffer.iter().collect();
+    buffer.push(1);
+    let snap1 = buffer.take_snapshot();
+    assert_eq!(snap1, vec![1]);
+    assert!(buffer.is_empty());
 
-    assert_eq!(items.len(), capacity);
-    assert_eq!(items.first().unwrap().level, 3.to_string());
-    assert_eq!(items.last().unwrap().level, 12.to_string());
+    buffer.push(2);
+    buffer.push(3); // should evict 2 if buffer was filled previously
+    let snap2 = buffer.take_snapshot();
+    assert_eq!(snap2, vec![2, 3]);
+    assert!(buffer.is_empty());
   }
 }
diff --git a/ttlog/src/buffer/mod.rs b/ttlog/src/buffer/mod.rs
index ec3b666..346183a 100644
--- a/ttlog/src/buffer/mod.rs
+++ b/ttlog/src/buffer/mod.rs
@@ -26,7 +26,9 @@ impl<T: Clone> RingBuffer<T> {
   /// * `capacity` - The maximum number of items the buffer can store.
   ///
   /// # Example
-  /// ```
+  /// ```rust
+  /// use ttlog::buffer::RingBuffer;
+  ///
   /// let buffer: RingBuffer<i32> = RingBuffer::new(10);
   /// assert_eq!(buffer.len(), 0);
   /// ```
@@ -46,7 +48,9 @@ impl<T: Clone> RingBuffer<T> {
   /// * `item` - The item to add to the buffer.
   ///
   /// # Example
-  /// ```
+  /// ```rust
+  /// use ttlog::buffer::RingBuffer;
+  ///
   /// let mut buffer = RingBuffer::new(2);
   /// buffer.push(1);
   /// buffer.push(2);
@@ -69,7 +73,9 @@ impl<T: Clone> RingBuffer<T> {
   /// A `Vec<T>` containing all items in insertion order.
   ///
   /// # Example
-  /// ```
+  /// ```rust
+  /// use ttlog::buffer::RingBuffer;
+  ///
   /// let mut buffer = RingBuffer::new(3);
   /// buffer.push(1);
   /// buffer.push(2);
@@ -87,7 +93,9 @@ impl<T: Clone> RingBuffer<T> {
   /// Items are iterated in insertion order (oldest to newest).
   ///
   /// # Example
-  /// ```
+  /// ```rust
+  /// use ttlog::buffer::RingBuffer;
+  ///
   /// let mut buffer = RingBuffer::new(2);
   /// buffer.push(10);
   /// buffer.push(20);
@@ -102,7 +110,9 @@ impl<T: Clone> RingBuffer<T> {
   /// Returns the number of items currently in the buffer.
   ///
   /// # Example
-  /// ```
+  /// ```rust
+  /// use ttlog::buffer::RingBuffer;
+  ///
   /// let mut buffer = RingBuffer::new(2);
   /// assert_eq!(buffer.len(), 0);
   /// buffer.push(5);
@@ -115,7 +125,9 @@ impl<T: Clone> RingBuffer<T> {
   /// Returns `true` if the buffer is empty.
   ///
   /// # Example
-  /// ```
+  /// ```rust
+  /// use ttlog::buffer::RingBuffer;
+  ///
   /// let buffer: RingBuffer<i32> = RingBuffer::new(2);
   /// assert!(buffer.is_empty());
   /// ```
diff --git a/ttlog/src/event/__test__/mod.rs b/ttlog/src/event/__test__/mod.rs
index 847e466..0f43e0a 100644
--- a/ttlog/src/event/__test__/mod.rs
+++ b/ttlog/src/event/__test__/mod.rs
@@ -1,64 +1,189 @@
 #[cfg(test)]
-mod tests {
-  use crate::event::{Event, Level};
+mod __test__ {
 
-  use std::collections::HashMap;
+  use crate::event::Event;
 
   #[test]
-  fn test_event_serialization() {
-    let ts = 1755082651423;
-    let mut fields = HashMap::new();
-    fields.insert("key".to_string(), serde_json::json!("value"));
+  fn test_event_creation() {
+    let event = Event::new(
+      1234567890,
+      "INFO".to_string(),
+      "Test message".to_string(),
+      "test_target".to_string(),
+    );
+
+    assert_eq!(event.timestamp, 1234567890);
+    assert_eq!(event.level, "INFO");
+    assert_eq!(event.message, "Test message");
+    assert_eq!(event.target, "test_target");
+  }
+
+  #[test]
+  fn test_event_default() {
+    let event = Event::default();
+
+    assert_eq!(event.timestamp, 0);
+    assert_eq!(event.level, "");
+    assert_eq!(event.message, "");
+    assert_eq!(event.target, "");
+  }
+
+  #[test]
+  fn test_event_clone() {
+    let event = Event::new(
+      1234567890,
+      "WARN".to_string(),
+      "Warning message".to_string(),
+      "warn_target".to_string(),
+    );
+
+    let cloned = event.clone();
+
+    assert_eq!(event.timestamp, cloned.timestamp);
+    assert_eq!(event.level, cloned.level);
+    assert_eq!(event.message, cloned.message);
+    assert_eq!(event.target, cloned.target);
+  }
 
+  #[test]
+  fn test_event_serialization() {
     let event = Event::new(
-      ts,
-      Level::Info,
-      "This is a test for event".to_string(),
-      "my_target".to_string(),
-      Some(42),
-      fields.clone(),
-      Some(1),
-      Some("my_service".to_string()),
+      1234567890,
+      "INFO".to_string(),
+      "Test message".to_string(),
+      "test_target".to_string(),
     );
 
-    let serialized = event.serialize();
-
-    let expected_json = serde_json::json!({
-        "timestamp": ts,
-        "level": "Info",
-        "message": "This is a test for event",
-        "target": "my_target",
-        "span_id": 42,
-        "fields": fields,
-        "thread_id": 1,
-        "service_name": "my_service"
-    })
-    .to_string();
-
-    assert_eq!(serialized, expected_json);
+    let json = event.serialize();
+    assert!(json.contains("1234567890"));
+    assert!(json.contains("INFO"));
+    assert!(json.contains("Test message"));
+    assert!(json.contains("test_target"));
   }
 
   #[test]
   fn test_event_deserialization() {
-    let json = r#"{
-            "timestamp": 1755082651423,
-            "level": "Info",
-            "message": "This is a test for event",
-            "target": "my_target",
-            "span_id": 42,
-            "fields": {"key": "value"},
-            "thread_id": 1,
-            "service_name": "my_service"
-        }"#;
-
-    let event: Event = Event::deserialize(json.to_string());
-
-    assert_eq!(event.timestamp, 1755082651423);
-    assert_eq!(event.message, "This is a test for event");
-    assert_eq!(event.target, "my_target");
-    assert_eq!(event.span_id, Some(42));
-    assert_eq!(event.fields.get("key").unwrap(), "value");
-    assert_eq!(event.thread_id, Some(1));
-    assert_eq!(event.service_name.as_deref(), Some("my_service"));
+    let original_event = Event::new(
+      1234567890,
+      "INFO".to_string(),
+      "Test message".to_string(),
+      "test_target".to_string(),
+    );
+
+    let json = original_event.serialize();
+    let deserialized_event = Event::deserialize(json);
+
+    assert_eq!(original_event.timestamp, deserialized_event.timestamp);
+    assert_eq!(original_event.level, deserialized_event.level);
+    assert_eq!(original_event.message, deserialized_event.message);
+    assert_eq!(original_event.target, deserialized_event.target);
+  }
+
+  #[test]
+  fn test_event_display() {
+    let event = Event::new(
+      1234567890,
+      "INFO".to_string(),
+      "Display test".to_string(),
+      "display_target".to_string(),
+    );
+
+    let display_str = format!("{}", event);
+    assert!(display_str.contains("1234567890"));
+    assert!(display_str.contains("INFO"));
+    assert!(display_str.contains("Display test"));
+    assert!(display_str.contains("display_target"));
+  }
+
+  /// Helper to create events with different levels
+  fn event_with_level(level: &str) -> Event {
+    Event::new(
+      1000,
+      level.to_string(),
+      "Level test".to_string(),
+      "target".to_string(),
+    )
+  }
+
+  #[test]
+  fn test_event_all_levels() {
+    let levels = ["Trace", "Debug", "Info", "Warn", "Error"];
+
+    for &level in &levels {
+      let event = event_with_level(level);
+      assert_eq!(event.level, level);
+      assert_eq!(event.message, "Level test");
+      assert_eq!(event.target, "target");
+    }
+  }
+
+  #[test]
+  fn test_event_special_characters() {
+    let msg = "Message with \"quotes\", newlines\n, and \\backslashes\\";
+    let target = "target/with/special\\chars";
+    let event = Event::new(
+      123,
+      "DEBUG".to_string(),
+      msg.to_string(),
+      target.to_string(),
+    );
+
+    let json = event.serialize();
+    assert!(json.contains("\\\"quotes\\\""));
+    assert!(json.contains("newlines\\n"));
+    assert!(json.contains("\\\\backslashes\\\\"));
+
+    let deserialized = Event::deserialize(json);
+    assert_eq!(deserialized.message, msg);
+    assert_eq!(deserialized.target, target);
+  }
+
+  #[test]
+  fn test_event_multiple_clone_and_modify() {
+    let event = Event::new(
+      1,
+      "INFO".to_string(),
+      "Original".to_string(),
+      "target1".to_string(),
+    );
+    let mut clone1 = event.clone();
+    let mut clone2 = clone1.clone();
+
+    // Modify clones
+    clone1.message = "Modified1".to_string();
+    clone2.message = "Modified2".to_string();
+
+    assert_eq!(event.message, "Original");
+    assert_eq!(clone1.message, "Modified1");
+    assert_eq!(clone2.message, "Modified2");
+  }
+
+  #[test]
+  fn test_event_json_round_trip_with_special_chars() {
+    let msg = "Special chars: \t\n\"\\";
+    let event = Event::new(
+      999,
+      "WARN".to_string(),
+      msg.to_string(),
+      "target".to_string(),
+    );
+
+    let json = event.serialize();
+    let deserialized = Event::deserialize(json.clone());
+    let reserialized = deserialized.serialize();
+
+    assert_eq!(json, reserialized);
+    assert_eq!(deserialized.message, msg);
+  }
+
+  #[test]
+  fn test_event_display_matches_serialize() {
+    let event = Event::new(
+      555,
+      "ERROR".to_string(),
+      "Display test".to_string(),
+      "display_target".to_string(),
+    );
+    assert_eq!(event.serialize(), format!("{}", event));
   }
 }
diff --git a/ttlog/src/event/mod.rs b/ttlog/src/event/mod.rs
index 373362f..ac31d24 100644
--- a/ttlog/src/event/mod.rs
+++ b/ttlog/src/event/mod.rs
@@ -2,24 +2,82 @@ mod __test__;
 
 use serde::{Deserialize, Serialize};
 
+/// Defines the severity or importance level of an event.
+///
+/// This enum can be used to categorize events based on their significance.
+/// The levels are commonly ordered from the most detailed to the most severe:
+/// `Trace < Debug < Info < Warn < Error`.
 #[derive(Debug, Clone, Serialize, Deserialize)]
 pub enum Level {
+  /// Very detailed information, mostly useful for debugging
   Trace,
+  /// Debug-level information, used for development or troubleshooting
   Debug,
+  /// General informational messages, typically useful in production
   Info,
+  /// Warning messages that indicate potential issues
   Warn,
+  /// Error messages that indicate a failure or critical problem
   Error,
 }
 
+/// Represents an event with a timestamp, severity level, message, and target.
+///
+/// `Event` is a versatile structure that can be serialized and deserialized,
+/// making it suitable for storage, transmission, and analysis in systems
+/// where event tracking or monitoring is required.
 #[derive(Debug, Clone, Serialize, Deserialize)]
 pub struct Event {
+  /// The timestamp of the event, in milliseconds since the Unix epoch (January 1, 1970).
+  ///
+  /// This field allows events to be ordered chronologically or correlated
+  /// with other events in a system.
   pub timestamp: u64,
+
+  /// The severity level of the event as a string (e.g., `"INFO"`, `"WARN"`).
+  ///
+  /// This field indicates the importance of the event. While a `Level` enum
+  /// exists, storing it as a string allows for compatibility with external
+  /// systems or logging frameworks.
   pub level: String,
+
+  /// The textual content or description of the event.
+  ///
+  /// This field should contain meaningful information describing what
+  /// happened, why, or any other contextual data useful for analysis.
   pub message: String,
+
+  /// The source or target of the event.
+  ///
+  /// This can represent a module name, component identifier, or system
+  /// element associated with the event. Helps in filtering and routing events.
   pub target: String,
 }
 
 impl Event {
+  /// Creates a new `Event` with the provided timestamp, level, message, and target.
+  ///
+  /// # Arguments
+  /// * `timestamp` - Milliseconds since the Unix epoch representing the event time.
+  /// * `level` - String indicating the severity of the event.
+  /// * `message` - Description or content of the event.
+  /// * `target` - Source or target system/component of the event.
+  ///
+  /// # Returns
+  /// A new `Event` instance populated with the provided values.
+  ///
+  /// # Example
+  ///
+  /// ```rust
+  /// use ttlog::event::Event;
+  /// let event = Event::new(
+  ///     1_692_105_600_000u64,
+  ///     "INFO".to_string(),
+  ///     "User logged in".to_string(),
+  ///     "auth_module".to_string(),
+  /// );
+  /// assert_eq!(event.level, "INFO");
+  /// ```
   pub fn new(timestamp: u64, level: String, message: String, target: String) -> Self {
     Self {
       timestamp,
@@ -29,22 +87,87 @@ impl Event {
     }
   }
 
+  /// Serializes the `Event` into a JSON string.
+  ///
+  /// Useful for storing, sending, or logging events in a standard format.
+  ///
+  /// # Panics
+  /// This function will panic if serialization fails. In production systems,
+  /// ensure the data can be serialized or handle errors using a custom wrapper.
+  ///
+  /// # Example
+  ///
+  /// ```rust
+  /// use ttlog::event::Event;
+  /// let event = Event::new(123, "INFO".to_string(), "Hello".to_string(), "main".to_string());
+  /// let json = event.serialize();
+  /// assert!(json.contains("\"timestamp\":123"));
+  /// ```
   pub fn serialize(&self) -> String {
     serde_json::to_string(self).expect("Failed to serialize")
   }
 
+  /// Deserializes a JSON string into an `Event`.
+  ///
+  /// # Arguments
+  /// * `json` - JSON string representing an `Event`.
+  ///
+  /// # Panics
+  /// This function will panic if deserialization fails due to invalid JSON
+  /// or mismatched structure.
+  ///
+  /// # Example
+  ///
+  /// ```rust
+  /// use ttlog::event::Event;
+  /// let json = r#"{"timestamp":123,"level":"INFO","message":"Hello","target":"main"}"#.to_string();
+  /// let event = Event::deserialize(json);
+  /// assert_eq!(event.level, "INFO");
+  /// ```
   pub fn deserialize(json: String) -> Self {
     serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
   }
 }
 
 impl Default for Event {
+  /// Returns a default `Event` with zero timestamp and empty strings.
+  ///
+  /// Useful for creating placeholder events or initializing structures
+  /// before populating them with real data.
+  ///
+  /// # Example
+  ///
+  /// ```rust
+  /// use ttlog::event::Event;
+  /// let default_event = Event::default();
+  /// assert_eq!(default_event.timestamp, 0);
+  /// assert_eq!(default_event.level, "");
+  /// ```
   fn default() -> Self {
     Self {
       timestamp: 0,
-      level: "".to_string(), // Level::Info,
+      level: "".to_string(),
       message: String::new(),
       target: String::new(),
     }
   }
 }
+
+impl std::fmt::Display for Event {
+  /// Formats the event as a JSON string.
+  ///
+  /// Allows `Event` instances to be printed directly using `println!` or
+  /// included in other formatted strings.
+  ///
+  /// # Example
+  ///
+  /// ```rust
+  /// use ttlog::event::Event;
+  /// let event = Event::default();
+  /// let s = format!("{}", event);
+  /// assert!(s.contains("\"timestamp\":0"));
+  /// ```
+  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+    write!(f, "{}", self.serialize())
+  }
+}

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "serde",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "fastrand"
version = "2.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "gethostname"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"
dependencies = [
 "libc",
 "windows-targets 0.48.5",
]

[[package]]
name = "getrandom"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
dependencies = [
 "cfg-if",
 "libc",
 "r-efi",
 "wasi 0.14.2+wasi-0.2.4",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi 0.11.1+wasi-snapshot-preview1",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "r-efi"
version = "5.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "tempfile"
version = "3.20.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
dependencies = [
 "fastrand",
 "getrandom",
 "once_cell",
 "rustix",
 "windows-sys 0.59.0",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tempfile",
 "tracing",
 "tracing-subscriber",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasi"
version = "0.14.2+wasi-0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
dependencies = [
 "wit-bindgen-rt",
]

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

[[package]]
name = "wit-bindgen-rt"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
dependencies = [
 "bitflags 2.9.1",
]

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapshotFile;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(format!("/tmp/{}.bin", file))?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::snapshot::Snapshot;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapshotFile {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Snapshot,
}

pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapshotFile> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Snapshot = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split('-').collect::<Vec<_>>();

    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, rest @ ..] => (prefix, pid, tsz, rest),
      _ => panic!("Expected at least 3 parts in filename"),
    };

    snapshots.push(SnapshotFile {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapshotFile;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapshotFile]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  for snap in snapshots {
    print_snapshot(snap);
  }
}
fn print_snapshot(snap: &SnapshotFile) {
  // Calculate max width for borders
  let mut all_lines: Vec<String> = Vec::new();
  all_lines.push(format!(
    "📦 {} ({})",
    snap.name,
    format_timestamp(&snap.create_at)
  ));
  all_lines.push(format!("📄 {}", snap.path));
  for event in &snap.data.events {
    all_lines.push(format!(
      "{} [{}] {}",
      icon_for_level(&event.level),
      event.level,
      event.message
    ));
  }

  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data.events {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };
    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "serde",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "fastrand"
version = "2.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"

[[package]]
name = "gethostname"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"
dependencies = [
 "libc",
 "windows-targets 0.48.5",
]

[[package]]
name = "getrandom"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
dependencies = [
 "cfg-if",
 "libc",
 "r-efi",
 "wasi",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "r-efi"
version = "5.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "tempfile"
version = "3.20.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
dependencies = [
 "fastrand",
 "getrandom",
 "once_cell",
 "rustix",
 "windows-sys 0.59.0",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tempfile",
 "tracing",
 "tracing-subscriber",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.14.2+wasi-0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
dependencies = [
 "wit-bindgen-rt",
]

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

[[package]]
name = "wit-bindgen-rt"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
dependencies = [
 "bitflags",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2021"

[dependencies]
chrono = { version = "0.4", features = ["serde"] }
lz4 = "1.28"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11"
serde_json = "1.0"
tracing = "0.1"
tracing-subscriber = "0.3"
crossbeam-channel = "0.5"
gethostname = "0.4"
tempfile = "3.8"

[dev-dependencies]
tempfile = "3.8"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod __test__ {

  use crate::buffer::RingBuffer;
  use crate::event::Event;

  #[test]
  fn test_ring_buffer_new() {
    let buffer: RingBuffer<i32> = RingBuffer::new(10);
    assert_eq!(buffer.capacity, 10);
    assert_eq!(buffer.len(), 0);
    assert!(buffer.is_empty());
  }

  #[test]
  fn test_ring_buffer_push_single() {
    let mut buffer = RingBuffer::new(5);
    buffer.push(42);

    assert_eq!(buffer.len(), 1);
    assert!(!buffer.is_empty());

    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![42]);
  }

  #[test]
  fn test_ring_buffer_push_multiple() {
    let mut buffer = RingBuffer::new(3);

    buffer.push(1);
    buffer.push(2);
    buffer.push(3);

    assert_eq!(buffer.len(), 3);
    assert_eq!(buffer.capacity, 3);

    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![1, 2, 3]);
  }

  #[test]
  fn test_ring_buffer_overflow() {
    let mut buffer = RingBuffer::new(3);

    buffer.push(1);
    buffer.push(2);
    buffer.push(3);
    buffer.push(4); // should evict 1

    assert_eq!(buffer.len(), 3);
    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![2, 3, 4]);

    buffer.push(5); // should evict 2
    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![3, 4, 5]);
  }

  #[test]
  fn test_ring_buffer_take_snapshot() {
    let mut buffer = RingBuffer::new(5);

    buffer.push(10);
    buffer.push(20);
    buffer.push(30);

    let snapshot = buffer.take_snapshot();
    assert_eq!(snapshot, vec![10, 20, 30]);
    assert!(buffer.is_empty());
    assert_eq!(buffer.len(), 0);
    assert_eq!(buffer.capacity, 5);
  }

  #[test]
  fn test_ring_buffer_take_snapshot_empty() {
    let mut buffer: RingBuffer<i32> = RingBuffer::new(5);

    let snapshot = buffer.take_snapshot();
    assert!(snapshot.is_empty());
    assert!(buffer.is_empty());
  }

  #[test]
  fn test_ring_buffer_iter() {
    let mut buffer = RingBuffer::new(4);

    buffer.push(1);
    buffer.push(2);
    buffer.push(3);

    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![1, 2, 3]);
  }

  #[test]
  fn test_ring_buffer_iter_empty() {
    let buffer: RingBuffer<i32> = RingBuffer::new(5);
    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert!(items.is_empty());
  }

  #[test]
  fn test_ring_buffer_with_events() {
    let mut buffer = RingBuffer::new(3);

    let event1 = Event::new(
      1000,
      "INFO".to_string(),
      "First".to_string(),
      "target1".to_string(),
    );
    let event2 = Event::new(
      2000,
      "WARN".to_string(),
      "Second".to_string(),
      "target2".to_string(),
    );
    let event3 = Event::new(
      3000,
      "ERROR".to_string(),
      "Third".to_string(),
      "target3".to_string(),
    );

    buffer.push(event1.clone());
    buffer.push(event2.clone());
    buffer.push(event3.clone());

    let events: Vec<Event> = buffer.iter().cloned().collect();
    assert_eq!(events.len(), 3);
    assert_eq!(events[0].message, "First");
    assert_eq!(events[1].message, "Second");
    assert_eq!(events[2].message, "Third");

    // Test overflow with events
    let event4 = Event::new(
      4000,
      "DEBUG".to_string(),
      "Fourth".to_string(),
      "target4".to_string(),
    );
    buffer.push(event4.clone());
    let events: Vec<Event> = buffer.iter().cloned().collect();
    assert_eq!(events.len(), 3);
    assert_eq!(events[0].message, "Second"); // First evicted
    assert_eq!(events[2].message, "Fourth");
  }

  // test: push and snapshot repeatedly
  #[test]
  fn test_ring_buffer_push_and_snapshot_repeatedly() {
    let mut buffer = RingBuffer::new(2);

    buffer.push(1);
    let snap1 = buffer.take_snapshot();
    assert_eq!(snap1, vec![1]);
    assert!(buffer.is_empty());

    buffer.push(2);
    buffer.push(3); // should evict 2 if buffer was filled previously
    let snap2 = buffer.take_snapshot();
    assert_eq!(snap2, vec![2, 3]);
    assert!(buffer.is_empty());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};
use std::collections::VecDeque;

/// A fixed-capacity ring buffer that stores items in insertion order.
///
/// When the buffer reaches its capacity, adding a new item
/// will automatically evict the oldest item.
///
/// # Type Parameters
/// * `T` - The type of the items stored in the buffer. Must implement `Clone`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  /// Internal storage for the buffer
  data: VecDeque<T>,

  /// Maximum number of items the buffer can hold
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  /// Creates a new empty ring buffer with the specified capacity.
  ///
  /// # Arguments
  /// * `capacity` - The maximum number of items the buffer can store.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let buffer: RingBuffer<i32> = RingBuffer::new(10);
  /// assert_eq!(buffer.len(), 0);
  /// ```
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  /// Adds a new item to the buffer.
  ///
  /// If the buffer is already at capacity, the oldest item is removed
  /// to make space for the new item.
  ///
  /// # Arguments
  /// * `item` - The item to add to the buffer.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(1);
  /// buffer.push(2);
  /// buffer.push(3); // evicts 1
  /// assert_eq!(buffer.len(), 2);
  /// ```
  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  /// Removes and returns all items currently in the buffer.
  ///
  /// This operation leaves the buffer empty but preserves its capacity,
  /// avoiding reallocations on future pushes.
  ///
  /// # Returns
  /// A `Vec<T>` containing all items in insertion order.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(3);
  /// buffer.push(1);
  /// buffer.push(2);
  /// let snapshot = buffer.take_snapshot();
  /// assert_eq!(snapshot, vec![1, 2]);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn take_snapshot(&mut self) -> Vec<T> {
    let old = std::mem::replace(&mut self.data, VecDeque::with_capacity(self.capacity));
    old.into_iter().collect()
  }

  /// Returns an iterator over the items currently in the buffer.
  ///
  /// Items are iterated in insertion order (oldest to newest).
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(10);
  /// buffer.push(20);
  /// for item in buffer.iter() {
  ///     println!("{}", item);
  /// }
  /// ```
  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }

  /// Returns the number of items currently in the buffer.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(2);
  /// assert_eq!(buffer.len(), 0);
  /// buffer.push(5);
  /// assert_eq!(buffer.len(), 1);
  /// ```
  pub fn len(&self) -> usize {
    self.data.len()
  }

  /// Returns `true` if the buffer is empty.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let buffer: RingBuffer<i32> = RingBuffer::new(2);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn is_empty(&self) -> bool {
    self.data.is_empty()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod __test__ {

  use crate::event::Event;

  #[test]
  fn test_event_creation() {
    let event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    assert_eq!(event.timestamp, 1234567890);
    assert_eq!(event.level, "INFO");
    assert_eq!(event.message, "Test message");
    assert_eq!(event.target, "test_target");
  }

  #[test]
  fn test_event_default() {
    let event = Event::default();

    assert_eq!(event.timestamp, 0);
    assert_eq!(event.level, "");
    assert_eq!(event.message, "");
    assert_eq!(event.target, "");
  }

  #[test]
  fn test_event_clone() {
    let event = Event::new(
      1234567890,
      "WARN".to_string(),
      "Warning message".to_string(),
      "warn_target".to_string(),
    );

    let cloned = event.clone();

    assert_eq!(event.timestamp, cloned.timestamp);
    assert_eq!(event.level, cloned.level);
    assert_eq!(event.message, cloned.message);
    assert_eq!(event.target, cloned.target);
  }

  #[test]
  fn test_event_serialization() {
    let event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    let json = event.serialize();
    assert!(json.contains("1234567890"));
    assert!(json.contains("INFO"));
    assert!(json.contains("Test message"));
    assert!(json.contains("test_target"));
  }

  #[test]
  fn test_event_deserialization() {
    let original_event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    let json = original_event.serialize();
    let deserialized_event = Event::deserialize(json);

    assert_eq!(original_event.timestamp, deserialized_event.timestamp);
    assert_eq!(original_event.level, deserialized_event.level);
    assert_eq!(original_event.message, deserialized_event.message);
    assert_eq!(original_event.target, deserialized_event.target);
  }

  #[test]
  fn test_event_display() {
    let event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Display test".to_string(),
      "display_target".to_string(),
    );

    let display_str = format!("{}", event);
    assert!(display_str.contains("1234567890"));
    assert!(display_str.contains("INFO"));
    assert!(display_str.contains("Display test"));
    assert!(display_str.contains("display_target"));
  }

  /// Helper to create events with different levels
  fn event_with_level(level: &str) -> Event {
    Event::new(
      1000,
      level.to_string(),
      "Level test".to_string(),
      "target".to_string(),
    )
  }

  #[test]
  fn test_event_all_levels() {
    let levels = ["Trace", "Debug", "Info", "Warn", "Error"];

    for &level in &levels {
      let event = event_with_level(level);
      assert_eq!(event.level, level);
      assert_eq!(event.message, "Level test");
      assert_eq!(event.target, "target");
    }
  }

  #[test]
  fn test_event_special_characters() {
    let msg = "Message with \"quotes\", newlines\n, and \\backslashes\\";
    let target = "target/with/special\\chars";
    let event = Event::new(
      123,
      "DEBUG".to_string(),
      msg.to_string(),
      target.to_string(),
    );

    let json = event.serialize();
    assert!(json.contains("\\\"quotes\\\""));
    assert!(json.contains("newlines\\n"));
    assert!(json.contains("\\\\backslashes\\\\"));

    let deserialized = Event::deserialize(json);
    assert_eq!(deserialized.message, msg);
    assert_eq!(deserialized.target, target);
  }

  #[test]
  fn test_event_multiple_clone_and_modify() {
    let event = Event::new(
      1,
      "INFO".to_string(),
      "Original".to_string(),
      "target1".to_string(),
    );
    let mut clone1 = event.clone();
    let mut clone2 = clone1.clone();

    // Modify clones
    clone1.message = "Modified1".to_string();
    clone2.message = "Modified2".to_string();

    assert_eq!(event.message, "Original");
    assert_eq!(clone1.message, "Modified1");
    assert_eq!(clone2.message, "Modified2");
  }

  #[test]
  fn test_event_json_round_trip_with_special_chars() {
    let msg = "Special chars: \t\n\"\\";
    let event = Event::new(
      999,
      "WARN".to_string(),
      msg.to_string(),
      "target".to_string(),
    );

    let json = event.serialize();
    let deserialized = Event::deserialize(json.clone());
    let reserialized = deserialized.serialize();

    assert_eq!(json, reserialized);
    assert_eq!(deserialized.message, msg);
  }

  #[test]
  fn test_event_display_matches_serialize() {
    let event = Event::new(
      555,
      "ERROR".to_string(),
      "Display test".to_string(),
      "display_target".to_string(),
    );
    assert_eq!(event.serialize(), format!("{}", event));
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

/// Defines the severity or importance level of an event.
///
/// This enum can be used to categorize events based on their significance.
/// The levels are commonly ordered from the most detailed to the most severe:
/// `Trace < Debug < Info < Warn < Error`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Level {
  /// Very detailed information, mostly useful for debugging
  Trace,
  /// Debug-level information, used for development or troubleshooting
  Debug,
  /// General informational messages, typically useful in production
  Info,
  /// Warning messages that indicate potential issues
  Warn,
  /// Error messages that indicate a failure or critical problem
  Error,
}

/// Represents an event with a timestamp, severity level, message, and target.
///
/// `Event` is a versatile structure that can be serialized and deserialized,
/// making it suitable for storage, transmission, and analysis in systems
/// where event tracking or monitoring is required.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  /// The timestamp of the event, in milliseconds since the Unix epoch (January 1, 1970).
  ///
  /// This field allows events to be ordered chronologically or correlated
  /// with other events in a system.
  pub timestamp: u64,

  /// The severity level of the event as a string (e.g., `"INFO"`, `"WARN"`).
  ///
  /// This field indicates the importance of the event. While a `Level` enum
  /// exists, storing it as a string allows for compatibility with external
  /// systems or logging frameworks.
  pub level: String,

  /// The textual content or description of the event.
  ///
  /// This field should contain meaningful information describing what
  /// happened, why, or any other contextual data useful for analysis.
  pub message: String,

  /// The source or target of the event.
  ///
  /// This can represent a module name, component identifier, or system
  /// element associated with the event. Helps in filtering and routing events.
  pub target: String,
}

impl Event {
  /// Creates a new `Event` with the provided timestamp, level, message, and target.
  ///
  /// # Arguments
  /// * `timestamp` - Milliseconds since the Unix epoch representing the event time.
  /// * `level` - String indicating the severity of the event.
  /// * `message` - Description or content of the event.
  /// * `target` - Source or target system/component of the event.
  ///
  /// # Returns
  /// A new `Event` instance populated with the provided values.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let event = Event::new(
  ///     1_692_105_600_000u64,
  ///     "INFO".to_string(),
  ///     "User logged in".to_string(),
  ///     "auth_module".to_string(),
  /// );
  /// assert_eq!(event.level, "INFO");
  /// ```
  pub fn new(timestamp: u64, level: String, message: String, target: String) -> Self {
    Self {
      timestamp,
      level,
      message,
      target,
    }
  }

  /// Serializes the `Event` into a JSON string.
  ///
  /// Useful for storing, sending, or logging events in a standard format.
  ///
  /// # Panics
  /// This function will panic if serialization fails. In production systems,
  /// ensure the data can be serialized or handle errors using a custom wrapper.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let event = Event::new(123, "INFO".to_string(), "Hello".to_string(), "main".to_string());
  /// let json = event.serialize();
  /// assert!(json.contains("\"timestamp\":123"));
  /// ```
  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  /// Deserializes a JSON string into an `Event`.
  ///
  /// # Arguments
  /// * `json` - JSON string representing an `Event`.
  ///
  /// # Panics
  /// This function will panic if deserialization fails due to invalid JSON
  /// or mismatched structure.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let json = r#"{"timestamp":123,"level":"INFO","message":"Hello","target":"main"}"#.to_string();
  /// let event = Event::deserialize(json);
  /// assert_eq!(event.level, "INFO");
  /// ```
  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

impl Default for Event {
  /// Returns a default `Event` with zero timestamp and empty strings.
  ///
  /// Useful for creating placeholder events or initializing structures
  /// before populating them with real data.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let default_event = Event::default();
  /// assert_eq!(default_event.timestamp, 0);
  /// assert_eq!(default_event.level, "");
  /// ```
  fn default() -> Self {
    Self {
      timestamp: 0,
      level: "".to_string(),
      message: String::new(),
      target: String::new(),
    }
  }
}

impl std::fmt::Display for Event {
  /// Formats the event as a JSON string.
  ///
  /// Allows `Event` instances to be printed directly using `println!` or
  /// included in other formatted strings.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let event = Event::default();
  /// let s = format!("{}", event);
  /// assert!(s.contains("\"timestamp\":0"));
  /// ```
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    write!(f, "{}", self.serialize())
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod snapshot;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};

  use std::{
    fs, panic,
    sync::{Arc, Mutex},
  };

  #[test]
  fn test_panic_hook_creates_snapshot_file() {
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
    PanicHook::install(buffer.clone());

    let result = panic::catch_unwind(|| {
      panic!("Trigger panic for testing hook");
    });

    assert!(result.is_err(), "Expected a panic");

    // Check /tmp for any file created by flush_snapshot
    let entries: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
      .collect();

    assert!(
      !entries.is_empty(),
      "Expected a snapshot file to be created"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
use std::thread;

use crate::trace::Message;
use chrono::Duration;
use crossbeam_channel::Sender;

/// `
/// PanicHook` is a utility for installing a custom panic hook in Rust programs.
///
/// When a panic occurs, this hook captures the panic information and requests
/// an immediate snapshot to be sent via a `crossbeam_channel::Sender<Message>`.
/// This is useful in tracing or logging systems to capture the state of the
/// application at the moment of a panic.
///
/// # Example
///
/// ```rust
/// use crossbeam_channel::unbounded;
/// use crate::trace::Message;
/// use crate::PanicHook;
///
/// let (sender, receiver) = unbounded();
///
/// // Install the panic hook
/// PanicHook::install(sender.clone());
///
/// // Trigger a panic to test
/// std::panic::panic_any("something went wrong");
/// ```
///
/// The hook will attempt to send a `Message::SnapshotImmediate` containing
/// the reason `"panic"` without blocking.
pub struct PanicHook {}

impl PanicHook {
  /// Installs a panic hook that requests an immediate snapshot when a panic occurs.
  ///
  /// # Parameters
  ///
  /// - `sender`: A `crossbeam_channel::Sender<Message>` used to request the snapshot.
  ///   The hook will use `try_send` to avoid blocking the panic unwinding process.
  ///
  /// # Behavior
  ///
  /// When a panic occurs:
  /// 1. The panic information (`std::panic::PanicInfo`) is printed to stderr.
  /// 2. A `Message::SnapshotImmediate("panic")` is sent through the provided sender.
  ///    If sending fails (e.g., channel is full or closed), the error is ignored.
  pub fn install(sender: Sender<Message>) {
    std::panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);

      // Send snapshot request
      if let Err(e) = sender.send(Message::SnapshotImmediate("panic".to_string())) {
        eprintln!("[Panic] Failed to send snapshot request: {:?}", e);
        return;
      }

      eprintln!("[Panic] Snapshot request sent, waiting for completion...");

      eprintln!("[Panic] Panic hook completed");
    }));
  }
}

----- FILE: ttlog/src/snapshot/mod.rs -----
use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use serde::{Deserialize, Serialize};
use std::fs::{self, File};
use std::io::Write;

use crate::buffer::RingBuffer;
use crate::event::Event;

// wrap metadata + events
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Snapshot {
  pub service: String,
  pub hostname: String,
  pub pid: u32,
  pub created_at: String,
  pub reason: String,
  pub events: Vec<Event>,
}
/// Responsible for creating snapshots from a ring buffer and writing them to disk.
pub struct SnapshotWriter {
  service: String,
}

impl SnapshotWriter {
  /// Creates a new `SnapshotWriter` for a given service name.
  pub fn new(service: impl Into<String>) -> Self {
    Self {
      service: service.into(),
    }
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// A `Snapshot` struct containing all events and metadata.
  pub fn create_snapshot(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Option<Snapshot> {
    let events = ring.take_snapshot();
    if events.is_empty() {
      return None;
    }

    let hostname = gethostname::gethostname().to_string_lossy().into_owned();
    let pid = std::process::id();
    let created_at = Utc::now().format("%Y%m%d%H%M%S").to_string();

    Some(Snapshot {
      service: self.service.clone(),
      hostname,
      pid,
      created_at,
      reason: reason.into(),
      events,
    })
  }

  /// Serialize a snapshot to CBOR, compress with LZ4, and write it atomically to disk.
  ///
  /// # Parameters
  /// - `snapshot`: The snapshot to serialize and write.
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
    // Serialize CBOR
    let cbor_buff = serde_cbor::to_vec(&snapshot)?;
    // Compress
    let compressed = compress(&cbor_buff, Some(CompressionMode::DEFAULT), true)?;

    // Build filename and write atomically
    let filename = format!(
      "/tmp/ttlog-{}-{}-{}.bin",
      snapshot.pid, snapshot.created_at, snapshot.reason
    );
    let tmp = format!("{}.tmp", &filename);

    {
      let mut f = File::create(&tmp)?;
      f.write_all(&compressed)?;
      f.sync_all()?;
    }
    fs::rename(&tmp, &filename)?;
    eprintln!(
      "[Snapshot] Saved {} events to {}",
      snapshot.events.len(),
      filename
    );
    Ok(())
  }

  /// Take a snapshot from the ring buffer, capturing metadata and events.
  /// If a snapshot is created, write it to disk.
  ///
  /// # Parameters
  /// - `ring`: The ring buffer containing events.
  /// - `reason`: Reason for taking the snapshot (for logging/audit).
  ///
  /// # Returns
  /// `Ok(())` if successful, otherwise an error.
  pub fn snapshot_and_write(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Result<(), Box<dyn std::error::Error>> {
    if let Some(snapshot) = self.create_snapshot(ring, reason) {
      self.write_snapshot(&snapshot)
    } else {
      println!("[Snapshot] No events to snapshot");
      Ok(())
    }
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};

  use std::{
    fs,
    sync::{Arc, Mutex},
  };
  use tracing::{info, subscriber::with_default};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  /// Helper to initialize Trace locally for tests
  fn init_local_trace(capacity: usize) -> Trace {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);

    // Activate subscriber for this thread only
    with_default(subscriber, || {
      // Tracing macros will log to this layer in this scope
    });

    Trace { buffer }
  }

  #[test]
  fn trace_init_and_log() {
    let trace = init_local_trace(5);

    // Log some events inside a local subscriber scope
    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        info!("First event");
        info!("Second event");
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert!(messages.contains(&"First event".to_string()));
    assert!(messages.contains(&"Second event".to_string()));
  }

  #[test]
  fn trace_buffer_wraparound() {
    let trace = init_local_trace(3);

    with_default(
      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
      || {
        for i in 0..5 {
          info!("Event {}", i);
        }
      },
    );

    let buf = trace.buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain

    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
  }

  #[test]
  fn test_flush_snapshot_creates_file() {
    // 1. Create a buffer and populate it with dummy events
    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));

    {
      let mut buf_lock = buffer.lock().unwrap();
      // Add some dummy events
      buf_lock.push(Event::new(
        12345,
        "event1".to_string(),
        "message1".to_string(),
      ));
      buf_lock.push(Event::new(
        12345,
        "event2".to_string(),
        "message2".to_string(),
      ));
    }

    // 2. Call flush_snapshot
    Trace::flush_snapshot(buffer.clone(), "test");

    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
    let pid = std::process::id().to_string();
    let files: Vec<_> = fs::read_dir("/tmp")
      .unwrap()
      .filter_map(|e| e.ok())
      .filter(|e| {
        let name = e.file_name().to_string_lossy().to_string();
        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
      })
      .collect();

    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");

    // Optional: remove created files after test
    for f in files {
      let _ = fs::remove_file(f.path());
    }
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Duration;
use std::thread;
use std::time::Instant;
use tracing_subscriber::layer::SubscriberExt;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::snapshot::SnapshotWriter;
use crate::trace_layer::BufferLayer;

use crossbeam_channel::{bounded, Receiver, Sender};

pub struct Trace {
  sender: Sender<Message>,
}

#[derive(Debug)]
pub enum Message {
  Event(Event),
  SnapshotImmediate(String), // reason
  FlushAndExit,              // optional: for graceful shutdown in tests
}

impl Trace {
  /// Initializes the tracing/logging system with a bounded channel and a writer thread.
  ///
  /// # Parameters
  /// - `capacity`: The maximum number of messages the ring buffer can hold.
  /// - `channel_capacity`: The maximum number of messages the channel can buffer before blocking.
  ///
  /// # Behavior
  /// - Spawns a dedicated writer thread that reads messages from the channel and writes them into the ring buffer.
  /// - Creates a `BufferLayer` that intercepts tracing events and sends them to the channel.
  /// - Registers the `BufferLayer` with the global tracing subscriber. If a subscriber is already set, the error is ignored.
  ///
  /// # Returns
  /// Returns an instance containing the sender, which can be used to send messages to the buffer asynchronously.
  ///
  /// # Example
  /// ```rust
  /// let trace_system = Trace::init(1024, 128);
  /// trace_system.sender.send(Message::new("test")).unwrap();
  /// ```
  pub fn init(capacity: usize, channel_capacity: usize) -> Self {
    let (sender, receiver) = bounded::<Message>(channel_capacity);

    // Spawn writer thread which owns the ring buffer
    thread::spawn(move || Trace::writer_loop(receiver, capacity));

    // Create and register BufferLayer using the sender
    let layer = BufferLayer::new(sender.clone());
    let subscriber = tracing_subscriber::Registry::default().with(layer);
    let _ = tracing::subscriber::set_global_default(subscriber); // ignore error if already set

    Self { sender }
  }

  /// Returns a clone of the sender used to send messages into the tracing buffer.
  ///
  /// This allows other threads or components to asynchronously send `Message`s
  /// (events or snapshot requests) to the writer thread.
  ///
  /// # Example
  /// ```rust
  /// let sender = trace_system.get_sender();
  /// sender.send(Message::Event(my_event)).unwrap();
  /// ```
  pub fn get_sender(&self) -> Sender<Message> {
    self.sender.clone()
  }

  /// Requests an immediate snapshot of the current ring buffer.
  ///
  /// Sends a `SnapshotImmediate` message into the channel. The `reason` is included
  /// in the snapshot metadata for logging or debugging purposes.
  ///
  /// If the channel is full, the request is ignored.
  ///
  /// # Parameters
  /// - `reason`: A string describing why the snapshot was requested.
  ///
  /// # Example
  /// ```rust
  /// trace_system.request_snapshot("manual_debug_snapshot");
  /// ```
  pub fn request_snapshot(&self, reason: &str) {
    let _ = self
      .sender
      .try_send(Message::SnapshotImmediate(reason.to_string()));
  }

  /// The main writer loop that runs on a dedicated thread.
  ///
  /// This function continuously receives messages from the channel and:
  /// - Stores events in a ring buffer.
  /// - Writes immediate snapshots when requested.
  /// - Flushes and exits when requested.
  /// - Performs periodic flushes every 60 seconds.
  ///
  /// # Parameters
  /// - `receiver`: The channel receiver used to receive messages from other threads.
  /// - `capacity`: The size of the ring buffer to store incoming events.
  ///
  /// # Notes
  /// - This function is intended to run on a separate thread.
  /// - Snapshots are written using `snapshot_and_write`.
  fn writer_loop(receiver: Receiver<Message>, capacity: usize) {
    let mut ring = RingBuffer::new(capacity);
    let mut last_periodic = Instant::now();
    // you can set a periodic flush interval
    let periodic_flush_interval = Duration::seconds(60).to_std().unwrap();

    let service = SnapshotWriter::new("ttlog");

    while let Ok(msg) = receiver.recv() {
      match msg {
        Message::Event(ev) => {
          ring.push(ev);
        },
        Message::SnapshotImmediate(reason) => {
          if !ring.is_empty() {
            if let Err(e) = service.snapshot_and_write(&mut ring, reason) {
              eprintln!("[Snapshot] failed: {}", e);
            }
          } else {
            eprintln!(
              "[Snapshot] buffer empty, skipping snapshot (reason={})",
              reason
            );
          }
        },
        Message::FlushAndExit => {
          if !ring.is_empty() {
            let _ = service.snapshot_and_write(&mut ring, "flush_and_exit".to_string());
          }
          break;
        },
      }

      // periodic flush
      if last_periodic.elapsed() >= periodic_flush_interval && !ring.is_empty() {
        let _ = service.snapshot_and_write(&mut ring, "periodic".to_string());
        last_periodic = Instant::now();
      }
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::buffer::RingBuffer;
  use crate::trace_layer::BufferLayer;

  use std::sync::{Arc, Mutex};
  use tracing::{info, Dispatch};
  use tracing_subscriber::layer::SubscriberExt;
  use tracing_subscriber::Registry;

  #[test]
  fn single_event_pushes_to_buffer() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("Hello world");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
  }

  #[test]
  fn concurrent_logging() {
    use std::sync::Arc;
    use std::thread;
    use tracing::{dispatcher, info};
    use tracing_subscriber::{layer::SubscriberExt, Registry};

    let capacity = 1000;
    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
    let layer = BufferLayer::new(buffer.clone());

    // Wrap subscriber in Arc so threads can share it
    let subscriber = Arc::new(Registry::default().with(layer));

    let threads: Vec<_> = (0..10)
      .map(|t| {
        let disp = Dispatch::from(subscriber.clone());
        thread::spawn(move || {
          // Each thread sets the subscriber locally
          dispatcher::with_default(&disp, || {
            for i in 0..500 {
              info!("Thread {} - {}", t, i);
            }
          });
        })
      })
      .collect();

    for t in threads {
      t.join().unwrap();
    }

    // Lock buffer and check results
    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);

    // Optional: print first 5 events to verify
    // for event in buf.iter().take(5) {
    //   println!("{:?}", event);
    // }
  }

  #[test]
  fn empty_message_logged() {
    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
    let layer = BufferLayer::new(buffer.clone());

    let subscriber = Registry::default().with(layer);
    tracing::subscriber::with_default(subscriber, || {
      info!("");
    });

    let buf = buffer.lock().unwrap();
    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
    assert_eq!(buf.iter().next().unwrap().message, "");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
use crate::{event::Event, trace::Message};
use chrono::Utc;
use crossbeam_channel::{Sender, TrySendError};
use tracing::field::Visit;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

/// `BufferLayer` is a `tracing` layer that captures tracing events and
/// forwards them to a channel for asynchronous processing.
///
/// This layer converts a `tracing::Event` into a minimal `Event` struct
/// containing only the timestamp, log level, and message, and sends it
/// to a `crossbeam_channel::Sender<Message>`.
///
/// # Design
/// - Non-blocking: uses `try_send` to avoid slowing down the tracing hot path.
/// - Drops events if the channel is full to prevent blocking.
/// - Handles disconnected channels gracefully.
#[derive(Debug, Clone)]
pub struct BufferLayer {
  /// Channel sender used to forward captured events.
  sender: Sender<Message>,
}

impl BufferLayer {
  /// Creates a new `BufferLayer` that will send events to the given channel.
  ///
  /// # Parameters
  /// - `sender`: A `crossbeam_channel::Sender<Message>` to forward captured events.
  pub fn new(sender: Sender<Message>) -> Self {
    Self { sender }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  /// Called for every tracing event.
  ///
  /// Converts the event into a minimal `Event` (timestamp + level + message)
  /// and attempts to send it through the channel. Drops the event if the
  /// channel is full, or logs an error if the channel is disconnected.
  ///
  /// # Parameters
  /// - `event`: The `tracing::Event` being recorded.
  /// - `_ctx`: The subscriber context (unused in this implementation).
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    // Capture timestamp and level
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract the message field using a visitor
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());
    let target = event.metadata().target().to_string();

    // Build a minimal Event
    let new_event = Event::new(ts, level, message, target);

    // Attempt non-blocking send; drop if channel full
    match self.sender.try_send(Message::Event(new_event)) {
      Ok(_) => {},
      Err(err) => match err {
        TrySendError::Full(_) => {
          // Optional: increment a dropped-events counter here
        },
        TrySendError::Disconnected(_) => {
          // Writer thread died; log error
          eprintln!("[BufferLayer] writer thread disconnected");
        },
      },
    }
  }
}

/// `MessageVisitor` is a helper struct used to extract a string message
/// from structured tracing fields.
///
/// This is typically used when subscribing to tracing events and you want
/// to capture a specific field (like a message) from the event in a uniform way.
#[derive(Default)]
struct MessageVisitor {
  /// Stores the captured message from the tracing field.
  pub message: Option<String>,
}

impl Visit for MessageVisitor {
  /// Records a string field from a tracing event.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The string value to record.
  ///
  /// # Behavior
  /// Stores the string value in the `message` field, replacing any previous value.
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  /// Records a field that implements the `Debug` trait.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The value to record, formatted using `Debug`.
  ///
  /// # Behavior
  /// Converts the value to a string using `format!("{:?}", value)` and stores it
  /// in the `message` field, replacing any previous value.
  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

======================================================================
Commit: bc9e2eca4edb3ec68e694cb13546f763d5c62588
Author: wildduck2 <wezonaser50@gmail.com>
Date:   2025-08-15 01:05:13 +0300
Message:
Add snapshot tests and improve panic/trace handling

- Added new `snapshot/__test__/mod.rs` for snapshot module coverage
- Enhanced panic_hook logic and updated related tests
- Improved snapshot module structure and reliability
- Refined trace and trace_layer modules with better test coverage
- Added root Cargo.toml and MAKEFILE_README.md for project configuration and documentation


---- DIFF ----
diff --git a/ttlog/src/panic_hook/__test__/mod.rs b/ttlog/src/panic_hook/__test__/mod.rs
index 173b1ac..6dc3ea8 100644
--- a/ttlog/src/panic_hook/__test__/mod.rs
+++ b/ttlog/src/panic_hook/__test__/mod.rs
@@ -1,33 +1,348 @@
 #[cfg(test)]
 mod tests {
-  use crate::{buffer::RingBuffer, event::Event, panic_hook::PanicHook};
+  use crate::panic_hook::PanicHook;
+  use crate::trace::{Message, Trace};
+  use crossbeam_channel::{bounded, RecvTimeoutError};
+  use std::{panic, thread, time::Duration};
 
-  use std::{
-    fs, panic,
-    sync::{Arc, Mutex},
-  };
+  /// Start a background thread that drains the receiver for a short while.
+  /// This prevents the panic hook's blocking `send` from deadlocking tests.
+  fn start_drain_thread(receiver: crossbeam_channel::Receiver<Message>) -> thread::JoinHandle<()> {
+    thread::spawn(move || loop {
+      match receiver.recv_timeout(Duration::from_millis(500)) {
+        Ok(_msg) => {
+          // keep draining
+          continue;
+        },
+        Err(RecvTimeoutError::Timeout) => break,
+        Err(RecvTimeoutError::Disconnected) => break,
+      }
+    })
+  }
+
+  /// Verifies that `PanicHook::install` can be called without panicking.
+  #[test]
+  fn test_panic_hook_install() {
+    let (sender, _receiver) = bounded::<Message>(10);
+    PanicHook::install(sender);
+  }
+
+  /// Checks that a panic triggers the hook (catch_unwind may prevent execution of hook).
+  #[test]
+  fn test_panic_hook_message_sending() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let result = panic::catch_unwind(|| panic!("Test panic for hook"));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Ensures the hook handles a disconnected channel gracefully.
+  #[test]
+  fn test_panic_hook_with_disconnected_channel() {
+    let (sender, receiver) = bounded::<Message>(10);
+    // Drop receiver to simulate disconnected channel; send should return Err in hook.
+    drop(receiver);
+    PanicHook::install(sender);
+
+    let result = panic::catch_unwind(|| panic!("Test panic with disconnected channel"));
+    assert!(result.is_err());
+  }
 
+  /// Verifies that multiple installations override previous hooks.
   #[test]
-  fn test_panic_hook_creates_snapshot_file() {
-    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
-    PanicHook::install(buffer.clone());
+  fn test_panic_hook_multiple_installations() {
+    let (sender1, receiver1) = bounded::<Message>(10);
+    let (sender2, receiver2) = bounded::<Message>(10);
+
+    // Drain both receivers so hook send won't block
+    let h1 = start_drain_thread(receiver1);
+    let h2 = start_drain_thread(receiver2);
+
+    PanicHook::install(sender1);
+    PanicHook::install(sender2);
+
+    let _ = h1.join();
+    let _ = h2.join();
+  }
+
+  /// Tests integration with a `Trace` system.
+  #[test]
+  fn test_panic_hook_integration_with_trace() {
+    let trace_system = Trace::init(100, 10);
+
+    // If Trace::init has internal receivers, we assume it manages them.
+    // Still, to be safe, create a test channel and drain it (won't interfere).
+    let (_test_sender, test_receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(test_receiver);
+
+    PanicHook::install(trace_system.get_sender());
+
+    tracing::info!("Pre-panic event");
+
+    let result = panic::catch_unwind(|| panic!("Integration test panic"));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Tests the hook with different panic payload types.
+  #[test]
+  fn test_panic_hook_with_various_panic_types() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let results = vec![
+      panic::catch_unwind(|| panic!("String panic")),
+      panic::catch_unwind(|| panic!("{}", "Formatted panic")),
+      panic::catch_unwind(|| panic!("{}", 42)),
+      panic::catch_unwind(|| panic!("{:?}", vec![1, 2, 3])),
+    ];
+
+    for result in results {
+      assert!(result.is_err());
+    }
+
+    let _ = drain.join();
+  }
+
+  /// Tests the hook with `panic_any` and custom payloads.
+  #[test]
+  fn test_panic_hook_with_custom_panic_info() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let result = panic::catch_unwind(|| panic::panic_any("Custom panic payload"));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Ensures thread safety by panicking in multiple threads.
+  #[test]
+  fn test_panic_hook_thread_safety() {
+    let (sender, receiver) = bounded::<Message>(100);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let handles: Vec<_> = (0..5)
+      .map(|id| {
+        thread::spawn(move || {
+          if id % 2 == 0 {
+            panic!("Thread {} panic", id)
+          } else {
+            id
+          }
+        })
+      })
+      .collect();
+
+    for handle in handles {
+      let _ = handle.join();
+    }
+
+    let _ = drain.join();
+  }
+
+  /// Tests nested panics to ensure stability.
+  #[test]
+  fn test_panic_hook_with_nested_panics() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
 
     let result = panic::catch_unwind(|| {
-      panic!("Trigger panic for testing hook");
+      let _ = panic::catch_unwind(|| panic!("Inner panic"));
+      panic!("Outer panic");
     });
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
 
-    assert!(result.is_err(), "Expected a panic");
+  /// Simulates long panic messages.
+  #[test]
+  fn test_panic_hook_with_long_panic_messages() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
 
-    // Check /tmp for any file created by flush_snapshot
-    let entries: Vec<_> = fs::read_dir("/tmp")
-      .unwrap()
-      .filter_map(|e| e.ok())
-      .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
-      .collect();
+    let long_message = "A".repeat(10000);
+    let result = panic::catch_unwind(|| panic!("{}", long_message));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Tests panic messages with Unicode characters.
+  #[test]
+  fn test_panic_hook_with_unicode_messages() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let result = panic::catch_unwind(|| panic!("Unicode panic: 🚀 🎉 💻"));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Tests panic messages containing special characters.
+  #[test]
+  fn test_panic_hook_with_special_characters() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let result = panic::catch_unwind(|| panic!("Special chars: \"quotes\" and \n newlines"));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Tests numeric panic payloads with `panic_any`.
+  #[test]
+  fn test_panic_hook_with_numeric_payloads() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let results = vec![
+      panic::catch_unwind(|| panic::panic_any(42u32)),
+      panic::catch_unwind(|| panic::panic_any(3.14f64)),
+      panic::catch_unwind(|| panic::panic_any(-1i32)),
+    ];
+
+    for result in results {
+      assert!(result.is_err());
+    }
+
+    let _ = drain.join();
+  }
+
+  /// Tests panic payloads containing collections.
+  #[test]
+  fn test_panic_hook_with_collection_payloads() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let results = vec![
+      panic::catch_unwind(|| panic::panic_any(vec![1, 2, 3])),
+      panic::catch_unwind(|| panic::panic_any(["a", "b", "c"])),
+      panic::catch_unwind(|| panic::panic_any(std::collections::HashMap::<i32, i32>::new())),
+    ];
+
+    for result in results {
+      assert!(result.is_err());
+    }
+
+    let _ = drain.join();
+  }
+
+  /// Tests panic payloads with custom error types.
+  #[test]
+  fn test_panic_hook_with_custom_error_types() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    #[derive(Debug)]
+    struct CustomError {
+      #[allow(dead_code)]
+      message: String,
+      #[allow(dead_code)]
+      code: u32,
+    }
+
+    let custom_error = CustomError {
+      message: "Error".into(),
+      code: 42,
+    };
+    let result = panic::catch_unwind(|| panic::panic_any(custom_error));
+    assert!(result.is_err());
+
+    let _ = drain.join();
+  }
+
+  /// Tests panic payloads with standard error types.
+  #[test]
+  fn test_panic_hook_with_std_error_types() {
+    let (sender, receiver) = bounded::<Message>(10);
+    let drain = start_drain_thread(receiver);
+    PanicHook::install(sender);
+
+    let results = vec![
+      panic::catch_unwind(|| {
+        panic::panic_any(std::io::Error::new(
+          std::io::ErrorKind::NotFound,
+          "File not found",
+        ))
+      }),
+      panic::catch_unwind(|| panic::panic_any(std::fmt::Error)),
+    ];
+
+    for result in results {
+      assert!(result.is_err());
+    }
+
+    let _ = drain.join();
+  }
+
+  #[test]
+  fn test_panic_hook_with_full_channel() {
+    use crossbeam_channel::{bounded, RecvTimeoutError};
+    use std::time::Duration;
+
+    // capacity 1, fill the channel so it's full
+    let (sender, receiver) = bounded::<Message>(1);
+    sender
+      .send(Message::SnapshotImmediate("pre".to_string()))
+      .unwrap();
+
+    // readiness channel to ensure receiver drained the prefilled slot
+    let (ready_tx, ready_rx) = bounded::<()>(1);
+
+    let recv_handle = std::thread::spawn(move || {
+      let _ = receiver.recv().unwrap(); // drain prefilled
+      let _ = ready_tx.send(()); // notify main thread
+
+      // wait for panic hook message (timeout avoids hanging)
+      match receiver.recv_timeout(Duration::from_secs(2)) {
+        Ok(msg) => Some(msg),
+        Err(RecvTimeoutError::Timeout) => None,
+        Err(RecvTimeoutError::Disconnected) => None,
+      }
+    });
+
+    // Wait for receiver to drain the prefilled slot
+    ready_rx
+      .recv_timeout(Duration::from_secs(1))
+      .expect("receiver did not drain prefilled slot in time");
+
+    // Save the previous global panic hook and restore it later
+    let previous_hook = std::panic::take_hook();
+
+    // Install our hook (moves sender into it)
+    PanicHook::install(sender);
+
+    // Trigger the panic (inside catch_unwind so test runner continues)
+    let result = panic::catch_unwind(|| panic!("Test panic with full channel"));
+    assert!(result.is_err());
+
+    // Restore previous hook so other tests are unaffected
+    std::panic::set_hook(previous_hook);
 
+    // Join receiver and assert we got the snapshot
+    let received = recv_handle.join().expect("receiver thread panicked");
     assert!(
-      !entries.is_empty(),
-      "Expected a snapshot file to be created"
+      received.is_some(),
+      "expected to receive the snapshot from panic hook"
     );
   }
 }
diff --git a/ttlog/src/panic_hook/mod.rs b/ttlog/src/panic_hook/mod.rs
index 1e43b51..3c72ba5 100644
--- a/ttlog/src/panic_hook/mod.rs
+++ b/ttlog/src/panic_hook/mod.rs
@@ -1,23 +1,24 @@
-use std::thread;
+mod __test__;
 
 use crate::trace::Message;
+
 use chrono::Duration;
 use crossbeam_channel::Sender;
+use std::thread;
 
-/// `
-/// PanicHook` is a utility for installing a custom panic hook in Rust programs.
+/// `PanicHook` is a utility for installing a custom panic hook in Rust programs.
 ///
-/// When a panic occurs, this hook captures the panic information and requests
-/// an immediate snapshot to be sent via a `crossbeam_channel::Sender<Message>`.
+/// When a panic occurs, this hook captures the panic information and attempts
+/// to send an immediate snapshot request via a `crossbeam_channel::Sender<Message>`.
 /// This is useful in tracing or logging systems to capture the state of the
 /// application at the moment of a panic.
 ///
 /// # Example
 ///
-/// ```rust
+/// ```rust,no_run
+/// use ttlog::panic_hook::PanicHook;
+/// use ttlog::trace::Message;
 /// use crossbeam_channel::unbounded;
-/// use crate::trace::Message;
-/// use crate::PanicHook;
 ///
 /// let (sender, receiver) = unbounded();
 ///
@@ -28,8 +29,10 @@ use crossbeam_channel::Sender;
 /// std::panic::panic_any("something went wrong");
 /// ```
 ///
-/// The hook will attempt to send a `Message::SnapshotImmediate` containing
-/// the reason `"panic"` without blocking.
+/// The hook will attempt to send a `Message::SnapshotImmediate("panic")`
+/// using `try_send` or `send`. If sending fails (e.g., channel is full or closed),
+/// the error is printed to stderr but otherwise ignored. The hook also sleeps
+/// briefly to give background threads time to process the snapshot request.
 pub struct PanicHook {}
 
 impl PanicHook {
@@ -38,25 +41,37 @@ impl PanicHook {
   /// # Parameters
   ///
   /// - `sender`: A `crossbeam_channel::Sender<Message>` used to request the snapshot.
-  ///   The hook will use `try_send` to avoid blocking the panic unwinding process.
+  ///   The hook will send a `Message::SnapshotImmediate("panic")` via this channel.
   ///
   /// # Behavior
   ///
   /// When a panic occurs:
   /// 1. The panic information (`std::panic::PanicInfo`) is printed to stderr.
   /// 2. A `Message::SnapshotImmediate("panic")` is sent through the provided sender.
-  ///    If sending fails (e.g., channel is full or closed), the error is ignored.
+  ///    If sending fails (e.g., channel is full or closed), the error is printed to stderr.
+  /// 3. The hook sleeps for a short duration (default 120ms) to give writer or logger
+  ///    threads time to process the snapshot request.
+  /// 4. Finally, the hook prints a completion message to stderr.
+  ///
+  /// # Notes
+  ///
+  /// - This hook is intended for **debugging and tracing**. It should not rely on
+  ///   complex logic, as panic handlers run during unwinding and should remain lightweight.
+  /// - Blocking operations in the panic hook are generally discouraged. The brief
+  ///   sleep here is a compromise to allow background snapshot processing.
   pub fn install(sender: Sender<Message>) {
     std::panic::set_hook(Box::new(move |info| {
       eprintln!("[Panic] Captured panic: {:?}", info);
 
-      // Send snapshot request
-      if let Err(e) = sender.send(Message::SnapshotImmediate("panic".to_string())) {
-        eprintln!("[Panic] Failed to send snapshot request: {:?}", e);
-        return;
+      // non-blocking attempt to enqueue; do NOT block in panic handler
+      if let Err(e) = sender.try_send(Message::SnapshotImmediate("panic".to_string())) {
+        eprintln!("[Panic] Unable to enqueue snapshot request: {:?}", e);
+      } else {
+        eprintln!("[Panic] Snapshot request enqueued");
       }
 
-      eprintln!("[Panic] Snapshot request sent, waiting for completion...");
+      // Give the writer thread time to process the snapshot
+      thread::sleep(Duration::milliseconds(120).to_std().unwrap());
 
       eprintln!("[Panic] Panic hook completed");
     }));
diff --git a/ttlog/src/snapshot/__test__/mod.rs b/ttlog/src/snapshot/__test__/mod.rs
new file mode 100644
index 0000000..2a1f1f6
--- /dev/null
+++ b/ttlog/src/snapshot/__test__/mod.rs
@@ -0,0 +1,84 @@
+#[cfg(test)]
+mod __test__ {
+  use crate::buffer::RingBuffer;
+  use crate::event::Event;
+  use crate::snapshot::SnapshotWriter;
+
+  #[test]
+  fn test_snapshot_writer_new() {
+    let writer = SnapshotWriter::new("test_service");
+    assert_eq!(writer.service, "test_service");
+
+    let writer = SnapshotWriter::new("another_service".to_string());
+    assert_eq!(writer.service, "another_service");
+  }
+
+  #[test]
+  fn test_snapshot_creation() {
+    let mut buffer = RingBuffer::new(5);
+    let writer = SnapshotWriter::new("test_service");
+
+    // Add some events
+    buffer.push(Event::new(
+      1000,
+      "INFO".to_string(),
+      "First".to_string(),
+      "target1".to_string(),
+    ));
+    buffer.push(Event::new(
+      2000,
+      "WARN".to_string(),
+      "Second".to_string(),
+      "target2".to_string(),
+    ));
+
+    let snapshot = writer.create_snapshot(&mut buffer, "test_reason").unwrap();
+
+    assert_eq!(snapshot.service, "test_service");
+    assert_eq!(snapshot.reason, "test_reason");
+    assert_eq!(snapshot.events.len(), 2);
+    assert_eq!(snapshot.events[0].message, "First");
+    assert_eq!(snapshot.events[1].message, "Second");
+
+    // Buffer should be empty after snapshot
+    assert!(buffer.is_empty());
+  }
+
+  #[test]
+  fn test_snapshot_creation_empty_buffer() {
+    let mut buffer: RingBuffer<Event> = RingBuffer::new(5);
+    let writer = SnapshotWriter::new("test_service");
+
+    let snapshot = writer.create_snapshot(&mut buffer, "empty_reason");
+
+    assert!(snapshot.is_none());
+    assert!(buffer.is_empty());
+  }
+
+  #[test]
+  fn test_snapshot_metadata() {
+    let mut buffer = RingBuffer::new(3);
+    let writer = SnapshotWriter::new("metadata_test");
+
+    buffer.push(Event::new(
+      1000,
+      "INFO".to_string(),
+      "Test".to_string(),
+      "target".to_string(),
+    ));
+
+    let snapshot = writer
+      .create_snapshot(&mut buffer, "metadata_test")
+      .unwrap();
+
+    assert_eq!(snapshot.service, "metadata_test");
+    assert_eq!(snapshot.reason, "metadata_test");
+    assert_eq!(snapshot.pid, std::process::id());
+    assert!(!snapshot.hostname.is_empty());
+    assert!(!snapshot.created_at.is_empty());
+
+    // Check timestamp format (YYYYMMDDHHMMSS)
+    assert_eq!(snapshot.created_at.len(), 14);
+    assert!(snapshot.created_at.chars().all(|c| c.is_ascii_digit()));
+  }
+}
diff --git a/ttlog/src/snapshot/mod.rs b/ttlog/src/snapshot/mod.rs
index 5b7286c..491b352 100644
--- a/ttlog/src/snapshot/mod.rs
+++ b/ttlog/src/snapshot/mod.rs
@@ -1,3 +1,5 @@
+mod __test__;
+
 use chrono::Utc;
 use lz4::block::{compress, CompressionMode};
 use serde::{Deserialize, Serialize};
@@ -7,37 +9,94 @@ use std::io::Write;
 use crate::buffer::RingBuffer;
 use crate::event::Event;
 
-// wrap metadata + events
+/// A snapshot bundles metadata together with a sequence of events.
+///
+/// A `Snapshot` is intended to be a compact, self-contained representation
+/// of the recent runtime state of the service. It contains:
+///
+/// * `service` — logical name of the service creating the snapshot.
+/// * `hostname` — platform host the snapshot was taken on.
+/// * `pid` — process id of the running process that created the snapshot.
+/// * `created_at` — timestamp string (formatted `YYYYMMDDHHMMSS`) when snapshot was created.
+/// * `reason` — human-readable reason for the snapshot (e.g., `"panic"`, `"manual"`).
+/// * `events` — the captured events from the ring buffer (oldest → newest).
 #[derive(Serialize, Deserialize, Clone, Debug)]
 pub struct Snapshot {
+  /// Name of the service (e.g., `"ttlog"`).
   pub service: String,
+  /// Hostname where the snapshot was captured.
   pub hostname: String,
+  /// OS process id that created the snapshot.
   pub pid: u32,
+  /// Snapshot creation timestamp formatted as `YYYYMMDDHHMMSS`.
   pub created_at: String,
+  /// Reason for taking the snapshot (free-form string).
   pub reason: String,
+  /// Captured events (in insertion order).
   pub events: Vec<Event>,
 }
-/// Responsible for creating snapshots from a ring buffer and writing them to disk.
+
+/// Writes `Snapshot` instances to disk.
+///
+/// `SnapshotWriter` is a small helper that:
+/// 1. extracts events from a `RingBuffer<Event>`,
+/// 2. marshals the `Snapshot` into CBOR,
+/// 3. compresses the CBOR payload with LZ4 (block API),
+/// 4. writes the compressed bytes atomically to disk (write to `.tmp` then rename).
+///
+/// The on-disk format is intentionally simple: CBOR payload compressed with LZ4.
+/// The file naming scheme is:
+///
+/// ```text
+/// /tmp/ttlog-<pid>-<created_at>-<reason>.bin
+/// ```
+///
+/// where `<created_at>` uses `YYYYMMDDHHMMSS`.
 pub struct SnapshotWriter {
   service: String,
 }
 
 impl SnapshotWriter {
-  /// Creates a new `SnapshotWriter` for a given service name.
+  /// Create a new `SnapshotWriter`.
+  ///
+  /// # Arguments
+  ///
+  /// * `service` - logical name of the service that will appear in every snapshot.
+  ///
+  /// # Example (illustrative)
+  ///
+  /// ```rust,ignore
+  /// // create a writer bound to an application name
+  /// let writer = SnapshotWriter::new("my-service");
+  /// ```
   pub fn new(service: impl Into<String>) -> Self {
     Self {
       service: service.into(),
     }
   }
 
-  /// Take a snapshot from the ring buffer, capturing metadata and events.
+  /// Create a snapshot from the provided ring buffer.
   ///
-  /// # Parameters
-  /// - `ring`: The ring buffer containing events.
-  /// - `reason`: Reason for taking the snapshot (for logging/audit).
+  /// This method **consumes** the current contents of the ring buffer by calling
+  /// `take_snapshot()` on the ring. If the buffer is empty this returns `None`.
+  ///
+  /// The snapshot contains:
+  /// * the provided `reason` (converted to `String`),
+  /// * hostname via `gethostname::gethostname()` (lossy string),
+  /// * current `pid`,
+  /// * `created_at` timestamp using UTC formatted `YYYYMMDDHHMMSS`,
+  /// * all captured events.
   ///
   /// # Returns
-  /// A `Snapshot` struct containing all events and metadata.
+  ///
+  /// * `Some(Snapshot)` if there are events to snapshot.
+  /// * `None` if the ring buffer was empty.
+  ///
+  /// # Notes
+  ///
+  /// * `take_snapshot()` swaps out the internal buffer to avoid reallocations.
+  /// * This function is synchronous and cheap — it mainly constructs metadata
+  ///   and moves the event vector out of the `RingBuffer`.
   pub fn create_snapshot(
     &self,
     ring: &mut RingBuffer<Event>,
@@ -62,13 +121,45 @@ impl SnapshotWriter {
     })
   }
 
-  /// Serialize a snapshot to CBOR, compress with LZ4, and write it atomically to disk.
+  /// Serialize a `Snapshot` to CBOR, compress it with LZ4, and write it atomically.
   ///
-  /// # Parameters
-  /// - `snapshot`: The snapshot to serialize and write.
+  /// Steps:
+  /// 1. Serialize the `Snapshot` to CBOR using `serde_cbor::to_vec`.
+  /// 2. Compress the CBOR bytes with `lz4::block::compress`.
+  /// 3. Write to a temporary file `<filename>.tmp` and call `sync_all()` to flush.
+  /// 4. Rename the temp file to the final filename (atomic on POSIX within the same FS).
   ///
   /// # Returns
-  /// `Ok(())` if successful, otherwise an error.
+  ///
+  /// * `Ok(())` on success.
+  /// * `Err(Box<dyn std::error::Error>)` if any IO/serialization/compression step fails.
+  ///
+  /// # File Naming
+  ///
+  /// Default path: `/tmp/ttlog-<pid>-<created_at>-<reason>.bin`
+  ///
+  /// You can change this behavior by modifying the filename construction in this method.
+  ///
+  /// # Errors & Safety
+  ///
+  /// * Serialization (`serde_cbor`) may fail for unexpected data — this returns an error.
+  /// * Compression can fail — that error is propagated.
+  /// * File creation, `write_all`, `sync_all`, and `rename` can fail due to permissions, disk
+  ///   errors, or lack of space. The method returns the boxed error in those cases.
+  ///
+  /// # Atomicity
+  ///
+  /// Writing to a temporary file and renaming it is the common POSIX pattern for atomic writes.
+  /// On non-POSIX platforms the behavior of `fs::rename` may differ; adjust as necessary.
+  ///
+  /// # Example (illustrative; not compiled)
+  ///
+  /// ```rust,ignore
+  /// let writer = SnapshotWriter::new("my-service");
+  /// if let Some(snapshot) = writer.create_snapshot(&mut ring, "manual") {
+  ///     writer.write_snapshot(&snapshot)?;
+  /// }
+  /// ```
   pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
     // Serialize CBOR
     let cbor_buff = serde_cbor::to_vec(&snapshot)?;
@@ -96,15 +187,20 @@ impl SnapshotWriter {
     Ok(())
   }
 
-  /// Take a snapshot from the ring buffer, capturing metadata and events.
-  /// If a snapshot is created, write it to disk.
+  /// Convenience: create a snapshot from `ring` and write it to disk if non-empty.
   ///
-  /// # Parameters
-  /// - `ring`: The ring buffer containing events.
-  /// - `reason`: Reason for taking the snapshot (for logging/audit).
+  /// This calls `create_snapshot()` and — when it returns `Some` — forwards the snapshot
+  /// to `write_snapshot()`. If there are no events the method returns `Ok(())` and
+  /// prints a small message.
   ///
-  /// # Returns
-  /// `Ok(())` if successful, otherwise an error.
+  /// # Example (illustrative; not compiled)
+  ///
+  /// ```rust,ignore
+  /// let mut ring = RingBuffer::new(1024);
+  /// // ... push events ...
+  /// let writer = SnapshotWriter::new("svc");
+  /// writer.snapshot_and_write(&mut ring, "periodic")?;
+  /// ```
   pub fn snapshot_and_write(
     &self,
     ring: &mut RingBuffer<Event>,
diff --git a/ttlog/src/trace/__test__/mod.rs b/ttlog/src/trace/__test__/mod.rs
index 9097374..41c5cb5 100644
--- a/ttlog/src/trace/__test__/mod.rs
+++ b/ttlog/src/trace/__test__/mod.rs
@@ -1,109 +1,71 @@
 #[cfg(test)]
-mod tests {
-  use crate::{buffer::RingBuffer, event::Event, trace::Trace, trace_layer::BufferLayer};
+mod __test__ {
 
-  use std::{
-    fs,
-    sync::{Arc, Mutex},
-  };
-  use tracing::{info, subscriber::with_default};
-  use tracing_subscriber::{layer::SubscriberExt, Registry};
+  use crate::event::Event;
+  use crate::trace::{Message, Trace};
 
-  /// Helper to initialize Trace locally for tests
-  fn init_local_trace(capacity: usize) -> Trace {
-    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
-    let layer = BufferLayer::new(buffer.clone());
-
-    let subscriber = Registry::default().with(layer);
-
-    // Activate subscriber for this thread only
-    with_default(subscriber, || {
-      // Tracing macros will log to this layer in this scope
-    });
+  #[test]
+  fn test_trace_init() {
+    let trace_system = Trace::init(100, 50);
 
-    Trace { buffer }
+    // Should have a sender
+    assert!(trace_system.sender.capacity().unwrap_or(0) >= 50);
   }
 
   #[test]
-  fn trace_init_and_log() {
-    let trace = init_local_trace(5);
-
-    // Log some events inside a local subscriber scope
-    with_default(
-      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
-      || {
-        info!("First event");
-        info!("Second event");
-      },
-    );
+  fn test_trace_get_sender() {
+    let trace_system = Trace::init(100, 50);
+    let sender = trace_system.get_sender();
+
+    // Should be able to send messages
+    let result = sender.send(Message::Event(Event::new(
+      1000,
+      "INFO".to_string(),
+      "Test message".to_string(),
+      "test_target".to_string(),
+    )));
+
+    assert!(result.is_ok());
+  }
 
-    let buf = trace.buffer.lock().unwrap();
-    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 2);
+  #[test]
+  fn test_trace_request_snapshot() {
+    let trace_system = Trace::init(100, 50);
 
-    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
-    assert!(messages.contains(&"First event".to_string()));
-    assert!(messages.contains(&"Second event".to_string()));
+    // Should not panic
+    trace_system.request_snapshot("test_snapshot");
   }
 
   #[test]
-  fn trace_buffer_wraparound() {
-    let trace = init_local_trace(3);
-
-    with_default(
-      Registry::default().with(BufferLayer::new(trace.buffer.clone())),
-      || {
-        for i in 0..5 {
-          info!("Event {}", i);
-        }
-      },
+  fn test_trace_message_display() {
+    let event = Event::new(
+      1000,
+      "INFO".to_string(),
+      "Test message".to_string(),
+      "test_target".to_string(),
     );
 
-    let buf = trace.buffer.lock().unwrap();
-    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 3); // Only last 3 events remain
+    let messages = vec![
+      Message::Event(event.clone()),
+      Message::SnapshotImmediate("test_reason".to_string()),
+      Message::FlushAndExit,
+    ];
 
-    let messages: Vec<String> = buf.iter().map(|e| e.message.clone()).collect();
-    assert_eq!(messages, vec!["Event 2", "Event 3", "Event 4"]);
+    for msg in messages {
+      let display_str = format!("{}", msg);
+      assert!(!display_str.is_empty());
+    }
   }
 
   #[test]
-  fn test_flush_snapshot_creates_file() {
-    // 1. Create a buffer and populate it with dummy events
-    let buffer = Arc::new(Mutex::new(RingBuffer::<Event>::new(10)));
-
-    {
-      let mut buf_lock = buffer.lock().unwrap();
-      // Add some dummy events
-      buf_lock.push(Event::new(
-        12345,
-        "event1".to_string(),
-        "message1".to_string(),
-      ));
-      buf_lock.push(Event::new(
-        12345,
-        "event2".to_string(),
-        "message2".to_string(),
-      ));
-    }
+  fn test_trace_with_tracing_integration() {
+    let _trace_system = Trace::init(100, 50);
 
-    // 2. Call flush_snapshot
-    Trace::flush_snapshot(buffer.clone(), "test");
+    // Generate some tracing events
+    tracing::info!("Integration test info");
+    tracing::warn!("Integration test warning");
+    tracing::error!("Integration test error");
 
-    // 3. Check /tmp for a file that starts with "ttlog-<pid>-<timestamp>-test"
-    let pid = std::process::id().to_string();
-    let files: Vec<_> = fs::read_dir("/tmp")
-      .unwrap()
-      .filter_map(|e| e.ok())
-      .filter(|e| {
-        let name = e.file_name().to_string_lossy().to_string();
-        name.contains(&pid) && name.contains("test") && name.ends_with(".bin")
-      })
-      .collect();
-
-    assert!(!files.is_empty(), "Snapshot file should exist in /tmp");
-
-    // Optional: remove created files after test
-    for f in files {
-      let _ = fs::remove_file(f.path());
-    }
+    // Test should complete without crashing
   }
 }
diff --git a/ttlog/src/trace/mod.rs b/ttlog/src/trace/mod.rs
index 5ddc672..7dd9e77 100644
--- a/ttlog/src/trace/mod.rs
+++ b/ttlog/src/trace/mod.rs
@@ -12,6 +12,7 @@ use crate::trace_layer::BufferLayer;
 
 use crossbeam_channel::{bounded, Receiver, Sender};
 
+#[derive(Debug, Clone)]
 pub struct Trace {
   sender: Sender<Message>,
 }
@@ -23,6 +24,16 @@ pub enum Message {
   FlushAndExit,              // optional: for graceful shutdown in tests
 }
 
+impl std::fmt::Display for Message {
+  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+    match self {
+      Message::Event(ev) => write!(f, "Event: {}", ev),
+      Message::SnapshotImmediate(reason) => write!(f, "SnapshotImmediate: {}", reason),
+      Message::FlushAndExit => write!(f, "FlushAndExit"),
+    }
+  }
+}
+
 impl Trace {
   /// Initializes the tracing/logging system with a bounded channel and a writer thread.
   ///
@@ -40,8 +51,13 @@ impl Trace {
   ///
   /// # Example
   /// ```rust
+  /// use ttlog::trace::{Trace, Message};
+  /// use ttlog::event::Event;
+  ///
   /// let trace_system = Trace::init(1024, 128);
-  /// trace_system.sender.send(Message::new("test")).unwrap();
+  /// let event = Event::new(1234567890, "INFO".to_string(), "test message".to_string(), "test_target".to_string());
+  /// let sender = trace_system.get_sender();
+  /// sender.send(Message::Event(event)).unwrap();
   /// ```
   pub fn init(capacity: usize, channel_capacity: usize) -> Self {
     let (sender, receiver) = bounded::<Message>(channel_capacity);
@@ -64,8 +80,13 @@ impl Trace {
   ///
   /// # Example
   /// ```rust
+  /// use ttlog::trace::{Trace, Message};
+  /// use ttlog::event::Event;
+  ///
+  /// let trace_system = Trace::init(1024, 128);
+  /// let event = Event::new(1234567890, "INFO".to_string(), "test message".to_string(), "test_target".to_string());
   /// let sender = trace_system.get_sender();
-  /// sender.send(Message::Event(my_event)).unwrap();
+  /// sender.send(Message::Event(event)).unwrap();
   /// ```
   pub fn get_sender(&self) -> Sender<Message> {
     self.sender.clone()
@@ -83,6 +104,9 @@ impl Trace {
   ///
   /// # Example
   /// ```rust
+  /// use ttlog::trace::Trace;
+  ///
+  /// let trace_system = Trace::init(1024, 128);
   /// trace_system.request_snapshot("manual_debug_snapshot");
   /// ```
   pub fn request_snapshot(&self, reason: &str) {
@@ -115,6 +139,7 @@ impl Trace {
     let service = SnapshotWriter::new("ttlog");
 
     while let Ok(msg) = receiver.recv() {
+      println!("Received message: ###############################3{}", msg);
       match msg {
         Message::Event(ev) => {
           ring.push(ev);
diff --git a/ttlog/src/trace_layer/__test__/mod.rs b/ttlog/src/trace_layer/__test__/mod.rs
index e5be8b9..47e3318 100644
--- a/ttlog/src/trace_layer/__test__/mod.rs
+++ b/ttlog/src/trace_layer/__test__/mod.rs
@@ -1,82 +1,65 @@
 #[cfg(test)]
 mod tests {
-  use crate::buffer::RingBuffer;
+  use crate::trace::Message;
   use crate::trace_layer::BufferLayer;
+  use crossbeam_channel::bounded;
+  use tracing::{error, info, warn};
+  use tracing_subscriber::{layer::SubscriberExt, Registry};
 
-  use std::sync::{Arc, Mutex};
-  use tracing::{info, Dispatch};
-  use tracing_subscriber::layer::SubscriberExt;
-  use tracing_subscriber::Registry;
+  #[test]
+  fn test_buffer_layer_new() {
+    let (sender, _receiver) = bounded::<Message>(10);
+    let layer = BufferLayer::new(sender);
+
+    assert!(std::format!("{:?}", layer).contains("BufferLayer"));
+  }
 
   #[test]
-  fn single_event_pushes_to_buffer() {
-    let buffer = Arc::new(Mutex::new(RingBuffer::new(10)));
-    let layer = BufferLayer::new(buffer.clone());
+  fn test_buffer_layer_clone() {
+    let (sender, _receiver) = bounded::<Message>(10);
+    let layer = BufferLayer::new(sender);
 
-    let subscriber = Registry::default().with(layer);
-    tracing::subscriber::with_default(subscriber, || {
-      info!("Hello world");
-    });
+    let cloned = layer.clone();
 
-    let buf = buffer.lock().unwrap();
-    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
-    assert_eq!(buf.iter().next().unwrap().message, "Hello world");
+    // Both should have the same sender
+    assert!(std::format!("{:?}", layer).contains("BufferLayer"));
+    assert!(std::format!("{:?}", cloned).contains("BufferLayer"));
   }
 
   #[test]
-  fn concurrent_logging() {
-    use std::sync::Arc;
-    use std::thread;
-    use tracing::{dispatcher, info};
-    use tracing_subscriber::{layer::SubscriberExt, Registry};
-
-    let capacity = 1000;
-    let buffer = Arc::new(Mutex::new(RingBuffer::new(capacity)));
-    let layer = BufferLayer::new(buffer.clone());
+  fn test_buffer_layer_with_tracing_events() {
+    let (sender, receiver) = bounded::<Message>(100);
+    let layer = BufferLayer::new(sender);
 
-    // Wrap subscriber in Arc so threads can share it
-    let subscriber = Arc::new(Registry::default().with(layer));
+    // Create subscriber with our layer
+    let subscriber = Registry::default().with(layer);
+    let _guard = tracing::subscriber::set_default(subscriber);
 
-    let threads: Vec<_> = (0..10)
-      .map(|t| {
-        let disp = Dispatch::from(subscriber.clone());
-        thread::spawn(move || {
-          // Each thread sets the subscriber locally
-          dispatcher::with_default(&disp, || {
-            for i in 0..500 {
-              info!("Thread {} - {}", t, i);
-            }
-          });
-        })
-      })
-      .collect();
+    // Emit tracing events
+    info!("Test info message");
+    warn!("Test warning message");
+    error!("Test error message");
 
-    for t in threads {
-      t.join().unwrap();
+    // Check that events were captured
+    let mut events = Vec::new();
+    while let Ok(msg) = receiver.try_recv() {
+      match msg {
+        Message::Event(event) => events.push(event),
+        _ => {},
+      }
     }
 
-    // Lock buffer and check results
-    let buf = buffer.lock().unwrap();
-    assert_eq!(buf.iter().collect::<Vec<_>>().len(), capacity);
+    // Should have captured 3 events
+    assert_eq!(events.len(), 3);
 
-    // Optional: print first 5 events to verify
-    // for event in buf.iter().take(5) {
-    //   println!("{:?}", event);
-    // }
-  }
+    // Check event details
+    let info_event = events.iter().find(|e| e.level == "INFO").unwrap();
+    assert_eq!(info_event.message, "Test info message");
 
-  #[test]
-  fn empty_message_logged() {
-    let buffer = Arc::new(Mutex::new(RingBuffer::new(5)));
-    let layer = BufferLayer::new(buffer.clone());
-
-    let subscriber = Registry::default().with(layer);
-    tracing::subscriber::with_default(subscriber, || {
-      info!("");
-    });
+    let warn_event = events.iter().find(|e| e.level == "WARN").unwrap();
+    assert_eq!(warn_event.message, "Test warning message");
 
-    let buf = buffer.lock().unwrap();
-    assert_eq!(buf.iter().collect::<Vec<_>>().len(), 1);
-    assert_eq!(buf.iter().next().unwrap().message, "");
+    let error_event = events.iter().find(|e| e.level == "ERROR").unwrap();
+    assert_eq!(error_event.message, "Test error message");
   }
 }
diff --git a/ttlog/src/trace_layer/mod.rs b/ttlog/src/trace_layer/mod.rs
index 0099842..f8e7773 100644
--- a/ttlog/src/trace_layer/mod.rs
+++ b/ttlog/src/trace_layer/mod.rs
@@ -1,4 +1,7 @@
+mod __test__;
+
 use crate::{event::Event, trace::Message};
+
 use chrono::Utc;
 use crossbeam_channel::{Sender, TrySendError};
 use tracing::field::Visit;

---- FULL FILE CONTENTS ----

----- FILE: ttlog-view/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "serde",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "colored"
version = "3.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
dependencies = [
 "windows-sys 0.59.0",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "crossterm"
version = "0.25.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e64e6c0fbe2c17357405f7c758c1ef960fce08bdfb2c03d88d2a18d7e09c4b67"
dependencies = [
 "bitflags 1.3.2",
 "crossterm_winapi",
 "libc",
 "mio",
 "parking_lot",
 "signal-hook",
 "signal-hook-mio",
 "winapi",
]

[[package]]
name = "crossterm_winapi"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b"
dependencies = [
 "winapi",
]

[[package]]
name = "dyn-clone"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "fastrand"
version = "2.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"

[[package]]
name = "figlet-rs"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4742a071cd9694fc86f9fa1a08fa3e53d40cc899d7ee532295da2d085639fbc5"

[[package]]
name = "fuzzy-matcher"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54614a3312934d066701a80f20f15fa3b56d67ac7722b39eea5b4c9dd1d66c94"
dependencies = [
 "thread_local",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "gethostname"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"
dependencies = [
 "libc",
 "windows-targets 0.48.5",
]

[[package]]
name = "getrandom"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
dependencies = [
 "cfg-if",
 "libc",
 "r-efi",
 "wasi 0.14.2+wasi-0.2.4",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "inquire"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fddf93031af70e75410a2511ec04d49e758ed2f26dad3404a934e0fb45cc12a"
dependencies = [
 "bitflags 2.9.1",
 "crossterm",
 "dyn-clone",
 "fuzzy-matcher",
 "fxhash",
 "newline-converter",
 "once_cell",
 "unicode-segmentation",
 "unicode-width",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "lock_api"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "mio"
version = "0.8.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"
dependencies = [
 "libc",
 "log",
 "wasi 0.11.1+wasi-snapshot-preview1",
 "windows-sys 0.48.0",
]

[[package]]
name = "newline-converter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "47b6b097ecb1cbfed438542d16e84fd7ad9b0c76c8a65b7f9039212a3d14dc7f"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "parking_lot"
version = "0.12.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall",
 "smallvec",
 "windows-targets 0.52.6",
]

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "r-efi"
version = "5.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"

[[package]]
name = "redox_syscall"
version = "0.5.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5407465600fb0548f1442edf71dd20683c6ed326200ace4b1ef0763521bb3b77"
dependencies = [
 "bitflags 2.9.1",
]

[[package]]
name = "regex"
version = "1.11.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata",
 "regex-syntax",
]

[[package]]
name = "regex-automata"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax",
]

[[package]]
name = "regex-syntax"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags 2.9.1",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "signal-hook"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d881a16cf4426aa584979d30bd82cb33429027e42122b169753d6ef1085ed6e2"
dependencies = [
 "libc",
 "signal-hook-registry",
]

[[package]]
name = "signal-hook-mio"
version = "0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd"
dependencies = [
 "libc",
 "mio",
 "signal-hook",
]

[[package]]
name = "signal-hook-registry"
version = "1.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2a4719bff48cee6b39d12c020eeb490953ad2443b7055bd0b21fca26bd8c28b"
dependencies = [
 "libc",
]

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "tempfile"
version = "3.20.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
dependencies = [
 "fastrand",
 "getrandom",
 "once_cell",
 "rustix",
 "windows-sys 0.59.0",
]

[[package]]
name = "terminal_size"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "60b8cb979cb11c32ce1603f8137b22262a9d131aaa5c37b5678025f22b8becd0"
dependencies = [
 "rustix",
 "windows-sys 0.60.2",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tempfile",
 "tracing",
 "tracing-subscriber",
]

[[package]]
name = "ttlog-view"
version = "0.1.0"
dependencies = [
 "chrono",
 "colored",
 "figlet-rs",
 "inquire",
 "lz4",
 "regex",
 "serde",
 "serde_cbor",
 "terminal_size",
 "tracing",
 "ttlog",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "unicode-segmentation"
version = "1.12.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"

[[package]]
name = "unicode-width"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.11.1+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"

[[package]]
name = "wasi"
version = "0.14.2+wasi-0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
dependencies = [
 "wit-bindgen-rt",
]

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

[[package]]
name = "wit-bindgen-rt"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
dependencies = [
 "bitflags 2.9.1",
]

----- FILE: ttlog-view/Cargo.toml -----
[package]
name = "ttlog-view"
version = "0.1.0"
edition = "2024"

[dependencies]
chrono = "0.4.41"
colored = "3.0.0"
figlet-rs = "0.1.5"
inquire = "0.7.5"
lz4 = "1.28.1"
regex = "1.11.1"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11.2"
terminal_size = "0.4.3"
tracing = "0.1.41"
ttlog = { path = "../ttlog" }

----- FILE: ttlog-view/fonts/ANSI Shadow.flf -----
flf2a$ 7 7 13 0 7 0 64 0
Font Author: ?

More Info:

https://web.archive.org/web/20120819044459/http://www.roysac.com/thedrawfonts-tdf.asp

FIGFont created with: http://patorjk.com/figfont-editor
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@
$  $@@
██╗@
██║@
██║@
╚═╝@
██╗@
╚═╝@
   @@
@
@
@
@
@
@
@@
 ██╗ ██╗ @
████████╗@
╚██╔═██╔╝@
████████╗@
╚██╔═██╔╝@
 ╚═╝ ╚═╝ @
         @@
▄▄███▄▄·@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚═▀▀▀══╝@
        @@
██╗ ██╗@
╚═╝██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝██╗@
╚═╝ ╚═╝@
       @@
   ██╗   @
   ██║   @
████████╗@
██╔═██╔═╝@
██████║  @
╚═════╝  @
         @@
@
@
@
@
@
@
@@
 ██╗@
██╔╝@
██║ @
██║ @
╚██╗@
 ╚═╝@
    @@
██╗ @
╚██╗@
 ██║@
 ██║@
██╔╝@
╚═╝ @
    @@
      @
▄ ██╗▄@
 ████╗@
▀╚██╔▀@
  ╚═╝ @
      @
      @@
@
@
@
@
@
@
@@
   @
   @
   @
   @
▄█╗@
╚═╝@
   @@
      @
      @
█████╗@
╚════╝@
      @
      @
      @@
   @
   @
   @
   @
██╗@
╚═╝@
   @@
    ██╗@
   ██╔╝@
  ██╔╝ @
 ██╔╝  @
██╔╝   @
╚═╝    @
       @@
 ██████╗ @
██╔═████╗@
██║██╔██║@
████╔╝██║@
╚██████╔╝@
 ╚═════╝ @
         @@
 ██╗@
███║@
╚██║@
 ██║@
 ██║@
 ╚═╝@
    @@
██████╗ @
╚════██╗@
 █████╔╝@
██╔═══╝ @
███████╗@
╚══════╝@
        @@
██████╗ @
╚════██╗@
 █████╔╝@
 ╚═══██╗@
██████╔╝@
╚═════╝ @
        @@
██╗  ██╗@
██║  ██║@
███████║@
╚════██║@
     ██║@
     ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
 ██████╗ @
██╔════╝ @
███████╗ @
██╔═══██╗@
╚██████╔╝@
 ╚═════╝ @
         @@
███████╗@
╚════██║@
    ██╔╝@
   ██╔╝ @
   ██║  @
   ╚═╝  @
        @@
 █████╗ @
██╔══██╗@
╚█████╔╝@
██╔══██╗@
╚█████╔╝@
 ╚════╝ @
        @@
 █████╗ @
██╔══██╗@
╚██████║@
 ╚═══██║@
 █████╔╝@
 ╚════╝ @
        @@
   @
██╗@
╚═╝@
██╗@
╚═╝@
   @
   @@
   @
██╗@
╚═╝@
▄█╗@
▀═╝@
   @
   @@
  ██╗@
 ██╔╝@
██╔╝ @
╚██╗ @
 ╚██╗@
  ╚═╝@
     @@
@
@
@
@
@
@
@@
██╗  @
╚██╗ @
 ╚██╗@
 ██╔╝@
██╔╝ @
╚═╝  @
     @@
██████╗ @
╚════██╗@
  ▄███╔╝@
  ▀▀══╝ @
  ██╗   @
  ╚═╝   @
        @@
 ██████╗ @
██╔═══██╗@
██║██╗██║@
██║██║██║@
╚█║████╔╝@
 ╚╝╚═══╝ @
         @@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
███╗@
██╔╝@
██║ @
██║ @
███╗@
╚══╝@
    @@
@
@
@
@
@
@
@@
███╗@
╚██║@
 ██║@
 ██║@
███║@
╚══╝@
    @@
 ███╗ @
██╔██╗@
╚═╝╚═╝@
      @
      @
      @
      @@
        @
        @
        @
        @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
 █████╗ @
██╔══██╗@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██████╔╝@
╚═════╝ @
        @@
 ██████╗@
██╔════╝@
██║     @
██║     @
╚██████╗@
 ╚═════╝@
        @@
██████╗ @
██╔══██╗@
██║  ██║@
██║  ██║@
██████╔╝@
╚═════╝ @
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
███████╗@
╚══════╝@
        @@
███████╗@
██╔════╝@
█████╗  @
██╔══╝  @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔════╝ @
██║  ███╗@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗  ██╗@
██║  ██║@
███████║@
██╔══██║@
██║  ██║@
╚═╝  ╚═╝@
        @@
██╗@
██║@
██║@
██║@
██║@
╚═╝@
   @@
     ██╗@
     ██║@
     ██║@
██   ██║@
╚█████╔╝@
 ╚════╝ @
        @@
██╗  ██╗@
██║ ██╔╝@
█████╔╝ @
██╔═██╗ @
██║  ██╗@
╚═╝  ╚═╝@
        @@
██╗     @
██║     @
██║     @
██║     @
███████╗@
╚══════╝@
        @@
███╗   ███╗@
████╗ ████║@
██╔████╔██║@
██║╚██╔╝██║@
██║ ╚═╝ ██║@
╚═╝     ╚═╝@
           @@
███╗   ██╗@
████╗  ██║@
██╔██╗ ██║@
██║╚██╗██║@
██║ ╚████║@
╚═╝  ╚═══╝@
          @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔═══╝ @
██║     @
╚═╝     @
        @@
 ██████╗ @
██╔═══██╗@
██║   ██║@
██║▄▄ ██║@
╚██████╔╝@
 ╚══▀▀═╝ @
         @@
██████╗ @
██╔══██╗@
██████╔╝@
██╔══██╗@
██║  ██║@
╚═╝  ╚═╝@
        @@
███████╗@
██╔════╝@
███████╗@
╚════██║@
███████║@
╚══════╝@
        @@
████████╗@
╚══██╔══╝@
   ██║   @
   ██║   @
   ██║   @
   ╚═╝   @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
██║   ██║@
╚██████╔╝@
 ╚═════╝ @
         @@
██╗   ██╗@
██║   ██║@
██║   ██║@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚═══╝  @
         @@
██╗    ██╗@
██║    ██║@
██║ █╗ ██║@
██║███╗██║@
╚███╔███╔╝@
 ╚══╝╚══╝ @
          @@
██╗  ██╗@
╚██╗██╔╝@
 ╚███╔╝ @
 ██╔██╗ @
██╔╝ ██╗@
╚═╝  ╚═╝@
        @@
██╗   ██╗@
╚██╗ ██╔╝@
 ╚████╔╝ @
  ╚██╔╝  @
   ██║   @
   ╚═╝   @
         @@
███████╗@
╚══███╔╝@
  ███╔╝ @
 ███╔╝  @
███████╗@
╚══════╝@
        @@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@@

----- FILE: ttlog-view/src/main.rs -----
mod snapshot_read;
mod utils;

use crate::snapshot_read::SnapshotFile;
use crate::utils::{generate_ascii_art, print_snapshots};
use colored::*;
use inquire::Select;
use std::error::Error;
use std::fs;

fn main() -> Result<(), Box<dyn Error>> {
  // Clear screen
  print!("\x1B[2J\x1B[1;1H");

  // ASCII banner
  let banner = generate_ascii_art("TTLOG")?;
  println!("{}", banner.bright_yellow().bold());

  loop {
    // Main menu
    let choice = Select::new(
      "Main Menu - Select an action:",
      vec!["Show All Files", "Preview All Files", "Exit"],
    )
    .prompt()?;

    match choice {
      "Show All Files" => show_all_files_menu()?,
      "Preview All Files" => preview_all_files()?,
      "Exit" => {
        println!("{}", "Goodbye!".red().bold());
        break;
      },
      _ => unreachable!(),
    }
  }

  Ok(())
}

fn show_all_files_menu() -> Result<(), Box<dyn Error>> {
  let files = snapshot_read::read_snapshots()?;
  if files.is_empty() {
    println!("{}", "No log files found.".red());
    return Ok(());
  }

  loop {
    let mut options: Vec<String> = files
      .iter()
      .map(|f| f.name.clone()) // Convert PathBuf to String
      .collect();

    options.push("Back".to_string());

    let choice = Select::new("Select a file to manage:", options).prompt()?;

    if choice == "Back" {
      break;
    }

    file_action_menu(&choice, &files)?;
  }

  Ok(())
}

fn file_action_menu(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  loop {
    match Select::new(
      &format!("File: {} - Choose an action:", file),
      vec!["Preview", "Delete", "Back"],
    )
    .prompt()?
    {
      "Preview" => preview_file(file, snapshots)?,
      "Delete" => {
        fs::remove_file(format!("/tmp/{}.bin", file))?;
        println!("{}", format!("Deleted file: {}", file).red());
        break; // exit after deletion
      },
      "Back" => break,
      _ => unreachable!(),
    }
  }
  Ok(())
}

fn preview_file(file: &str, snapshots: &Vec<SnapshotFile>) -> Result<(), Box<dyn Error>> {
  // Find snapshot by path
  if let Some(snapshot) = snapshots.iter().find(|s| s.name == file) {
    println!("=== Preview: {} ===", snapshot.name);

    // Instead of raw debug output, reuse your old rendering logic
    print_snapshots(&vec![snapshot.clone()]);
    // Or if you had a function like render_snapshot(snapshot), call that:
    // render_snapshot(snapshot);
  } else {
    println!("File '{}' not found in snapshots.", file);
  }

  Ok(())
}

fn preview_all_files() -> Result<(), Box<dyn Error>> {
  let snapshots = snapshot_read::read_snapshots()?;
  print_snapshots(&snapshots);
  Ok(())
}

----- FILE: ttlog-view/src/snapshot_read/mod.rs -----
use lz4::block::decompress;
use serde::{Deserialize, Serialize};
use std::{error::Error, fs};
use ttlog::snapshot::Snapshot;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SnapshotFile {
  pub name: String,
  pub path: String,
  pub create_at: String,
  pub data: Snapshot,
}

pub fn read_snapshots() -> Result<Vec<SnapshotFile>, Box<dyn Error>> {
  // Get the snapshots
  let snapshots_dirs = fs::read_dir("/tmp")?
    .filter_map(|e| e.ok())
    .filter(|e| e.file_name().to_string_lossy().starts_with("ttlog-"))
    .collect::<Vec<_>>();

  let mut snapshots: Vec<SnapshotFile> = vec![];
  for dir in &snapshots_dirs {
    // Read the snapshot dir
    let snapshot_compressed = fs::read(&dir.path())?;
    // Decompress the snapshot
    let snapshot_decompressed = decompress(&snapshot_compressed, None)?;
    // Deserialize the snapshot
    let snapshot: Snapshot = serde_cbor::from_slice(&snapshot_decompressed)?;
    // Build data
    let path = dir.path().to_string_lossy().to_string();
    let path = path.strip_prefix("/tmp/").unwrap();
    let chunks = path.split('-').collect::<Vec<_>>();

    let (_prefix, _pid, tsz, _suffix) = match chunks.as_slice() {
      [prefix, pid, tsz, rest @ ..] => (prefix, pid, tsz, rest),
      _ => panic!("Expected at least 3 parts in filename"),
    };

    snapshots.push(SnapshotFile {
      name: path.strip_suffix(".bin").unwrap().to_string(),
      path: dir.path().to_string_lossy().to_string(),
      create_at: tsz.to_string(),
      data: snapshot,
    });
  }

  Ok(snapshots)
}

----- FILE: ttlog-view/src/utils/mod.rs -----
use std::error::Error;

use colored::*;
use figlet_rs::FIGfont;

use crate::snapshot_read::SnapshotFile;

use chrono::{Datelike, NaiveDateTime, Timelike};

pub fn format_timestamp(ts_str: &str) -> String {
  // Parse from string with format, avoiding deprecated functions
  let parsed = NaiveDateTime::parse_and_remainder(ts_str, "%Y%m%d%H%M%S")
    .map(|(dt, _)| dt)
    .unwrap_or_else(|_| NaiveDateTime::UNIX_EPOCH);

  format!(
    "{:04}-{:02}-{:02} {:02}:{:02}:{:02}",
    parsed.year(),
    parsed.month(),
    parsed.day(),
    parsed.hour(),
    parsed.minute(),
    parsed.second()
  )
}

pub fn print_snapshots(snapshots: &[SnapshotFile]) {
  if snapshots.is_empty() {
    println!("{}", "No snapshots to display.".red());
    return;
  }

  for snap in snapshots {
    print_snapshot(snap);
  }
}
fn print_snapshot(snap: &SnapshotFile) {
  // Calculate max width for borders
  let mut all_lines: Vec<String> = Vec::new();
  all_lines.push(format!(
    "📦 {} ({})",
    snap.name,
    format_timestamp(&snap.create_at)
  ));
  all_lines.push(format!("📄 {}", snap.path));
  for event in &snap.data.events {
    all_lines.push(format!(
      "{} [{}] {}",
      icon_for_level(&event.level),
      event.level,
      event.message
    ));
  }

  let max_width = all_lines
    .iter()
    .map(|l| strip_ansi_codes(l).chars().count())
    .max()
    .unwrap_or(0);

  // Top border
  println!(
    "{}",
    format!("╔{}╗", "═".repeat(max_width + 3)).bright_black()
  );

  // Header
  let header = format!(
    "📦 {} ({})",
    snap.name.bright_white().bold(),
    format_timestamp(&snap.create_at).dimmed()
  );
  println!("{}", bordered_line(&header, max_width));

  let path_line = format!("📄 {}", snap.path.dimmed());
  println!("{}", bordered_line(&path_line, max_width));

  // Separator
  println!(
    "{}",
    format!("╠{}╣", "═".repeat(max_width + 3)).bright_black()
  );

  // Events
  for event in &snap.data.events {
    let icon = icon_for_level(&event.level);
    let level_colored = match event.level.as_str() {
      "INFO" => event.level.bright_blue().bold(),
      "WARN" => event.level.bright_yellow().bold(),
      "ERROR" => event.level.bright_red().bold(),
      _ => event.level.bright_white().bold(),
    };
    let line = format!("{} [{}] {}", icon, level_colored, event.message);
    println!("{}", bordered_line(&line, max_width));
  }

  // Bottom border
  println!(
    "{}",
    format!("╚{}╝", "═".repeat(max_width + 3)).bright_black()
  );
  println!();
}

fn bordered_line(content: &str, max_width: usize) -> String {
  let stripped_len = strip_ansi_codes(content).chars().count() - 1;
  format!(
    "{} {}{} {}",
    "║".bright_black(),
    content,
    " ".repeat(max_width - stripped_len),
    "║".bright_black()
  )
}

fn icon_for_level(level: &str) -> colored::ColoredString {
  match level {
    "INFO" => "ℹ️".bright_blue(),
    "WARN" => "⚠️".bright_yellow(),
    "ERROR" => "❌".bright_red(),
    _ => "•".bright_white(),
  }
}

/// Remove ANSI color codes for correct length measurement
fn strip_ansi_codes(s: &str) -> String {
  let re = regex::Regex::new(r"\x1b\[[0-9;]*m").unwrap();
  re.replace_all(s, "").to_string()
}

pub fn generate_ascii_art(text: &str) -> Result<String, Box<dyn Error>> {
  // Load the ANSI Shadow font file (must be in your project folder or give absolute path)
  let font = FIGfont::from_file("fonts/ANSI Shadow.flf")?;

  let figure = font
    .convert(text)
    .ok_or("Failed to convert text to ASCII art")?;

  Ok(figure.to_string())
}

----- FILE: ttlog/Cargo.lock -----
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "autocfg"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"

[[package]]
name = "bitflags"
version = "2.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"

[[package]]
name = "bumpalo"
version = "3.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"

[[package]]
name = "cc"
version = "1.2.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2352e5597e9c544d5e6d9c95190d5d27738ade584fa8db0a16e130e5c2b5296e"
dependencies = [
 "shlex",
]

[[package]]
name = "cfg-if"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"

[[package]]
name = "chrono"
version = "0.4.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "js-sys",
 "num-traits",
 "serde",
 "wasm-bindgen",
 "windows-link",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "crossbeam-channel"
version = "0.5.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "82b8f8f868b36967f9606790d1903570de9ceaf870a7bf9fbbd3016d636a2cb2"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"

[[package]]
name = "errno"
version = "0.3.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
dependencies = [
 "libc",
 "windows-sys 0.60.2",
]

[[package]]
name = "fastrand"
version = "2.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"

[[package]]
name = "gethostname"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818"
dependencies = [
 "libc",
 "windows-targets 0.48.5",
]

[[package]]
name = "getrandom"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
dependencies = [
 "cfg-if",
 "libc",
 "r-efi",
 "wasi",
]

[[package]]
name = "half"
version = "1.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b43ede17f21864e81be2fa654110bf1e793774238d86ef8555c37e6519c0403"

[[package]]
name = "iana-time-zone"
version = "0.1.63"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "log",
 "wasm-bindgen",
 "windows-core",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "itoa"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"

[[package]]
name = "js-sys"
version = "0.3.77"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
dependencies = [
 "once_cell",
 "wasm-bindgen",
]

[[package]]
name = "lazy_static"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"

[[package]]
name = "libc"
version = "0.2.175"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a82ae493e598baaea5209805c49bbf2ea7de956d50d7da0da1164f9c6d28543"

[[package]]
name = "linux-raw-sys"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"

[[package]]
name = "log"
version = "0.4.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"

[[package]]
name = "lz4"
version = "1.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a20b523e860d03443e98350ceaac5e71c6ba89aea7d960769ec3ce37f4de5af4"
dependencies = [
 "lz4-sys",
]

[[package]]
name = "lz4-sys"
version = "1.11.1+lz4-1.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bd8c0d6c6ed0cd30b3652886bb8711dc4bb01d637a68105a3d5158039b418e6"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "memchr"
version = "2.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-traits"
version = "0.2.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
dependencies = [
 "autocfg",
]

[[package]]
name = "once_cell"
version = "1.21.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pin-project-lite"
version = "0.2.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"

[[package]]
name = "proc-macro2"
version = "1.0.97"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d61789d7719defeb74ea5fe81f2fdfdbd28a803847077cecce2ff14e1472f6f1"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quote"
version = "1.0.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "r-efi"
version = "5.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"

[[package]]
name = "rustix"
version = "1.0.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11181fbabf243db407ef8df94a6ce0b2f9a733bd8be4ad02b4eda9602296cac8"
dependencies = [
 "bitflags",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.60.2",
]

[[package]]
name = "rustversion"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b39cdef0fa800fc44525c84ccb54a029961a8215f9619753635a9c0d2538d46d"

[[package]]
name = "ryu"
version = "1.0.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"

[[package]]
name = "serde"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_cbor"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5"
dependencies = [
 "half",
 "serde",
]

[[package]]
name = "serde_derive"
version = "1.0.219"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "serde_json"
version = "1.0.142"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "030fedb782600dcbd6f02d479bf0d817ac3bb40d644745b769d6a96bc3afc5a7"
dependencies = [
 "itoa",
 "memchr",
 "ryu",
 "serde",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "shlex"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"

[[package]]
name = "smallvec"
version = "1.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"

[[package]]
name = "syn"
version = "2.0.104"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "tempfile"
version = "3.20.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
dependencies = [
 "fastrand",
 "getrandom",
 "once_cell",
 "rustix",
 "windows-sys 0.59.0",
]

[[package]]
name = "thread_local"
version = "1.1.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
dependencies = [
 "cfg-if",
]

[[package]]
name = "tracing"
version = "0.1.41"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "tracing-core"
version = "0.1.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
dependencies = [
 "nu-ansi-term",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "ttlog"
version = "0.1.0"
dependencies = [
 "chrono",
 "crossbeam-channel",
 "gethostname",
 "lz4",
 "serde",
 "serde_cbor",
 "serde_json",
 "tempfile",
 "tracing",
 "tracing-subscriber",
]

[[package]]
name = "unicode-ident"
version = "1.0.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

[[package]]
name = "valuable"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"

[[package]]
name = "wasi"
version = "0.14.2+wasi-0.2.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
dependencies = [
 "wit-bindgen-rt",
]

[[package]]
name = "wasm-bindgen"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
dependencies = [
 "cfg-if",
 "once_cell",
 "rustversion",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
dependencies = [
 "bumpalo",
 "log",
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.100"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows-core"
version = "0.61.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
dependencies = [
 "windows-implement",
 "windows-interface",
 "windows-link",
 "windows-result",
 "windows-strings",
]

[[package]]
name = "windows-implement"
version = "0.60.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-interface"
version = "0.59.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
dependencies = [
 "proc-macro2",
 "quote",
 "syn",
]

[[package]]
name = "windows-link"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"

[[package]]
name = "windows-result"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-strings"
version = "0.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
dependencies = [
 "windows-link",
]

[[package]]
name = "windows-sys"
version = "0.59.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
dependencies = [
 "windows-targets 0.52.6",
]

[[package]]
name = "windows-sys"
version = "0.60.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
dependencies = [
 "windows-targets 0.53.3",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
dependencies = [
 "windows_aarch64_gnullvm 0.52.6",
 "windows_aarch64_msvc 0.52.6",
 "windows_i686_gnu 0.52.6",
 "windows_i686_gnullvm 0.52.6",
 "windows_i686_msvc 0.52.6",
 "windows_x86_64_gnu 0.52.6",
 "windows_x86_64_gnullvm 0.52.6",
 "windows_x86_64_msvc 0.52.6",
]

[[package]]
name = "windows-targets"
version = "0.53.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5fe6031c4041849d7c496a8ded650796e7b6ecc19df1a431c1a363342e5dc91"
dependencies = [
 "windows-link",
 "windows_aarch64_gnullvm 0.53.0",
 "windows_aarch64_msvc 0.53.0",
 "windows_i686_gnu 0.53.0",
 "windows_i686_gnullvm 0.53.0",
 "windows_i686_msvc 0.53.0",
 "windows_x86_64_gnu 0.53.0",
 "windows_x86_64_gnullvm 0.53.0",
 "windows_x86_64_msvc 0.53.0",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"

[[package]]
name = "windows_aarch64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"

[[package]]
name = "windows_i686_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"

[[package]]
name = "windows_i686_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"

[[package]]
name = "windows_i686_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"

[[package]]
name = "windows_x86_64_gnu"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"

[[package]]
name = "windows_x86_64_msvc"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"

[[package]]
name = "wit-bindgen-rt"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
dependencies = [
 "bitflags",
]

----- FILE: ttlog/Cargo.toml -----
[package]
name = "ttlog"
version = "0.1.0"
edition = "2021"

[dependencies]
chrono = { version = "0.4", features = ["serde"] }
lz4 = "1.28"
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11"
serde_json = "1.0"
tracing = "0.1"
tracing-subscriber = "0.3"
crossbeam-channel = "0.5"
gethostname = "0.4"
tempfile = "3.8"

[dev-dependencies]
tempfile = "3.8"


----- FILE: ttlog/src/buffer/__test__/mod.rs -----
#[cfg(test)]
mod __test__ {

  use crate::buffer::RingBuffer;
  use crate::event::Event;

  #[test]
  fn test_ring_buffer_new() {
    let buffer: RingBuffer<i32> = RingBuffer::new(10);
    assert_eq!(buffer.capacity, 10);
    assert_eq!(buffer.len(), 0);
    assert!(buffer.is_empty());
  }

  #[test]
  fn test_ring_buffer_push_single() {
    let mut buffer = RingBuffer::new(5);
    buffer.push(42);

    assert_eq!(buffer.len(), 1);
    assert!(!buffer.is_empty());

    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![42]);
  }

  #[test]
  fn test_ring_buffer_push_multiple() {
    let mut buffer = RingBuffer::new(3);

    buffer.push(1);
    buffer.push(2);
    buffer.push(3);

    assert_eq!(buffer.len(), 3);
    assert_eq!(buffer.capacity, 3);

    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![1, 2, 3]);
  }

  #[test]
  fn test_ring_buffer_overflow() {
    let mut buffer = RingBuffer::new(3);

    buffer.push(1);
    buffer.push(2);
    buffer.push(3);
    buffer.push(4); // should evict 1

    assert_eq!(buffer.len(), 3);
    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![2, 3, 4]);

    buffer.push(5); // should evict 2
    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![3, 4, 5]);
  }

  #[test]
  fn test_ring_buffer_take_snapshot() {
    let mut buffer = RingBuffer::new(5);

    buffer.push(10);
    buffer.push(20);
    buffer.push(30);

    let snapshot = buffer.take_snapshot();
    assert_eq!(snapshot, vec![10, 20, 30]);
    assert!(buffer.is_empty());
    assert_eq!(buffer.len(), 0);
    assert_eq!(buffer.capacity, 5);
  }

  #[test]
  fn test_ring_buffer_take_snapshot_empty() {
    let mut buffer: RingBuffer<i32> = RingBuffer::new(5);

    let snapshot = buffer.take_snapshot();
    assert!(snapshot.is_empty());
    assert!(buffer.is_empty());
  }

  #[test]
  fn test_ring_buffer_iter() {
    let mut buffer = RingBuffer::new(4);

    buffer.push(1);
    buffer.push(2);
    buffer.push(3);

    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert_eq!(items, vec![1, 2, 3]);
  }

  #[test]
  fn test_ring_buffer_iter_empty() {
    let buffer: RingBuffer<i32> = RingBuffer::new(5);
    let items: Vec<i32> = buffer.iter().cloned().collect();
    assert!(items.is_empty());
  }

  #[test]
  fn test_ring_buffer_with_events() {
    let mut buffer = RingBuffer::new(3);

    let event1 = Event::new(
      1000,
      "INFO".to_string(),
      "First".to_string(),
      "target1".to_string(),
    );
    let event2 = Event::new(
      2000,
      "WARN".to_string(),
      "Second".to_string(),
      "target2".to_string(),
    );
    let event3 = Event::new(
      3000,
      "ERROR".to_string(),
      "Third".to_string(),
      "target3".to_string(),
    );

    buffer.push(event1.clone());
    buffer.push(event2.clone());
    buffer.push(event3.clone());

    let events: Vec<Event> = buffer.iter().cloned().collect();
    assert_eq!(events.len(), 3);
    assert_eq!(events[0].message, "First");
    assert_eq!(events[1].message, "Second");
    assert_eq!(events[2].message, "Third");

    // Test overflow with events
    let event4 = Event::new(
      4000,
      "DEBUG".to_string(),
      "Fourth".to_string(),
      "target4".to_string(),
    );
    buffer.push(event4.clone());
    let events: Vec<Event> = buffer.iter().cloned().collect();
    assert_eq!(events.len(), 3);
    assert_eq!(events[0].message, "Second"); // First evicted
    assert_eq!(events[2].message, "Fourth");
  }

  // test: push and snapshot repeatedly
  #[test]
  fn test_ring_buffer_push_and_snapshot_repeatedly() {
    let mut buffer = RingBuffer::new(2);

    buffer.push(1);
    let snap1 = buffer.take_snapshot();
    assert_eq!(snap1, vec![1]);
    assert!(buffer.is_empty());

    buffer.push(2);
    buffer.push(3); // should evict 2 if buffer was filled previously
    let snap2 = buffer.take_snapshot();
    assert_eq!(snap2, vec![2, 3]);
    assert!(buffer.is_empty());
  }
}

----- FILE: ttlog/src/buffer/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};
use std::collections::VecDeque;

/// A fixed-capacity ring buffer that stores items in insertion order.
///
/// When the buffer reaches its capacity, adding a new item
/// will automatically evict the oldest item.
///
/// # Type Parameters
/// * `T` - The type of the items stored in the buffer. Must implement `Clone`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RingBuffer<T: Clone> {
  /// Internal storage for the buffer
  data: VecDeque<T>,

  /// Maximum number of items the buffer can hold
  capacity: usize,
}

impl<T: Clone> RingBuffer<T> {
  /// Creates a new empty ring buffer with the specified capacity.
  ///
  /// # Arguments
  /// * `capacity` - The maximum number of items the buffer can store.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let buffer: RingBuffer<i32> = RingBuffer::new(10);
  /// assert_eq!(buffer.len(), 0);
  /// ```
  pub fn new(capacity: usize) -> Self {
    Self {
      data: VecDeque::with_capacity(capacity),
      capacity,
    }
  }

  /// Adds a new item to the buffer.
  ///
  /// If the buffer is already at capacity, the oldest item is removed
  /// to make space for the new item.
  ///
  /// # Arguments
  /// * `item` - The item to add to the buffer.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(1);
  /// buffer.push(2);
  /// buffer.push(3); // evicts 1
  /// assert_eq!(buffer.len(), 2);
  /// ```
  pub fn push(&mut self, item: T) {
    if self.data.len() == self.capacity {
      self.data.pop_front();
    }
    self.data.push_back(item);
  }

  /// Removes and returns all items currently in the buffer.
  ///
  /// This operation leaves the buffer empty but preserves its capacity,
  /// avoiding reallocations on future pushes.
  ///
  /// # Returns
  /// A `Vec<T>` containing all items in insertion order.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(3);
  /// buffer.push(1);
  /// buffer.push(2);
  /// let snapshot = buffer.take_snapshot();
  /// assert_eq!(snapshot, vec![1, 2]);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn take_snapshot(&mut self) -> Vec<T> {
    let old = std::mem::replace(&mut self.data, VecDeque::with_capacity(self.capacity));
    old.into_iter().collect()
  }

  /// Returns an iterator over the items currently in the buffer.
  ///
  /// Items are iterated in insertion order (oldest to newest).
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(2);
  /// buffer.push(10);
  /// buffer.push(20);
  /// for item in buffer.iter() {
  ///     println!("{}", item);
  /// }
  /// ```
  pub fn iter(&self) -> impl Iterator<Item = &T> {
    self.data.iter()
  }

  /// Returns the number of items currently in the buffer.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let mut buffer = RingBuffer::new(2);
  /// assert_eq!(buffer.len(), 0);
  /// buffer.push(5);
  /// assert_eq!(buffer.len(), 1);
  /// ```
  pub fn len(&self) -> usize {
    self.data.len()
  }

  /// Returns `true` if the buffer is empty.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::buffer::RingBuffer;
  ///
  /// let buffer: RingBuffer<i32> = RingBuffer::new(2);
  /// assert!(buffer.is_empty());
  /// ```
  pub fn is_empty(&self) -> bool {
    self.data.is_empty()
  }
}

----- FILE: ttlog/src/event/__test__/mod.rs -----
#[cfg(test)]
mod __test__ {

  use crate::event::Event;

  #[test]
  fn test_event_creation() {
    let event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    assert_eq!(event.timestamp, 1234567890);
    assert_eq!(event.level, "INFO");
    assert_eq!(event.message, "Test message");
    assert_eq!(event.target, "test_target");
  }

  #[test]
  fn test_event_default() {
    let event = Event::default();

    assert_eq!(event.timestamp, 0);
    assert_eq!(event.level, "");
    assert_eq!(event.message, "");
    assert_eq!(event.target, "");
  }

  #[test]
  fn test_event_clone() {
    let event = Event::new(
      1234567890,
      "WARN".to_string(),
      "Warning message".to_string(),
      "warn_target".to_string(),
    );

    let cloned = event.clone();

    assert_eq!(event.timestamp, cloned.timestamp);
    assert_eq!(event.level, cloned.level);
    assert_eq!(event.message, cloned.message);
    assert_eq!(event.target, cloned.target);
  }

  #[test]
  fn test_event_serialization() {
    let event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    let json = event.serialize();
    assert!(json.contains("1234567890"));
    assert!(json.contains("INFO"));
    assert!(json.contains("Test message"));
    assert!(json.contains("test_target"));
  }

  #[test]
  fn test_event_deserialization() {
    let original_event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    let json = original_event.serialize();
    let deserialized_event = Event::deserialize(json);

    assert_eq!(original_event.timestamp, deserialized_event.timestamp);
    assert_eq!(original_event.level, deserialized_event.level);
    assert_eq!(original_event.message, deserialized_event.message);
    assert_eq!(original_event.target, deserialized_event.target);
  }

  #[test]
  fn test_event_display() {
    let event = Event::new(
      1234567890,
      "INFO".to_string(),
      "Display test".to_string(),
      "display_target".to_string(),
    );

    let display_str = format!("{}", event);
    assert!(display_str.contains("1234567890"));
    assert!(display_str.contains("INFO"));
    assert!(display_str.contains("Display test"));
    assert!(display_str.contains("display_target"));
  }

  /// Helper to create events with different levels
  fn event_with_level(level: &str) -> Event {
    Event::new(
      1000,
      level.to_string(),
      "Level test".to_string(),
      "target".to_string(),
    )
  }

  #[test]
  fn test_event_all_levels() {
    let levels = ["Trace", "Debug", "Info", "Warn", "Error"];

    for &level in &levels {
      let event = event_with_level(level);
      assert_eq!(event.level, level);
      assert_eq!(event.message, "Level test");
      assert_eq!(event.target, "target");
    }
  }

  #[test]
  fn test_event_special_characters() {
    let msg = "Message with \"quotes\", newlines\n, and \\backslashes\\";
    let target = "target/with/special\\chars";
    let event = Event::new(
      123,
      "DEBUG".to_string(),
      msg.to_string(),
      target.to_string(),
    );

    let json = event.serialize();
    assert!(json.contains("\\\"quotes\\\""));
    assert!(json.contains("newlines\\n"));
    assert!(json.contains("\\\\backslashes\\\\"));

    let deserialized = Event::deserialize(json);
    assert_eq!(deserialized.message, msg);
    assert_eq!(deserialized.target, target);
  }

  #[test]
  fn test_event_multiple_clone_and_modify() {
    let event = Event::new(
      1,
      "INFO".to_string(),
      "Original".to_string(),
      "target1".to_string(),
    );
    let mut clone1 = event.clone();
    let mut clone2 = clone1.clone();

    // Modify clones
    clone1.message = "Modified1".to_string();
    clone2.message = "Modified2".to_string();

    assert_eq!(event.message, "Original");
    assert_eq!(clone1.message, "Modified1");
    assert_eq!(clone2.message, "Modified2");
  }

  #[test]
  fn test_event_json_round_trip_with_special_chars() {
    let msg = "Special chars: \t\n\"\\";
    let event = Event::new(
      999,
      "WARN".to_string(),
      msg.to_string(),
      "target".to_string(),
    );

    let json = event.serialize();
    let deserialized = Event::deserialize(json.clone());
    let reserialized = deserialized.serialize();

    assert_eq!(json, reserialized);
    assert_eq!(deserialized.message, msg);
  }

  #[test]
  fn test_event_display_matches_serialize() {
    let event = Event::new(
      555,
      "ERROR".to_string(),
      "Display test".to_string(),
      "display_target".to_string(),
    );
    assert_eq!(event.serialize(), format!("{}", event));
  }
}

----- FILE: ttlog/src/event/mod.rs -----
mod __test__;

use serde::{Deserialize, Serialize};

/// Defines the severity or importance level of an event.
///
/// This enum can be used to categorize events based on their significance.
/// The levels are commonly ordered from the most detailed to the most severe:
/// `Trace < Debug < Info < Warn < Error`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Level {
  /// Very detailed information, mostly useful for debugging
  Trace,
  /// Debug-level information, used for development or troubleshooting
  Debug,
  /// General informational messages, typically useful in production
  Info,
  /// Warning messages that indicate potential issues
  Warn,
  /// Error messages that indicate a failure or critical problem
  Error,
}

/// Represents an event with a timestamp, severity level, message, and target.
///
/// `Event` is a versatile structure that can be serialized and deserialized,
/// making it suitable for storage, transmission, and analysis in systems
/// where event tracking or monitoring is required.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
  /// The timestamp of the event, in milliseconds since the Unix epoch (January 1, 1970).
  ///
  /// This field allows events to be ordered chronologically or correlated
  /// with other events in a system.
  pub timestamp: u64,

  /// The severity level of the event as a string (e.g., `"INFO"`, `"WARN"`).
  ///
  /// This field indicates the importance of the event. While a `Level` enum
  /// exists, storing it as a string allows for compatibility with external
  /// systems or logging frameworks.
  pub level: String,

  /// The textual content or description of the event.
  ///
  /// This field should contain meaningful information describing what
  /// happened, why, or any other contextual data useful for analysis.
  pub message: String,

  /// The source or target of the event.
  ///
  /// This can represent a module name, component identifier, or system
  /// element associated with the event. Helps in filtering and routing events.
  pub target: String,
}

impl Event {
  /// Creates a new `Event` with the provided timestamp, level, message, and target.
  ///
  /// # Arguments
  /// * `timestamp` - Milliseconds since the Unix epoch representing the event time.
  /// * `level` - String indicating the severity of the event.
  /// * `message` - Description or content of the event.
  /// * `target` - Source or target system/component of the event.
  ///
  /// # Returns
  /// A new `Event` instance populated with the provided values.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let event = Event::new(
  ///     1_692_105_600_000u64,
  ///     "INFO".to_string(),
  ///     "User logged in".to_string(),
  ///     "auth_module".to_string(),
  /// );
  /// assert_eq!(event.level, "INFO");
  /// ```
  pub fn new(timestamp: u64, level: String, message: String, target: String) -> Self {
    Self {
      timestamp,
      level,
      message,
      target,
    }
  }

  /// Serializes the `Event` into a JSON string.
  ///
  /// Useful for storing, sending, or logging events in a standard format.
  ///
  /// # Panics
  /// This function will panic if serialization fails. In production systems,
  /// ensure the data can be serialized or handle errors using a custom wrapper.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let event = Event::new(123, "INFO".to_string(), "Hello".to_string(), "main".to_string());
  /// let json = event.serialize();
  /// assert!(json.contains("\"timestamp\":123"));
  /// ```
  pub fn serialize(&self) -> String {
    serde_json::to_string(self).expect("Failed to serialize")
  }

  /// Deserializes a JSON string into an `Event`.
  ///
  /// # Arguments
  /// * `json` - JSON string representing an `Event`.
  ///
  /// # Panics
  /// This function will panic if deserialization fails due to invalid JSON
  /// or mismatched structure.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let json = r#"{"timestamp":123,"level":"INFO","message":"Hello","target":"main"}"#.to_string();
  /// let event = Event::deserialize(json);
  /// assert_eq!(event.level, "INFO");
  /// ```
  pub fn deserialize(json: String) -> Self {
    serde_json::from_str::<Self>(&json).expect("Failed to deserialize")
  }
}

impl Default for Event {
  /// Returns a default `Event` with zero timestamp and empty strings.
  ///
  /// Useful for creating placeholder events or initializing structures
  /// before populating them with real data.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let default_event = Event::default();
  /// assert_eq!(default_event.timestamp, 0);
  /// assert_eq!(default_event.level, "");
  /// ```
  fn default() -> Self {
    Self {
      timestamp: 0,
      level: "".to_string(),
      message: String::new(),
      target: String::new(),
    }
  }
}

impl std::fmt::Display for Event {
  /// Formats the event as a JSON string.
  ///
  /// Allows `Event` instances to be printed directly using `println!` or
  /// included in other formatted strings.
  ///
  /// # Example
  ///
  /// ```rust
  /// use ttlog::event::Event;
  /// let event = Event::default();
  /// let s = format!("{}", event);
  /// assert!(s.contains("\"timestamp\":0"));
  /// ```
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    write!(f, "{}", self.serialize())
  }
}

----- FILE: ttlog/src/lib.rs -----
pub mod buffer;
pub mod event;
pub mod panic_hook;
pub mod snapshot;
pub mod trace;
pub mod trace_layer;

----- FILE: ttlog/src/panic_hook/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::panic_hook::PanicHook;
  use crate::trace::{Message, Trace};
  use crossbeam_channel::{bounded, RecvTimeoutError};
  use std::{panic, thread, time::Duration};

  /// Start a background thread that drains the receiver for a short while.
  /// This prevents the panic hook's blocking `send` from deadlocking tests.
  fn start_drain_thread(receiver: crossbeam_channel::Receiver<Message>) -> thread::JoinHandle<()> {
    thread::spawn(move || loop {
      match receiver.recv_timeout(Duration::from_millis(500)) {
        Ok(_msg) => {
          // keep draining
          continue;
        },
        Err(RecvTimeoutError::Timeout) => break,
        Err(RecvTimeoutError::Disconnected) => break,
      }
    })
  }

  /// Verifies that `PanicHook::install` can be called without panicking.
  #[test]
  fn test_panic_hook_install() {
    let (sender, _receiver) = bounded::<Message>(10);
    PanicHook::install(sender);
  }

  /// Checks that a panic triggers the hook (catch_unwind may prevent execution of hook).
  #[test]
  fn test_panic_hook_message_sending() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let result = panic::catch_unwind(|| panic!("Test panic for hook"));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Ensures the hook handles a disconnected channel gracefully.
  #[test]
  fn test_panic_hook_with_disconnected_channel() {
    let (sender, receiver) = bounded::<Message>(10);
    // Drop receiver to simulate disconnected channel; send should return Err in hook.
    drop(receiver);
    PanicHook::install(sender);

    let result = panic::catch_unwind(|| panic!("Test panic with disconnected channel"));
    assert!(result.is_err());
  }

  /// Verifies that multiple installations override previous hooks.
  #[test]
  fn test_panic_hook_multiple_installations() {
    let (sender1, receiver1) = bounded::<Message>(10);
    let (sender2, receiver2) = bounded::<Message>(10);

    // Drain both receivers so hook send won't block
    let h1 = start_drain_thread(receiver1);
    let h2 = start_drain_thread(receiver2);

    PanicHook::install(sender1);
    PanicHook::install(sender2);

    let _ = h1.join();
    let _ = h2.join();
  }

  /// Tests integration with a `Trace` system.
  #[test]
  fn test_panic_hook_integration_with_trace() {
    let trace_system = Trace::init(100, 10);

    // If Trace::init has internal receivers, we assume it manages them.
    // Still, to be safe, create a test channel and drain it (won't interfere).
    let (_test_sender, test_receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(test_receiver);

    PanicHook::install(trace_system.get_sender());

    tracing::info!("Pre-panic event");

    let result = panic::catch_unwind(|| panic!("Integration test panic"));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Tests the hook with different panic payload types.
  #[test]
  fn test_panic_hook_with_various_panic_types() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let results = vec![
      panic::catch_unwind(|| panic!("String panic")),
      panic::catch_unwind(|| panic!("{}", "Formatted panic")),
      panic::catch_unwind(|| panic!("{}", 42)),
      panic::catch_unwind(|| panic!("{:?}", vec![1, 2, 3])),
    ];

    for result in results {
      assert!(result.is_err());
    }

    let _ = drain.join();
  }

  /// Tests the hook with `panic_any` and custom payloads.
  #[test]
  fn test_panic_hook_with_custom_panic_info() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let result = panic::catch_unwind(|| panic::panic_any("Custom panic payload"));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Ensures thread safety by panicking in multiple threads.
  #[test]
  fn test_panic_hook_thread_safety() {
    let (sender, receiver) = bounded::<Message>(100);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let handles: Vec<_> = (0..5)
      .map(|id| {
        thread::spawn(move || {
          if id % 2 == 0 {
            panic!("Thread {} panic", id)
          } else {
            id
          }
        })
      })
      .collect();

    for handle in handles {
      let _ = handle.join();
    }

    let _ = drain.join();
  }

  /// Tests nested panics to ensure stability.
  #[test]
  fn test_panic_hook_with_nested_panics() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let result = panic::catch_unwind(|| {
      let _ = panic::catch_unwind(|| panic!("Inner panic"));
      panic!("Outer panic");
    });
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Simulates long panic messages.
  #[test]
  fn test_panic_hook_with_long_panic_messages() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let long_message = "A".repeat(10000);
    let result = panic::catch_unwind(|| panic!("{}", long_message));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Tests panic messages with Unicode characters.
  #[test]
  fn test_panic_hook_with_unicode_messages() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let result = panic::catch_unwind(|| panic!("Unicode panic: 🚀 🎉 💻"));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Tests panic messages containing special characters.
  #[test]
  fn test_panic_hook_with_special_characters() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let result = panic::catch_unwind(|| panic!("Special chars: \"quotes\" and \n newlines"));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Tests numeric panic payloads with `panic_any`.
  #[test]
  fn test_panic_hook_with_numeric_payloads() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let results = vec![
      panic::catch_unwind(|| panic::panic_any(42u32)),
      panic::catch_unwind(|| panic::panic_any(3.14f64)),
      panic::catch_unwind(|| panic::panic_any(-1i32)),
    ];

    for result in results {
      assert!(result.is_err());
    }

    let _ = drain.join();
  }

  /// Tests panic payloads containing collections.
  #[test]
  fn test_panic_hook_with_collection_payloads() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let results = vec![
      panic::catch_unwind(|| panic::panic_any(vec![1, 2, 3])),
      panic::catch_unwind(|| panic::panic_any(["a", "b", "c"])),
      panic::catch_unwind(|| panic::panic_any(std::collections::HashMap::<i32, i32>::new())),
    ];

    for result in results {
      assert!(result.is_err());
    }

    let _ = drain.join();
  }

  /// Tests panic payloads with custom error types.
  #[test]
  fn test_panic_hook_with_custom_error_types() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    #[derive(Debug)]
    struct CustomError {
      #[allow(dead_code)]
      message: String,
      #[allow(dead_code)]
      code: u32,
    }

    let custom_error = CustomError {
      message: "Error".into(),
      code: 42,
    };
    let result = panic::catch_unwind(|| panic::panic_any(custom_error));
    assert!(result.is_err());

    let _ = drain.join();
  }

  /// Tests panic payloads with standard error types.
  #[test]
  fn test_panic_hook_with_std_error_types() {
    let (sender, receiver) = bounded::<Message>(10);
    let drain = start_drain_thread(receiver);
    PanicHook::install(sender);

    let results = vec![
      panic::catch_unwind(|| {
        panic::panic_any(std::io::Error::new(
          std::io::ErrorKind::NotFound,
          "File not found",
        ))
      }),
      panic::catch_unwind(|| panic::panic_any(std::fmt::Error)),
    ];

    for result in results {
      assert!(result.is_err());
    }

    let _ = drain.join();
  }

  #[test]
  fn test_panic_hook_with_full_channel() {
    use crossbeam_channel::{bounded, RecvTimeoutError};
    use std::time::Duration;

    // capacity 1, fill the channel so it's full
    let (sender, receiver) = bounded::<Message>(1);
    sender
      .send(Message::SnapshotImmediate("pre".to_string()))
      .unwrap();

    // readiness channel to ensure receiver drained the prefilled slot
    let (ready_tx, ready_rx) = bounded::<()>(1);

    let recv_handle = std::thread::spawn(move || {
      let _ = receiver.recv().unwrap(); // drain prefilled
      let _ = ready_tx.send(()); // notify main thread

      // wait for panic hook message (timeout avoids hanging)
      match receiver.recv_timeout(Duration::from_secs(2)) {
        Ok(msg) => Some(msg),
        Err(RecvTimeoutError::Timeout) => None,
        Err(RecvTimeoutError::Disconnected) => None,
      }
    });

    // Wait for receiver to drain the prefilled slot
    ready_rx
      .recv_timeout(Duration::from_secs(1))
      .expect("receiver did not drain prefilled slot in time");

    // Save the previous global panic hook and restore it later
    let previous_hook = std::panic::take_hook();

    // Install our hook (moves sender into it)
    PanicHook::install(sender);

    // Trigger the panic (inside catch_unwind so test runner continues)
    let result = panic::catch_unwind(|| panic!("Test panic with full channel"));
    assert!(result.is_err());

    // Restore previous hook so other tests are unaffected
    std::panic::set_hook(previous_hook);

    // Join receiver and assert we got the snapshot
    let received = recv_handle.join().expect("receiver thread panicked");
    assert!(
      received.is_some(),
      "expected to receive the snapshot from panic hook"
    );
  }
}

----- FILE: ttlog/src/panic_hook/mod.rs -----
mod __test__;

use crate::trace::Message;

use chrono::Duration;
use crossbeam_channel::Sender;
use std::thread;

/// `PanicHook` is a utility for installing a custom panic hook in Rust programs.
///
/// When a panic occurs, this hook captures the panic information and attempts
/// to send an immediate snapshot request via a `crossbeam_channel::Sender<Message>`.
/// This is useful in tracing or logging systems to capture the state of the
/// application at the moment of a panic.
///
/// # Example
///
/// ```rust,no_run
/// use ttlog::panic_hook::PanicHook;
/// use ttlog::trace::Message;
/// use crossbeam_channel::unbounded;
///
/// let (sender, receiver) = unbounded();
///
/// // Install the panic hook
/// PanicHook::install(sender.clone());
///
/// // Trigger a panic to test
/// std::panic::panic_any("something went wrong");
/// ```
///
/// The hook will attempt to send a `Message::SnapshotImmediate("panic")`
/// using `try_send` or `send`. If sending fails (e.g., channel is full or closed),
/// the error is printed to stderr but otherwise ignored. The hook also sleeps
/// briefly to give background threads time to process the snapshot request.
pub struct PanicHook {}

impl PanicHook {
  /// Installs a panic hook that requests an immediate snapshot when a panic occurs.
  ///
  /// # Parameters
  ///
  /// - `sender`: A `crossbeam_channel::Sender<Message>` used to request the snapshot.
  ///   The hook will send a `Message::SnapshotImmediate("panic")` via this channel.
  ///
  /// # Behavior
  ///
  /// When a panic occurs:
  /// 1. The panic information (`std::panic::PanicInfo`) is printed to stderr.
  /// 2. A `Message::SnapshotImmediate("panic")` is sent through the provided sender.
  ///    If sending fails (e.g., channel is full or closed), the error is printed to stderr.
  /// 3. The hook sleeps for a short duration (default 120ms) to give writer or logger
  ///    threads time to process the snapshot request.
  /// 4. Finally, the hook prints a completion message to stderr.
  ///
  /// # Notes
  ///
  /// - This hook is intended for **debugging and tracing**. It should not rely on
  ///   complex logic, as panic handlers run during unwinding and should remain lightweight.
  /// - Blocking operations in the panic hook are generally discouraged. The brief
  ///   sleep here is a compromise to allow background snapshot processing.
  pub fn install(sender: Sender<Message>) {
    std::panic::set_hook(Box::new(move |info| {
      eprintln!("[Panic] Captured panic: {:?}", info);

      // non-blocking attempt to enqueue; do NOT block in panic handler
      if let Err(e) = sender.try_send(Message::SnapshotImmediate("panic".to_string())) {
        eprintln!("[Panic] Unable to enqueue snapshot request: {:?}", e);
      } else {
        eprintln!("[Panic] Snapshot request enqueued");
      }

      // Give the writer thread time to process the snapshot
      thread::sleep(Duration::milliseconds(120).to_std().unwrap());

      eprintln!("[Panic] Panic hook completed");
    }));
  }
}

----- FILE: ttlog/src/snapshot/__test__/mod.rs -----
#[cfg(test)]
mod __test__ {
  use crate::buffer::RingBuffer;
  use crate::event::Event;
  use crate::snapshot::SnapshotWriter;

  #[test]
  fn test_snapshot_writer_new() {
    let writer = SnapshotWriter::new("test_service");
    assert_eq!(writer.service, "test_service");

    let writer = SnapshotWriter::new("another_service".to_string());
    assert_eq!(writer.service, "another_service");
  }

  #[test]
  fn test_snapshot_creation() {
    let mut buffer = RingBuffer::new(5);
    let writer = SnapshotWriter::new("test_service");

    // Add some events
    buffer.push(Event::new(
      1000,
      "INFO".to_string(),
      "First".to_string(),
      "target1".to_string(),
    ));
    buffer.push(Event::new(
      2000,
      "WARN".to_string(),
      "Second".to_string(),
      "target2".to_string(),
    ));

    let snapshot = writer.create_snapshot(&mut buffer, "test_reason").unwrap();

    assert_eq!(snapshot.service, "test_service");
    assert_eq!(snapshot.reason, "test_reason");
    assert_eq!(snapshot.events.len(), 2);
    assert_eq!(snapshot.events[0].message, "First");
    assert_eq!(snapshot.events[1].message, "Second");

    // Buffer should be empty after snapshot
    assert!(buffer.is_empty());
  }

  #[test]
  fn test_snapshot_creation_empty_buffer() {
    let mut buffer: RingBuffer<Event> = RingBuffer::new(5);
    let writer = SnapshotWriter::new("test_service");

    let snapshot = writer.create_snapshot(&mut buffer, "empty_reason");

    assert!(snapshot.is_none());
    assert!(buffer.is_empty());
  }

  #[test]
  fn test_snapshot_metadata() {
    let mut buffer = RingBuffer::new(3);
    let writer = SnapshotWriter::new("metadata_test");

    buffer.push(Event::new(
      1000,
      "INFO".to_string(),
      "Test".to_string(),
      "target".to_string(),
    ));

    let snapshot = writer
      .create_snapshot(&mut buffer, "metadata_test")
      .unwrap();

    assert_eq!(snapshot.service, "metadata_test");
    assert_eq!(snapshot.reason, "metadata_test");
    assert_eq!(snapshot.pid, std::process::id());
    assert!(!snapshot.hostname.is_empty());
    assert!(!snapshot.created_at.is_empty());

    // Check timestamp format (YYYYMMDDHHMMSS)
    assert_eq!(snapshot.created_at.len(), 14);
    assert!(snapshot.created_at.chars().all(|c| c.is_ascii_digit()));
  }
}

----- FILE: ttlog/src/snapshot/mod.rs -----
mod __test__;

use chrono::Utc;
use lz4::block::{compress, CompressionMode};
use serde::{Deserialize, Serialize};
use std::fs::{self, File};
use std::io::Write;

use crate::buffer::RingBuffer;
use crate::event::Event;

/// A snapshot bundles metadata together with a sequence of events.
///
/// A `Snapshot` is intended to be a compact, self-contained representation
/// of the recent runtime state of the service. It contains:
///
/// * `service` — logical name of the service creating the snapshot.
/// * `hostname` — platform host the snapshot was taken on.
/// * `pid` — process id of the running process that created the snapshot.
/// * `created_at` — timestamp string (formatted `YYYYMMDDHHMMSS`) when snapshot was created.
/// * `reason` — human-readable reason for the snapshot (e.g., `"panic"`, `"manual"`).
/// * `events` — the captured events from the ring buffer (oldest → newest).
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Snapshot {
  /// Name of the service (e.g., `"ttlog"`).
  pub service: String,
  /// Hostname where the snapshot was captured.
  pub hostname: String,
  /// OS process id that created the snapshot.
  pub pid: u32,
  /// Snapshot creation timestamp formatted as `YYYYMMDDHHMMSS`.
  pub created_at: String,
  /// Reason for taking the snapshot (free-form string).
  pub reason: String,
  /// Captured events (in insertion order).
  pub events: Vec<Event>,
}

/// Writes `Snapshot` instances to disk.
///
/// `SnapshotWriter` is a small helper that:
/// 1. extracts events from a `RingBuffer<Event>`,
/// 2. marshals the `Snapshot` into CBOR,
/// 3. compresses the CBOR payload with LZ4 (block API),
/// 4. writes the compressed bytes atomically to disk (write to `.tmp` then rename).
///
/// The on-disk format is intentionally simple: CBOR payload compressed with LZ4.
/// The file naming scheme is:
///
/// ```text
/// /tmp/ttlog-<pid>-<created_at>-<reason>.bin
/// ```
///
/// where `<created_at>` uses `YYYYMMDDHHMMSS`.
pub struct SnapshotWriter {
  service: String,
}

impl SnapshotWriter {
  /// Create a new `SnapshotWriter`.
  ///
  /// # Arguments
  ///
  /// * `service` - logical name of the service that will appear in every snapshot.
  ///
  /// # Example (illustrative)
  ///
  /// ```rust,ignore
  /// // create a writer bound to an application name
  /// let writer = SnapshotWriter::new("my-service");
  /// ```
  pub fn new(service: impl Into<String>) -> Self {
    Self {
      service: service.into(),
    }
  }

  /// Create a snapshot from the provided ring buffer.
  ///
  /// This method **consumes** the current contents of the ring buffer by calling
  /// `take_snapshot()` on the ring. If the buffer is empty this returns `None`.
  ///
  /// The snapshot contains:
  /// * the provided `reason` (converted to `String`),
  /// * hostname via `gethostname::gethostname()` (lossy string),
  /// * current `pid`,
  /// * `created_at` timestamp using UTC formatted `YYYYMMDDHHMMSS`,
  /// * all captured events.
  ///
  /// # Returns
  ///
  /// * `Some(Snapshot)` if there are events to snapshot.
  /// * `None` if the ring buffer was empty.
  ///
  /// # Notes
  ///
  /// * `take_snapshot()` swaps out the internal buffer to avoid reallocations.
  /// * This function is synchronous and cheap — it mainly constructs metadata
  ///   and moves the event vector out of the `RingBuffer`.
  pub fn create_snapshot(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Option<Snapshot> {
    let events = ring.take_snapshot();
    if events.is_empty() {
      return None;
    }

    let hostname = gethostname::gethostname().to_string_lossy().into_owned();
    let pid = std::process::id();
    let created_at = Utc::now().format("%Y%m%d%H%M%S").to_string();

    Some(Snapshot {
      service: self.service.clone(),
      hostname,
      pid,
      created_at,
      reason: reason.into(),
      events,
    })
  }

  /// Serialize a `Snapshot` to CBOR, compress it with LZ4, and write it atomically.
  ///
  /// Steps:
  /// 1. Serialize the `Snapshot` to CBOR using `serde_cbor::to_vec`.
  /// 2. Compress the CBOR bytes with `lz4::block::compress`.
  /// 3. Write to a temporary file `<filename>.tmp` and call `sync_all()` to flush.
  /// 4. Rename the temp file to the final filename (atomic on POSIX within the same FS).
  ///
  /// # Returns
  ///
  /// * `Ok(())` on success.
  /// * `Err(Box<dyn std::error::Error>)` if any IO/serialization/compression step fails.
  ///
  /// # File Naming
  ///
  /// Default path: `/tmp/ttlog-<pid>-<created_at>-<reason>.bin`
  ///
  /// You can change this behavior by modifying the filename construction in this method.
  ///
  /// # Errors & Safety
  ///
  /// * Serialization (`serde_cbor`) may fail for unexpected data — this returns an error.
  /// * Compression can fail — that error is propagated.
  /// * File creation, `write_all`, `sync_all`, and `rename` can fail due to permissions, disk
  ///   errors, or lack of space. The method returns the boxed error in those cases.
  ///
  /// # Atomicity
  ///
  /// Writing to a temporary file and renaming it is the common POSIX pattern for atomic writes.
  /// On non-POSIX platforms the behavior of `fs::rename` may differ; adjust as necessary.
  ///
  /// # Example (illustrative; not compiled)
  ///
  /// ```rust,ignore
  /// let writer = SnapshotWriter::new("my-service");
  /// if let Some(snapshot) = writer.create_snapshot(&mut ring, "manual") {
  ///     writer.write_snapshot(&snapshot)?;
  /// }
  /// ```
  pub fn write_snapshot(&self, snapshot: &Snapshot) -> Result<(), Box<dyn std::error::Error>> {
    // Serialize CBOR
    let cbor_buff = serde_cbor::to_vec(&snapshot)?;
    // Compress
    let compressed = compress(&cbor_buff, Some(CompressionMode::DEFAULT), true)?;

    // Build filename and write atomically
    let filename = format!(
      "/tmp/ttlog-{}-{}-{}.bin",
      snapshot.pid, snapshot.created_at, snapshot.reason
    );
    let tmp = format!("{}.tmp", &filename);

    {
      let mut f = File::create(&tmp)?;
      f.write_all(&compressed)?;
      f.sync_all()?;
    }
    fs::rename(&tmp, &filename)?;
    eprintln!(
      "[Snapshot] Saved {} events to {}",
      snapshot.events.len(),
      filename
    );
    Ok(())
  }

  /// Convenience: create a snapshot from `ring` and write it to disk if non-empty.
  ///
  /// This calls `create_snapshot()` and — when it returns `Some` — forwards the snapshot
  /// to `write_snapshot()`. If there are no events the method returns `Ok(())` and
  /// prints a small message.
  ///
  /// # Example (illustrative; not compiled)
  ///
  /// ```rust,ignore
  /// let mut ring = RingBuffer::new(1024);
  /// // ... push events ...
  /// let writer = SnapshotWriter::new("svc");
  /// writer.snapshot_and_write(&mut ring, "periodic")?;
  /// ```
  pub fn snapshot_and_write(
    &self,
    ring: &mut RingBuffer<Event>,
    reason: impl Into<String>,
  ) -> Result<(), Box<dyn std::error::Error>> {
    if let Some(snapshot) = self.create_snapshot(ring, reason) {
      self.write_snapshot(&snapshot)
    } else {
      println!("[Snapshot] No events to snapshot");
      Ok(())
    }
  }
}

----- FILE: ttlog/src/trace/__test__/mod.rs -----
#[cfg(test)]
mod __test__ {

  use crate::event::Event;
  use crate::trace::{Message, Trace};

  #[test]
  fn test_trace_init() {
    let trace_system = Trace::init(100, 50);

    // Should have a sender
    assert!(trace_system.sender.capacity().unwrap_or(0) >= 50);
  }

  #[test]
  fn test_trace_get_sender() {
    let trace_system = Trace::init(100, 50);
    let sender = trace_system.get_sender();

    // Should be able to send messages
    let result = sender.send(Message::Event(Event::new(
      1000,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    )));

    assert!(result.is_ok());
  }

  #[test]
  fn test_trace_request_snapshot() {
    let trace_system = Trace::init(100, 50);

    // Should not panic
    trace_system.request_snapshot("test_snapshot");
  }

  #[test]
  fn test_trace_message_display() {
    let event = Event::new(
      1000,
      "INFO".to_string(),
      "Test message".to_string(),
      "test_target".to_string(),
    );

    let messages = vec![
      Message::Event(event.clone()),
      Message::SnapshotImmediate("test_reason".to_string()),
      Message::FlushAndExit,
    ];

    for msg in messages {
      let display_str = format!("{}", msg);
      assert!(!display_str.is_empty());
    }
  }

  #[test]
  fn test_trace_with_tracing_integration() {
    let _trace_system = Trace::init(100, 50);

    // Generate some tracing events
    tracing::info!("Integration test info");
    tracing::warn!("Integration test warning");
    tracing::error!("Integration test error");

    // Test should complete without crashing
  }
}

----- FILE: ttlog/src/trace/mod.rs -----
mod __test__;

use chrono::Duration;
use std::thread;
use std::time::Instant;
use tracing_subscriber::layer::SubscriberExt;

use crate::buffer::RingBuffer;
use crate::event::Event;
use crate::snapshot::SnapshotWriter;
use crate::trace_layer::BufferLayer;

use crossbeam_channel::{bounded, Receiver, Sender};

#[derive(Debug, Clone)]
pub struct Trace {
  sender: Sender<Message>,
}

#[derive(Debug)]
pub enum Message {
  Event(Event),
  SnapshotImmediate(String), // reason
  FlushAndExit,              // optional: for graceful shutdown in tests
}

impl std::fmt::Display for Message {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    match self {
      Message::Event(ev) => write!(f, "Event: {}", ev),
      Message::SnapshotImmediate(reason) => write!(f, "SnapshotImmediate: {}", reason),
      Message::FlushAndExit => write!(f, "FlushAndExit"),
    }
  }
}

impl Trace {
  /// Initializes the tracing/logging system with a bounded channel and a writer thread.
  ///
  /// # Parameters
  /// - `capacity`: The maximum number of messages the ring buffer can hold.
  /// - `channel_capacity`: The maximum number of messages the channel can buffer before blocking.
  ///
  /// # Behavior
  /// - Spawns a dedicated writer thread that reads messages from the channel and writes them into the ring buffer.
  /// - Creates a `BufferLayer` that intercepts tracing events and sends them to the channel.
  /// - Registers the `BufferLayer` with the global tracing subscriber. If a subscriber is already set, the error is ignored.
  ///
  /// # Returns
  /// Returns an instance containing the sender, which can be used to send messages to the buffer asynchronously.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::trace::{Trace, Message};
  /// use ttlog::event::Event;
  ///
  /// let trace_system = Trace::init(1024, 128);
  /// let event = Event::new(1234567890, "INFO".to_string(), "test message".to_string(), "test_target".to_string());
  /// let sender = trace_system.get_sender();
  /// sender.send(Message::Event(event)).unwrap();
  /// ```
  pub fn init(capacity: usize, channel_capacity: usize) -> Self {
    let (sender, receiver) = bounded::<Message>(channel_capacity);

    // Spawn writer thread which owns the ring buffer
    thread::spawn(move || Trace::writer_loop(receiver, capacity));

    // Create and register BufferLayer using the sender
    let layer = BufferLayer::new(sender.clone());
    let subscriber = tracing_subscriber::Registry::default().with(layer);
    let _ = tracing::subscriber::set_global_default(subscriber); // ignore error if already set

    Self { sender }
  }

  /// Returns a clone of the sender used to send messages into the tracing buffer.
  ///
  /// This allows other threads or components to asynchronously send `Message`s
  /// (events or snapshot requests) to the writer thread.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::trace::{Trace, Message};
  /// use ttlog::event::Event;
  ///
  /// let trace_system = Trace::init(1024, 128);
  /// let event = Event::new(1234567890, "INFO".to_string(), "test message".to_string(), "test_target".to_string());
  /// let sender = trace_system.get_sender();
  /// sender.send(Message::Event(event)).unwrap();
  /// ```
  pub fn get_sender(&self) -> Sender<Message> {
    self.sender.clone()
  }

  /// Requests an immediate snapshot of the current ring buffer.
  ///
  /// Sends a `SnapshotImmediate` message into the channel. The `reason` is included
  /// in the snapshot metadata for logging or debugging purposes.
  ///
  /// If the channel is full, the request is ignored.
  ///
  /// # Parameters
  /// - `reason`: A string describing why the snapshot was requested.
  ///
  /// # Example
  /// ```rust
  /// use ttlog::trace::Trace;
  ///
  /// let trace_system = Trace::init(1024, 128);
  /// trace_system.request_snapshot("manual_debug_snapshot");
  /// ```
  pub fn request_snapshot(&self, reason: &str) {
    let _ = self
      .sender
      .try_send(Message::SnapshotImmediate(reason.to_string()));
  }

  /// The main writer loop that runs on a dedicated thread.
  ///
  /// This function continuously receives messages from the channel and:
  /// - Stores events in a ring buffer.
  /// - Writes immediate snapshots when requested.
  /// - Flushes and exits when requested.
  /// - Performs periodic flushes every 60 seconds.
  ///
  /// # Parameters
  /// - `receiver`: The channel receiver used to receive messages from other threads.
  /// - `capacity`: The size of the ring buffer to store incoming events.
  ///
  /// # Notes
  /// - This function is intended to run on a separate thread.
  /// - Snapshots are written using `snapshot_and_write`.
  fn writer_loop(receiver: Receiver<Message>, capacity: usize) {
    let mut ring = RingBuffer::new(capacity);
    let mut last_periodic = Instant::now();
    // you can set a periodic flush interval
    let periodic_flush_interval = Duration::seconds(60).to_std().unwrap();

    let service = SnapshotWriter::new("ttlog");

    while let Ok(msg) = receiver.recv() {
      println!("Received message: ###############################3{}", msg);
      match msg {
        Message::Event(ev) => {
          ring.push(ev);
        },
        Message::SnapshotImmediate(reason) => {
          if !ring.is_empty() {
            if let Err(e) = service.snapshot_and_write(&mut ring, reason) {
              eprintln!("[Snapshot] failed: {}", e);
            }
          } else {
            eprintln!(
              "[Snapshot] buffer empty, skipping snapshot (reason={})",
              reason
            );
          }
        },
        Message::FlushAndExit => {
          if !ring.is_empty() {
            let _ = service.snapshot_and_write(&mut ring, "flush_and_exit".to_string());
          }
          break;
        },
      }

      // periodic flush
      if last_periodic.elapsed() >= periodic_flush_interval && !ring.is_empty() {
        let _ = service.snapshot_and_write(&mut ring, "periodic".to_string());
        last_periodic = Instant::now();
      }
    }
  }
}

----- FILE: ttlog/src/trace_layer/__test__/mod.rs -----
#[cfg(test)]
mod tests {
  use crate::trace::Message;
  use crate::trace_layer::BufferLayer;
  use crossbeam_channel::bounded;
  use tracing::{error, info, warn};
  use tracing_subscriber::{layer::SubscriberExt, Registry};

  #[test]
  fn test_buffer_layer_new() {
    let (sender, _receiver) = bounded::<Message>(10);
    let layer = BufferLayer::new(sender);

    assert!(std::format!("{:?}", layer).contains("BufferLayer"));
  }

  #[test]
  fn test_buffer_layer_clone() {
    let (sender, _receiver) = bounded::<Message>(10);
    let layer = BufferLayer::new(sender);

    let cloned = layer.clone();

    // Both should have the same sender
    assert!(std::format!("{:?}", layer).contains("BufferLayer"));
    assert!(std::format!("{:?}", cloned).contains("BufferLayer"));
  }

  #[test]
  fn test_buffer_layer_with_tracing_events() {
    let (sender, receiver) = bounded::<Message>(100);
    let layer = BufferLayer::new(sender);

    // Create subscriber with our layer
    let subscriber = Registry::default().with(layer);
    let _guard = tracing::subscriber::set_default(subscriber);

    // Emit tracing events
    info!("Test info message");
    warn!("Test warning message");
    error!("Test error message");

    // Check that events were captured
    let mut events = Vec::new();
    while let Ok(msg) = receiver.try_recv() {
      match msg {
        Message::Event(event) => events.push(event),
        _ => {},
      }
    }

    // Should have captured 3 events
    assert_eq!(events.len(), 3);

    // Check event details
    let info_event = events.iter().find(|e| e.level == "INFO").unwrap();
    assert_eq!(info_event.message, "Test info message");

    let warn_event = events.iter().find(|e| e.level == "WARN").unwrap();
    assert_eq!(warn_event.message, "Test warning message");

    let error_event = events.iter().find(|e| e.level == "ERROR").unwrap();
    assert_eq!(error_event.message, "Test error message");
  }
}

----- FILE: ttlog/src/trace_layer/mod.rs -----
mod __test__;

use crate::{event::Event, trace::Message};

use chrono::Utc;
use crossbeam_channel::{Sender, TrySendError};
use tracing::field::Visit;
use tracing::{field::Field, Event as TracingEvent, Subscriber};
use tracing_subscriber::{layer::Context, registry::LookupSpan, Layer};

/// `BufferLayer` is a `tracing` layer that captures tracing events and
/// forwards them to a channel for asynchronous processing.
///
/// This layer converts a `tracing::Event` into a minimal `Event` struct
/// containing only the timestamp, log level, and message, and sends it
/// to a `crossbeam_channel::Sender<Message>`.
///
/// # Design
/// - Non-blocking: uses `try_send` to avoid slowing down the tracing hot path.
/// - Drops events if the channel is full to prevent blocking.
/// - Handles disconnected channels gracefully.
#[derive(Debug, Clone)]
pub struct BufferLayer {
  /// Channel sender used to forward captured events.
  sender: Sender<Message>,
}

impl BufferLayer {
  /// Creates a new `BufferLayer` that will send events to the given channel.
  ///
  /// # Parameters
  /// - `sender`: A `crossbeam_channel::Sender<Message>` to forward captured events.
  pub fn new(sender: Sender<Message>) -> Self {
    Self { sender }
  }
}

impl<T> Layer<T> for BufferLayer
where
  T: Subscriber + for<'a> LookupSpan<'a>,
{
  /// Called for every tracing event.
  ///
  /// Converts the event into a minimal `Event` (timestamp + level + message)
  /// and attempts to send it through the channel. Drops the event if the
  /// channel is full, or logs an error if the channel is disconnected.
  ///
  /// # Parameters
  /// - `event`: The `tracing::Event` being recorded.
  /// - `_ctx`: The subscriber context (unused in this implementation).
  fn on_event(&self, event: &TracingEvent<'_>, _ctx: Context<'_, T>) {
    // Capture timestamp and level
    let ts = Utc::now().timestamp_millis() as u64;
    let level = event.metadata().level().to_string();

    // Extract the message field using a visitor
    let mut visitor = MessageVisitor::default();
    event.record(&mut visitor);
    let message = visitor.message.unwrap_or_else(|| "".to_string());
    let target = event.metadata().target().to_string();

    // Build a minimal Event
    let new_event = Event::new(ts, level, message, target);

    // Attempt non-blocking send; drop if channel full
    match self.sender.try_send(Message::Event(new_event)) {
      Ok(_) => {},
      Err(err) => match err {
        TrySendError::Full(_) => {
          // Optional: increment a dropped-events counter here
        },
        TrySendError::Disconnected(_) => {
          // Writer thread died; log error
          eprintln!("[BufferLayer] writer thread disconnected");
        },
      },
    }
  }
}

/// `MessageVisitor` is a helper struct used to extract a string message
/// from structured tracing fields.
///
/// This is typically used when subscribing to tracing events and you want
/// to capture a specific field (like a message) from the event in a uniform way.
#[derive(Default)]
struct MessageVisitor {
  /// Stores the captured message from the tracing field.
  pub message: Option<String>,
}

impl Visit for MessageVisitor {
  /// Records a string field from a tracing event.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The string value to record.
  ///
  /// # Behavior
  /// Stores the string value in the `message` field, replacing any previous value.
  fn record_str(&mut self, _field: &Field, value: &str) {
    self.message = Some(value.to_string());
  }

  /// Records a field that implements the `Debug` trait.
  ///
  /// # Parameters
  /// - `_field`: The `Field` metadata (ignored in this implementation).
  /// - `value`: The value to record, formatted using `Debug`.
  ///
  /// # Behavior
  /// Converts the value to a string using `format!("{:?}", value)` and stores it
  /// in the `message` field, replacing any previous value.
  fn record_debug(&mut self, _field: &Field, value: &dyn std::fmt::Debug) {
    self.message = Some(format!("{:?}", value));
  }
}

